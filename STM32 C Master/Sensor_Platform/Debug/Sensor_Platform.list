
Sensor_Platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08011200  08011200  00021200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011798  08011798  00030364  2**0
                  CONTENTS
  4 .ARM          00000008  08011798  08011798  00021798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117a0  080117a0  00030364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117a0  080117a0  000217a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117a4  080117a4  000217a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  080117a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  20000364  08011b0c  00030364  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000228c  08011b0c  0003228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef21  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004261  00000000  00000000  0004f2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00053518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00054e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0f6  00000000  00000000  00056668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8cb  00000000  00000000  0007275e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a089  00000000  00000000  00092029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c0b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c4  00000000  00000000  0012c104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000364 	.word	0x20000364
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111e8 	.word	0x080111e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000368 	.word	0x20000368
 80001dc:	080111e8 	.word	0x080111e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <bmp280_uhr_all_init>:
	parameters->ups_temperature = BMP280_STANDARD_RES;
	parameters->filter = BMP280_IIR_4;
	parameters->standby = BMP280_250ms;
}

void bmp280_uhr_all_init(BMP280_Params *parameters) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	parameters->mode = BMP280_NORMAL;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
	parameters->ups_pressure = BMP280_ULTRA_HIGH_RES;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2205      	movs	r2, #5
 800100e:	705a      	strb	r2, [r3, #1]
	parameters->ups_temperature = BMP280_ULTRA_HIGH_RES;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2205      	movs	r2, #5
 8001014:	709a      	strb	r2, [r3, #2]
	parameters->filter = BMP280_IIR_4;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2202      	movs	r2, #2
 800101a:	711a      	strb	r2, [r3, #4]
	parameters->standby = BMP280_250ms;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	715a      	strb	r2, [r3, #5]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <read_reg16>:
	parameters->ups_temperature = BMP280_SKIP;
	parameters->filter = BMP280_IIR_OFF;
	parameters->standby = BMP280_250ms;
}

static bool read_reg16(BMP280_HandleTypedef *dev, uint8_t address, uint16_t *value) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b08a      	sub	sp, #40	; 0x28
 8001032:	af04      	add	r7, sp, #16
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	460b      	mov	r3, r1
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->address << 1);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8b5b      	ldrh	r3, [r3, #26]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, address, 1, rx_buff, 2, 5000)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69d8      	ldr	r0, [r3, #28]
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	b29a      	uxth	r2, r3
 800104c:	8af9      	ldrh	r1, [r7, #22]
 800104e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2302      	movs	r3, #2
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	f003 ff0c 	bl	8004e7c <HAL_I2C_Mem_Read>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <read_reg16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7d3b      	ldrb	r3, [r7, #20]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	801a      	strh	r2, [r3, #0]
		return true;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <read_reg16+0x56>
	} else
		return false;
 8001082:	2300      	movs	r3, #0

}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t address, uint8_t *value,
		uint8_t len) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af04      	add	r7, sp, #16
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	461a      	mov	r2, r3
 8001098:	460b      	mov	r3, r1
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	4613      	mov	r3, r2
 800109e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->address << 1);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8b5b      	ldrh	r3, [r3, #26]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, address, 1, value, len, 5000) == HAL_OK)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	69d8      	ldr	r0, [r3, #28]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	8af9      	ldrh	r1, [r7, #22]
 80010b6:	f241 3488 	movw	r4, #5000	; 0x1388
 80010ba:	9402      	str	r4, [sp, #8]
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	f003 feda 	bl	8004e7c <HAL_I2C_Mem_Read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <read_data+0x46>
		return 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <read_data+0x48>
	else
		return 1;
 80010d2:	2301      	movs	r3, #1

}
 80010d4:	4618      	mov	r0, r3
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <write_reg8>:

static int write_reg8(BMP280_HandleTypedef *dev, uint8_t address, uint8_t value) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
 80010e8:	4613      	mov	r3, r2
 80010ea:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->address << 1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	8b5b      	ldrh	r3, [r3, #26]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, address, 1, &value, 1, 10000) == HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69d8      	ldr	r0, [r3, #28]
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	89f9      	ldrh	r1, [r7, #14]
 80010fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	1cbb      	adds	r3, r7, #2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	f003 fdbb 	bl	8004c88 <HAL_I2C_Mem_Write>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <write_reg8+0x40>
		return false;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <write_reg8+0x42>
	else
		return true;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]

	if (read_reg16(dev, 0x88, &dev->dig_T1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	2188      	movs	r1, #136	; 0x88
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff7a 	bl	800102e <read_reg16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d06f      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3302      	adds	r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	218a      	movs	r1, #138	; 0x8a
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff70 	bl	800102e <read_reg16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d065      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3304      	adds	r3, #4
 8001158:	461a      	mov	r2, r3
 800115a:	218c      	movs	r1, #140	; 0x8c
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff66 	bl	800102e <read_reg16>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x8e, &dev->dig_P1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3306      	adds	r3, #6
 800116c:	461a      	mov	r2, r3
 800116e:	218e      	movs	r1, #142	; 0x8e
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff5c 	bl	800102e <read_reg16>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d051      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3308      	adds	r3, #8
 8001180:	461a      	mov	r2, r3
 8001182:	2190      	movs	r1, #144	; 0x90
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff52 	bl	800102e <read_reg16>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d047      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	330a      	adds	r3, #10
 8001194:	461a      	mov	r2, r3
 8001196:	2192      	movs	r1, #146	; 0x92
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff48 	bl	800102e <read_reg16>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03d      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	330c      	adds	r3, #12
 80011a8:	461a      	mov	r2, r3
 80011aa:	2194      	movs	r1, #148	; 0x94
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff3e 	bl	800102e <read_reg16>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d033      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	330e      	adds	r3, #14
 80011bc:	461a      	mov	r2, r3
 80011be:	2196      	movs	r1, #150	; 0x96
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff34 	bl	800102e <read_reg16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d029      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3310      	adds	r3, #16
 80011d0:	461a      	mov	r2, r3
 80011d2:	2198      	movs	r1, #152	; 0x98
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff2a 	bl	800102e <read_reg16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01f      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3312      	adds	r3, #18
 80011e4:	461a      	mov	r2, r3
 80011e6:	219a      	movs	r1, #154	; 0x9a
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff20 	bl	800102e <read_reg16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d015      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3314      	adds	r3, #20
 80011f8:	461a      	mov	r2, r3
 80011fa:	219c      	movs	r1, #156	; 0x9c
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff16 	bl	800102e <read_reg16>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <read_calibration_data+0xfa>
			&& read_reg16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3316      	adds	r3, #22
			&& read_reg16(dev, 0x9e,
 800120c:	461a      	mov	r2, r3
 800120e:	219e      	movs	r1, #158	; 0x9e
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff0c 	bl	800102e <read_reg16>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <read_calibration_data+0xfa>

		return true;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <read_calibration_data+0xfc>
	}

	return false;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <bmp280_init>:





bool bmp280_init(BMP280_HandleTypedef *dev, BMP280_Params *parameters) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]

	if (dev->address != BMP280_I2C_ADDRESS) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	8b5b      	ldrh	r3, [r3, #26]
 8001238:	2b77      	cmp	r3, #119	; 0x77
 800123a:	d001      	beq.n	8001240 <bmp280_init+0x16>

		return false;
 800123c:	2300      	movs	r3, #0
 800123e:	e069      	b.n	8001314 <bmp280_init+0xea>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f103 0218 	add.w	r2, r3, #24
 8001246:	2301      	movs	r3, #1
 8001248:	21d0      	movs	r1, #208	; 0xd0
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff1e 	bl	800108c <read_data>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <bmp280_init+0x30>
		return false;
 8001256:	2300      	movs	r3, #0
 8001258:	e05c      	b.n	8001314 <bmp280_init+0xea>
	}

	if (dev->id != BMP280_DEVICE_ID) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7e1b      	ldrb	r3, [r3, #24]
 800125e:	2b58      	cmp	r3, #88	; 0x58
 8001260:	d001      	beq.n	8001266 <bmp280_init+0x3c>

		return false;
 8001262:	2300      	movs	r3, #0
 8001264:	e056      	b.n	8001314 <bmp280_init+0xea>
	}


	if (write_reg8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001266:	22b6      	movs	r2, #182	; 0xb6
 8001268:	21e0      	movs	r1, #224	; 0xe0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff36 	bl	80010dc <write_reg8>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <bmp280_init+0x50>
		return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e04c      	b.n	8001314 <bmp280_init+0xea>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800127a:	f107 020d 	add.w	r2, r7, #13
 800127e:	2301      	movs	r3, #1
 8001280:	21f3      	movs	r1, #243	; 0xf3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff02 	bl	800108c <read_data>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f5      	bne.n	800127a <bmp280_init+0x50>
				&& (status & 1) == 0)
 800128e:	7b7b      	ldrb	r3, [r7, #13]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <bmp280_init+0x50>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff44 	bl	8001126 <read_calibration_data>
 800129e:	4603      	mov	r3, r0
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <bmp280_init+0x82>
 80012aa:	e001      	b.n	80012b0 <bmp280_init+0x86>
		return false;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e031      	b.n	8001314 <bmp280_init+0xea>
	}



	uint8_t config = (parameters->standby << 5) | (parameters->filter << 2);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	795b      	ldrb	r3, [r3, #5]
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
	if (write_reg8(dev, BMP280_REG_CONFIG, config)) {
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	461a      	mov	r2, r3
 80012ca:	21f5      	movs	r1, #245	; 0xf5
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff05 	bl	80010dc <write_reg8>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <bmp280_init+0xb2>
		return false;
 80012d8:	2300      	movs	r3, #0
 80012da:	e01b      	b.n	8001314 <bmp280_init+0xea>
	}

	uint8_t ctrl = (parameters->ups_temperature << 5)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	015b      	lsls	r3, r3, #5
			| (parameters->ups_pressure << 2) | (parameters->mode);
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (parameters->ups_temperature << 5)
 80012fa:	73bb      	strb	r3, [r7, #14]


	if (write_reg8(dev, BMP280_REG_CTRL, ctrl)) {
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	21f4      	movs	r1, #244	; 0xf4
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff feea 	bl	80010dc <write_reg8>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <bmp280_init+0xe8>
		return false;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <bmp280_init+0xea>
	}

	return true;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <compensate_temperature>:
	}
	return false;
}

static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	10da      	asrs	r2, r3, #3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800133e:	12db      	asrs	r3, r3, #11
 8001340:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	111b      	asrs	r3, r3, #4
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	8812      	ldrh	r2, [r2, #0]
 800134a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	1112      	asrs	r2, r2, #4
 8001350:	68f9      	ldr	r1, [r7, #12]
 8001352:	8809      	ldrh	r1, [r1, #0]
 8001354:	1a52      	subs	r2, r2, r1
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001362:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001366:	139b      	asrs	r3, r3, #14
 8001368:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	441a      	add	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3380      	adds	r3, #128	; 0x80
 8001380:	121b      	asrs	r3, r3, #8
}
 8001382:	4618      	mov	r0, r3
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <compensate_pressure>:


static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800138e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001392:	b0cc      	sub	sp, #304	; 0x130
 8001394:	af00      	add	r7, sp, #0
 8001396:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800139a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800139e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80013a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013a6:	17da      	asrs	r2, r3, #31
 80013a8:	461c      	mov	r4, r3
 80013aa:	4615      	mov	r5, r2
 80013ac:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80013b0:	f145 3bff 	adc.w	fp, r5, #4294967295
 80013b4:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80013b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013c0:	fb03 f102 	mul.w	r1, r3, r2
 80013c4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80013c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	18ca      	adds	r2, r1, r3
 80013d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013d6:	fba3 8903 	umull	r8, r9, r3, r3
 80013da:	eb02 0309 	add.w	r3, r2, r9
 80013de:	4699      	mov	r9, r3
 80013e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	17da      	asrs	r2, r3, #31
 80013ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80013f4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80013f8:	4603      	mov	r3, r0
 80013fa:	fb03 f209 	mul.w	r2, r3, r9
 80013fe:	460b      	mov	r3, r1
 8001400:	fb08 f303 	mul.w	r3, r8, r3
 8001404:	4413      	add	r3, r2
 8001406:	4602      	mov	r2, r0
 8001408:	fba8 1202 	umull	r1, r2, r8, r2
 800140c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001410:	460a      	mov	r2, r1
 8001412:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800141a:	4413      	add	r3, r2
 800141c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001420:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001424:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001428:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800142c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001430:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001434:	b21b      	sxth	r3, r3
 8001436:	17da      	asrs	r2, r3, #31
 8001438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800143c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001444:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001448:	462a      	mov	r2, r5
 800144a:	fb02 f203 	mul.w	r2, r2, r3
 800144e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001452:	4621      	mov	r1, r4
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	441a      	add	r2, r3
 800145a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800145e:	4621      	mov	r1, r4
 8001460:	fba3 1301 	umull	r1, r3, r3, r1
 8001464:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001468:	460b      	mov	r3, r1
 800146a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800146e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001478:	f04f 0000 	mov.w	r0, #0
 800147c:	f04f 0100 	mov.w	r1, #0
 8001480:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001484:	462b      	mov	r3, r5
 8001486:	0459      	lsls	r1, r3, #17
 8001488:	4623      	mov	r3, r4
 800148a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800148e:	4623      	mov	r3, r4
 8001490:	0458      	lsls	r0, r3, #17
 8001492:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001496:	1814      	adds	r4, r2, r0
 8001498:	643c      	str	r4, [r7, #64]	; 0x40
 800149a:	414b      	adcs	r3, r1
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
 800149e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80014a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80014a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	17da      	asrs	r2, r3, #31
 80014b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014c6:	00d9      	lsls	r1, r3, #3
 80014c8:	2000      	movs	r0, #0
 80014ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014ce:	1814      	adds	r4, r2, r0
 80014d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80014d2:	414b      	adcs	r3, r1
 80014d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014da:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80014de:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014e6:	fb03 f102 	mul.w	r1, r3, r2
 80014ea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	18ca      	adds	r2, r1, r3
 80014f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001500:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001504:	460b      	mov	r3, r1
 8001506:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800150a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001518:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800151c:	b21b      	sxth	r3, r3
 800151e:	17da      	asrs	r2, r3, #31
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001524:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001528:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800152c:	462b      	mov	r3, r5
 800152e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001532:	4642      	mov	r2, r8
 8001534:	fb02 f203 	mul.w	r2, r2, r3
 8001538:	464b      	mov	r3, r9
 800153a:	4621      	mov	r1, r4
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	4622      	mov	r2, r4
 8001544:	4641      	mov	r1, r8
 8001546:	fba2 1201 	umull	r1, r2, r2, r1
 800154a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800154e:	460a      	mov	r2, r1
 8001550:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001554:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800156a:	4623      	mov	r3, r4
 800156c:	0a18      	lsrs	r0, r3, #8
 800156e:	462b      	mov	r3, r5
 8001570:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001574:	462b      	mov	r3, r5
 8001576:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800157c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001580:	b21b      	sxth	r3, r3
 8001582:	17da      	asrs	r2, r3, #31
 8001584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001588:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800158c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001590:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001594:	464a      	mov	r2, r9
 8001596:	fb02 f203 	mul.w	r2, r2, r3
 800159a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800159e:	4644      	mov	r4, r8
 80015a0:	fb04 f303 	mul.w	r3, r4, r3
 80015a4:	441a      	add	r2, r3
 80015a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015aa:	4644      	mov	r4, r8
 80015ac:	fba3 4304 	umull	r4, r3, r3, r4
 80015b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015b4:	4623      	mov	r3, r4
 80015b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80015d0:	464c      	mov	r4, r9
 80015d2:	0323      	lsls	r3, r4, #12
 80015d4:	4644      	mov	r4, r8
 80015d6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015da:	4644      	mov	r4, r8
 80015dc:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015de:	1884      	adds	r4, r0, r2
 80015e0:	633c      	str	r4, [r7, #48]	; 0x30
 80015e2:	eb41 0303 	adc.w	r3, r1, r3
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
 80015e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015ec:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80015f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80015f4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015f8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80015fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001604:	88db      	ldrh	r3, [r3, #6]
 8001606:	b29b      	uxth	r3, r3
 8001608:	2200      	movs	r2, #0
 800160a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800160e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001616:	462b      	mov	r3, r5
 8001618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800161c:	4642      	mov	r2, r8
 800161e:	fb02 f203 	mul.w	r2, r2, r3
 8001622:	464b      	mov	r3, r9
 8001624:	4621      	mov	r1, r4
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	4622      	mov	r2, r4
 800162e:	4641      	mov	r1, r8
 8001630:	fba2 1201 	umull	r1, r2, r2, r1
 8001634:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001638:	460a      	mov	r2, r1
 800163a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800163e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001642:	4413      	add	r3, r2
 8001644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001654:	4629      	mov	r1, r5
 8001656:	104a      	asrs	r2, r1, #1
 8001658:	4629      	mov	r1, r5
 800165a:	17cb      	asrs	r3, r1, #31
 800165c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001660:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001664:	4313      	orrs	r3, r2
 8001666:	d101      	bne.n	800166c <compensate_pressure+0x2de>
		return 0; 
 8001668:	2300      	movs	r3, #0
 800166a:	e148      	b.n	80018fe <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800166c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001670:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
 8001678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800167a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800167e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001682:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001686:	105b      	asrs	r3, r3, #1
 8001688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800168c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001690:	07db      	lsls	r3, r3, #31
 8001692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001696:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800169a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800169e:	4621      	mov	r1, r4
 80016a0:	1a89      	subs	r1, r1, r2
 80016a2:	67b9      	str	r1, [r7, #120]	; 0x78
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb61 0303 	sbc.w	r3, r1, r3
 80016aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016ac:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	1891      	adds	r1, r2, r2
 80016b6:	6239      	str	r1, [r7, #32]
 80016b8:	415b      	adcs	r3, r3
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c0:	4621      	mov	r1, r4
 80016c2:	1851      	adds	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	414b      	adcs	r3, r1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	1889      	adds	r1, r1, r2
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb43 0101 	adc.w	r1, r3, r1
 80016f2:	6179      	str	r1, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	460b      	mov	r3, r1
 800171c:	462a      	mov	r2, r5
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	008b      	lsls	r3, r1, #2
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173a:	4641      	mov	r1, r8
 800173c:	008a      	lsls	r2, r1, #2
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	673b      	str	r3, [r7, #112]	; 0x70
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	677b      	str	r3, [r7, #116]	; 0x74
 8001754:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001758:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800175c:	f7ff fa7c 	bl	8000c58 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800176c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001770:	b21b      	sxth	r3, r3
 8001772:	17da      	asrs	r2, r3, #31
 8001774:	66bb      	str	r3, [r7, #104]	; 0x68
 8001776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001778:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0b50      	lsrs	r0, r2, #13
 8001786:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800178a:	1359      	asrs	r1, r3, #13
 800178c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001790:	462b      	mov	r3, r5
 8001792:	fb00 f203 	mul.w	r2, r0, r3
 8001796:	4623      	mov	r3, r4
 8001798:	fb03 f301 	mul.w	r3, r3, r1
 800179c:	4413      	add	r3, r2
 800179e:	4622      	mov	r2, r4
 80017a0:	fba2 1200 	umull	r1, r2, r2, r0
 80017a4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017a8:	460a      	mov	r2, r1
 80017aa:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80017ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80017b2:	4413      	add	r3, r2
 80017b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	0b50      	lsrs	r0, r2, #13
 80017c6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017ca:	1359      	asrs	r1, r3, #13
 80017cc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017d0:	462b      	mov	r3, r5
 80017d2:	fb00 f203 	mul.w	r2, r0, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	fb03 f301 	mul.w	r3, r3, r1
 80017dc:	4413      	add	r3, r2
 80017de:	4622      	mov	r2, r4
 80017e0:	fba2 1200 	umull	r1, r2, r2, r0
 80017e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80017e8:	460a      	mov	r2, r1
 80017ea:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80017ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80017f2:	4413      	add	r3, r2
 80017f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001804:	4621      	mov	r1, r4
 8001806:	0e4a      	lsrs	r2, r1, #25
 8001808:	4629      	mov	r1, r5
 800180a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800180e:	4629      	mov	r1, r5
 8001810:	164b      	asrs	r3, r1, #25
 8001812:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800181a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800181e:	b21b      	sxth	r3, r3
 8001820:	17da      	asrs	r2, r3, #31
 8001822:	663b      	str	r3, [r7, #96]	; 0x60
 8001824:	667a      	str	r2, [r7, #100]	; 0x64
 8001826:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800182a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800182e:	462a      	mov	r2, r5
 8001830:	fb02 f203 	mul.w	r2, r2, r3
 8001834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001838:	4621      	mov	r1, r4
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001844:	4621      	mov	r1, r4
 8001846:	fba2 1201 	umull	r1, r2, r2, r1
 800184a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800184e:	460a      	mov	r2, r1
 8001850:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001854:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001858:	4413      	add	r3, r2
 800185a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800186a:	4621      	mov	r1, r4
 800186c:	0cca      	lsrs	r2, r1, #19
 800186e:	4629      	mov	r1, r5
 8001870:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001874:	4629      	mov	r1, r5
 8001876:	14cb      	asrs	r3, r1, #19
 8001878:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800187c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001880:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001884:	1884      	adds	r4, r0, r2
 8001886:	65bc      	str	r4, [r7, #88]	; 0x58
 8001888:	eb41 0303 	adc.w	r3, r1, r3
 800188c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800188e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001892:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001896:	4621      	mov	r1, r4
 8001898:	1889      	adds	r1, r1, r2
 800189a:	6539      	str	r1, [r7, #80]	; 0x50
 800189c:	4629      	mov	r1, r5
 800189e:	eb43 0101 	adc.w	r1, r3, r1
 80018a2:	6579      	str	r1, [r7, #84]	; 0x54
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80018b0:	4623      	mov	r3, r4
 80018b2:	0a18      	lsrs	r0, r3, #8
 80018b4:	462b      	mov	r3, r5
 80018b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018ba:	462b      	mov	r3, r5
 80018bc:	1219      	asrs	r1, r3, #8
 80018be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	17da      	asrs	r2, r3, #31
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80018cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80018da:	464c      	mov	r4, r9
 80018dc:	0123      	lsls	r3, r4, #4
 80018de:	4644      	mov	r4, r8
 80018e0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018e4:	4644      	mov	r4, r8
 80018e6:	0122      	lsls	r2, r4, #4
 80018e8:	1884      	adds	r4, r0, r2
 80018ea:	603c      	str	r4, [r7, #0]
 80018ec:	eb41 0303 	adc.w	r3, r1, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80018fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80018fe:	4618      	mov	r0, r3
 8001900:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800190a <bmp280_read_fixed>:


bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure) {
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	; 0x28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	if (read_data(dev, 0xf7, data, 8)) {
 8001916:	f107 0218 	add.w	r2, r7, #24
 800191a:	2308      	movs	r3, #8
 800191c:	21f7      	movs	r1, #247	; 0xf7
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fbb4 	bl	800108c <read_data>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <bmp280_read_fixed+0x24>
		return false;
 800192a:	2300      	movs	r3, #0
 800192c:	e027      	b.n	800197e <bmp280_read_fixed+0x74>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800192e:	7e3b      	ldrb	r3, [r7, #24]
 8001930:	031a      	lsls	r2, r3, #12
 8001932:	7e7b      	ldrb	r3, [r7, #25]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4313      	orrs	r3, r2
 8001938:	7eba      	ldrb	r2, [r7, #26]
 800193a:	0912      	lsrs	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	4313      	orrs	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001942:	7efb      	ldrb	r3, [r7, #27]
 8001944:	031a      	lsls	r2, r3, #12
 8001946:	7f3b      	ldrb	r3, [r7, #28]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4313      	orrs	r3, r2
 800194c:	7f7a      	ldrb	r2, [r7, #29]
 800194e:	0912      	lsrs	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	4313      	orrs	r3, r2
 8001954:	623b      	str	r3, [r7, #32]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	461a      	mov	r2, r3
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff fcdc 	bl	800131c <compensate_temperature>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	461a      	mov	r2, r3
 800196e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fd0c 	bl	800138e <compensate_pressure>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]


	return true;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <bmp280_read>:


bool bmp280_read(BMP280_HandleTypedef *dev, float *temperature, float *pressure) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure)) {
 8001994:	f107 0210 	add.w	r2, r7, #16
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff ffb3 	bl	800190a <bmp280_read_fixed>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <bmp280_read+0x56>
		*temperature = (float) fixed_temperature / 100;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019e8 <bmp280_read+0x60>
 80019b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80019ec <bmp280_read+0x64>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <bmp280_read+0x58>
	}

	return false;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	42c80000 	.word	0x42c80000
 80019ec:	43800000 	.word	0x43800000

080019f0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80019f0:	b4b0      	push	{r4, r5, r7}
 80019f2:	b08f      	sub	sp, #60	; 0x3c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80019f8:	f240 13b1 	movw	r3, #433	; 0x1b1
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80019fe:	2307      	movs	r3, #7
 8001a00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001a04:	2307      	movs	r3, #7
 8001a06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001a10:	23ff      	movs	r3, #255	; 0xff
 8001a12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	461d      	mov	r5, r3
 8001a24:	f107 040c 	add.w	r4, r7, #12
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	373c      	adds	r7, #60	; 0x3c
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bcb0      	pop	{r4, r5, r7}
 8001a40:	4770      	bx	lr

08001a42 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f99f 	bl	8001d92 <LoRa_read>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	f023 0307 	bic.w	r3, r3, #7
 8001a68:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
 8001a70:	e03e      	b.n	8001af0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d10c      	bne.n	8001a92 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	e02e      	b.n	8001af0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d10c      	bne.n	8001ab2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a9c:	f023 0307 	bic.w	r3, r3, #7
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	f043 0303 	orr.w	r3, r3, #3
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	61da      	str	r2, [r3, #28]
 8001ab0:	e01e      	b.n	8001af0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d10c      	bne.n	8001ad2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001abc:	f023 0307 	bic.w	r3, r3, #7
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	f043 0305 	orr.w	r3, r3, #5
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2205      	movs	r2, #5
 8001ace:	61da      	str	r2, [r3, #28]
 8001ad0:	e00e      	b.n	8001af0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d10b      	bne.n	8001af0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001adc:	f023 0307 	bic.w	r3, r3, #7
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	f043 0306 	orr.w	r3, r3, #6
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2206      	movs	r2, #6
 8001aee:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2101      	movs	r1, #1
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f965 	bl	8001dc6 <LoRa_write>
	//HAL_Delay(10);
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	889b      	ldrh	r3, [r3, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f002 ff30 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6998      	ldr	r0, [r3, #24]
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	f005 fec1 	bl	80078b6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b34:	bf00      	nop
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 faaa 	bl	8008094 <HAL_SPI_GetState>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d1f7      	bne.n	8001b36 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6998      	ldr	r0, [r3, #24]
 8001b4a:	8b3a      	ldrh	r2, [r7, #24]
 8001b4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	f005 ffec 	bl	8007b2e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b56:	bf00      	nop
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 fa99 	bl	8008094 <HAL_SPI_GetState>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d1f7      	bne.n	8001b58 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	889b      	ldrh	r3, [r3, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4619      	mov	r1, r3
 8001b74:	f002 ff06 	bl	8004984 <HAL_GPIO_WritePin>
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	889b      	ldrh	r3, [r3, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f002 fef2 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6998      	ldr	r0, [r3, #24]
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	f005 fe83 	bl	80078b6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001bb0:	bf00      	nop
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 fa6c 	bl	8008094 <HAL_SPI_GetState>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d1f7      	bne.n	8001bb2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6998      	ldr	r0, [r3, #24]
 8001bc6:	8b3a      	ldrh	r2, [r7, #24]
 8001bc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	f005 fe72 	bl	80078b6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001bd2:	bf00      	nop
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f006 fa5b 	bl	8008094 <HAL_SPI_GetState>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d1f7      	bne.n	8001bd4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	889b      	ldrh	r3, [r3, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f002 fec8 	bl	8004984 <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	04db      	lsls	r3, r3, #19
 8001c0a:	115b      	asrs	r3, r3, #5
 8001c0c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	461a      	mov	r2, r3
 8001c18:	2106      	movs	r1, #6
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8d3 	bl	8001dc6 <LoRa_write>
	HAL_Delay(5);
 8001c20:	2005      	movs	r0, #5
 8001c22:	f001 fff3 	bl	8003c0c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2107      	movs	r1, #7
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8c7 	bl	8001dc6 <LoRa_write>
	HAL_Delay(5);
 8001c38:	2005      	movs	r0, #5
 8001c3a:	f001 ffe7 	bl	8003c0c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	461a      	mov	r2, r3
 8001c46:	2108      	movs	r1, #8
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8bc 	bl	8001dc6 <LoRa_write>
	HAL_Delay(5);
 8001c4e:	2005      	movs	r0, #5
 8001c50:	f001 ffdc 	bl	8003c0c <HAL_Delay>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	dd01      	ble.n	8001c70 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	dc01      	bgt.n	8001c7a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001c76:	2307      	movs	r3, #7
 8001c78:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001c7a:	211e      	movs	r1, #30
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f888 	bl	8001d92 <LoRa_read>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f001 ffc0 	bl	8003c0c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	211e      	movs	r1, #30
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f88d 	bl	8001dc6 <LoRa_write>
	HAL_Delay(10);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f001 ffad 	bl	8003c0c <HAL_Delay>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2109      	movs	r1, #9
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f87a 	bl	8001dc6 <LoRa_write>
	HAL_Delay(10);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f001 ff9a 	bl	8003c0c <HAL_Delay>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b2c      	cmp	r3, #44	; 0x2c
 8001cf4:	d801      	bhi.n	8001cfa <LoRa_setOCP+0x1a>
		current = 45;
 8001cf6:	232d      	movs	r3, #45	; 0x2d
 8001cf8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2bf0      	cmp	r3, #240	; 0xf0
 8001cfe:	d901      	bls.n	8001d04 <LoRa_setOCP+0x24>
		current = 240;
 8001d00:	23f0      	movs	r3, #240	; 0xf0
 8001d02:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b78      	cmp	r3, #120	; 0x78
 8001d08:	d809      	bhi.n	8001d1e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	3b2d      	subs	r3, #45	; 0x2d
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <LoRa_setOCP+0x78>)
 8001d10:	fb82 1203 	smull	r1, r2, r2, r3
 8001d14:	1052      	asrs	r2, r2, #1
 8001d16:	17db      	asrs	r3, r3, #31
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e00b      	b.n	8001d36 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	2bf0      	cmp	r3, #240	; 0xf0
 8001d22:	d808      	bhi.n	8001d36 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	331e      	adds	r3, #30
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoRa_setOCP+0x78>)
 8001d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d2e:	1092      	asrs	r2, r2, #2
 8001d30:	17db      	asrs	r3, r3, #31
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	3320      	adds	r3, #32
 8001d3a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	210b      	movs	r1, #11
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f83f 	bl	8001dc6 <LoRa_write>
	HAL_Delay(10);
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f001 ff5f 	bl	8003c0c <HAL_Delay>
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	66666667 	.word	0x66666667

08001d5c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001d64:	211e      	movs	r1, #30
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f813 	bl	8001d92 <LoRa_read>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	f043 0307 	orr.w	r3, r3, #7
 8001d76:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	211e      	movs	r1, #30
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f821 	bl	8001dc6 <LoRa_write>
	HAL_Delay(10);
 8001d84:	200a      	movs	r0, #10
 8001d86:	f001 ff41 	bl	8003c0c <HAL_Delay>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001da8:	f107 030f 	add.w	r3, r7, #15
 8001dac:	f107 010e 	add.w	r1, r7, #14
 8001db0:	2201      	movs	r2, #1
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fea4 	bl	8001b04 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af02      	add	r7, sp, #8
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001de0:	78bb      	ldrb	r3, [r7, #2]
 8001de2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001de4:	f107 030f 	add.w	r3, r7, #15
 8001de8:	f107 010e 	add.w	r1, r7, #14
 8001dec:	2201      	movs	r2, #1
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fec4 	bl	8001b80 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	72fb      	strb	r3, [r7, #11]
 8001e10:	4613      	mov	r3, r2
 8001e12:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	889b      	ldrh	r3, [r3, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f002 fdab 	bl	8004984 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6998      	ldr	r0, [r3, #24]
 8001e32:	f107 0117 	add.w	r1, r7, #23
 8001e36:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f005 fd3b 	bl	80078b6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e40:	bf00      	nop
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 f924 	bl	8008094 <HAL_SPI_GetState>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d1f7      	bne.n	8001e42 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6998      	ldr	r0, [r3, #24]
 8001e56:	7abb      	ldrb	r3, [r7, #10]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f005 fd29 	bl	80078b6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001e64:	bf00      	nop
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 f912 	bl	8008094 <HAL_SPI_GetState>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d1f7      	bne.n	8001e66 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4619      	mov	r1, r3
 8001e82:	f002 fd7f 	bl	8004984 <HAL_GPIO_WritePin>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

	return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff fdbd 	bl	8001a42 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001ec8:	210e      	movs	r1, #14
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff ff61 	bl	8001d92 <LoRa_read>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	210d      	movs	r1, #13
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ff73 	bl	8001dc6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2122      	movs	r1, #34	; 0x22
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff ff6d 	bl	8001dc6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff ff84 	bl	8001e00 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001ef8:	2103      	movs	r1, #3
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff fda1 	bl	8001a42 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001f00:	2112      	movs	r1, #18
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff ff45 	bl	8001d92 <LoRa_read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	2112      	movs	r1, #18
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff53 	bl	8001dc6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001f20:	6979      	ldr	r1, [r7, #20]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fd8d 	bl	8001a42 <LoRa_gotoMode>
			return 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00f      	b.n	8001f4c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001f2c:	88bb      	ldrh	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	80bb      	strh	r3, [r7, #4]
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7ff fd81 	bl	8001a42 <LoRa_gotoMode>
				return 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e003      	b.n	8001f4c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f001 fe61 	bl	8003c0c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001f4a:	e7d9      	b.n	8001f00 <LoRa_transmit+0x5c>
	}
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff96 	bl	8001e8e <LoRa_isvalid>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8093 	beq.w	8002090 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fd68 	bl	8001a42 <LoRa_gotoMode>
			HAL_Delay(10);
 8001f72:	200a      	movs	r0, #10
 8001f74:	f001 fe4a 	bl	8003c0c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff09 	bl	8001d92 <LoRa_read>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001f84:	200a      	movs	r0, #10
 8001f86:	f001 fe41 	bl	8003c0c <HAL_Delay>
			data = read | 0x80;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f90:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	461a      	mov	r2, r3
 8001f96:	2101      	movs	r1, #1
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff14 	bl	8001dc6 <LoRa_write>
			HAL_Delay(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f001 fe34 	bl	8003c0c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fe26 	bl	8001bfc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fe7e 	bl	8001cba <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fe8a 	bl	8001ce0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001fcc:	2223      	movs	r2, #35	; 0x23
 8001fce:	210c      	movs	r1, #12
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fef8 	bl	8001dc6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fec0 	bl	8001d5c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe39 	bl	8001c5c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	211f      	movs	r1, #31
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fee9 	bl	8001dc6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	b2da      	uxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4413      	add	r3, r2
 800200e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	461a      	mov	r2, r3
 8002014:	211d      	movs	r1, #29
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fed5 	bl	8001dc6 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29b      	uxth	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	2120      	movs	r1, #32
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fecb 	bl	8001dc6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	2121      	movs	r1, #33	; 0x21
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fec3 	bl	8001dc6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002040:	2140      	movs	r1, #64	; 0x40
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fea5 	bl	8001d92 <LoRa_read>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002052:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002054:	7bbb      	ldrb	r3, [r7, #14]
 8002056:	461a      	mov	r2, r3
 8002058:	2140      	movs	r1, #64	; 0x40
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff feb3 	bl	8001dc6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002060:	2101      	movs	r1, #1
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fced 	bl	8001a42 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800206e:	200a      	movs	r0, #10
 8002070:	f001 fdcc 	bl	8003c0c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002074:	2142      	movs	r1, #66	; 0x42
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fe8b 	bl	8001d92 <LoRa_read>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d101      	bne.n	800208a <LoRa_init+0x136>
				return LORA_OK;
 8002086:	23c8      	movs	r3, #200	; 0xc8
 8002088:	e004      	b.n	8002094 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 800208a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800208e:	e001      	b.n	8002094 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8002090:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2103      	movs	r1, #3
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	61bb      	str	r3, [r7, #24]
  return result;
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800212a:	b480      	push	{r7}
 800212c:	b089      	sub	sp, #36	; 0x24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	613b      	str	r3, [r7, #16]
  return result;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2103      	movs	r1, #3
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	61bb      	str	r3, [r7, #24]
  return result;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800217c:	bf00      	nop
 800217e:	3724      	adds	r7, #36	; 0x24
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	613b      	str	r3, [r7, #16]
  return result;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2103      	movs	r1, #3
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	61bb      	str	r3, [r7, #24]
  return result;
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	60da      	str	r2, [r3, #12]
}
 80021da:	bf00      	nop
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b089      	sub	sp, #36	; 0x24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	613b      	str	r3, [r7, #16]
  return result;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	210f      	movs	r1, #15
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	61bb      	str	r3, [r7, #24]
  return result;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	431a      	orrs	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002238:	bf00      	nop
 800223a:	3724      	adds	r7, #36	; 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <i2c_MPU6050_write_reg>:
 *
 * Internal function of the MPU6050 driver, that uses I2C to write data to the I2C bus.
 *
 * */
static void i2c_MPU6050_write_reg(uint8_t *data, uint8_t num_of_data)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af04      	add	r7, sp, #16
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  // HAL Driver Usage //

    HAL_I2C_Mem_Write(&hi2c1, MPU6050_WRITE_ADDR, data[0], 1, data + 1, 1, HAL_I2C_TIMEOUT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3301      	adds	r3, #1
 800225a:	2164      	movs	r1, #100	; 0x64
 800225c:	9102      	str	r1, [sp, #8]
 800225e:	2101      	movs	r1, #1
 8002260:	9101      	str	r1, [sp, #4]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	21d0      	movs	r1, #208	; 0xd0
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <i2c_MPU6050_write_reg+0x34>)
 800226a:	f002 fd0d 	bl	8004c88 <HAL_I2C_Mem_Write>



}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000390 	.word	0x20000390

0800227c <i2c_MPU6050_read_reg>:
 * Internal function of the MPU6050 driver, that uses I2C to write a command to the I2C bus.
 * Follows Mem_Read format.
 *
 * */
static void i2c_MPU6050_read_reg(uint8_t command, uint8_t *data, uint8_t num_of_data)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af04      	add	r7, sp, #16
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_WRITE_ADDR, command, 1, data, num_of_data, HAL_I2C_TIMEOUT);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	b29a      	uxth	r2, r3
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	b29b      	uxth	r3, r3
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	9102      	str	r1, [sp, #8]
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2301      	movs	r3, #1
 80022a0:	21d0      	movs	r1, #208	; 0xd0
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <i2c_MPU6050_read_reg+0x34>)
 80022a4:	f002 fdea 	bl	8004e7c <HAL_I2C_Mem_Read>

}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000390 	.word	0x20000390

080022b4 <accel_sensitiviy_config>:
 * It returns the register value to be written for the specified configuration
 * and configures the sensitivity value with which we divide every time we convert to g/s.
 *
 * */
static uint8_t accel_sensitiviy_config(uint8_t config)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value; // Value to be written to the register //

  // Based on the configuration chosen by the user //
  // Choose the sensitivity value and the register value for the MPU6050 //
  switch (config) {
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d827      	bhi.n	8002314 <accel_sensitiviy_config+0x60>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <accel_sensitiviy_config+0x18>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022eb 	.word	0x080022eb
 80022d4:	080022f9 	.word	0x080022f9
 80022d8:	08002307 	.word	0x08002307
    case MPU6050_Accelerometer_2G:
      reg_value = ACCEL_SCALE_2G;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.accel_sensitivity = ACCEL_SENS_2G;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <accel_sensitiviy_config+0x7c>)
 80022e2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80022e6:	605a      	str	r2, [r3, #4]
      break;
 80022e8:	e01b      	b.n	8002322 <accel_sensitiviy_config+0x6e>
    case MPU6050_Accelerometer_4G:
      reg_value = ACCEL_SCALE_4G;
 80022ea:	2308      	movs	r3, #8
 80022ec:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.accel_sensitivity = ACCEL_SENS_4G;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <accel_sensitiviy_config+0x7c>)
 80022f0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80022f4:	605a      	str	r2, [r3, #4]
      break;
 80022f6:	e014      	b.n	8002322 <accel_sensitiviy_config+0x6e>
    case MPU6050_Accelerometer_8G:
      reg_value = ACCEL_SCALE_8G;
 80022f8:	2310      	movs	r3, #16
 80022fa:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.accel_sensitivity = ACCEL_SENS_8G;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <accel_sensitiviy_config+0x7c>)
 80022fe:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002302:	605a      	str	r2, [r3, #4]
      break;
 8002304:	e00d      	b.n	8002322 <accel_sensitiviy_config+0x6e>
    case MPU6050_Accelerometer_16G:
      reg_value = ACCEL_SCALE_16G;
 8002306:	2318      	movs	r3, #24
 8002308:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.accel_sensitivity = ACCEL_SENS_16G;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <accel_sensitiviy_config+0x7c>)
 800230c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002310:	605a      	str	r2, [r3, #4]
      break;
 8002312:	e006      	b.n	8002322 <accel_sensitiviy_config+0x6e>
    default:
      reg_value = ACCEL_SCALE_2G;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.accel_sensitivity = ACCEL_SENS_2G;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <accel_sensitiviy_config+0x7c>)
 800231a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800231e:	605a      	str	r2, [r3, #4]
      break;
 8002320:	bf00      	nop
  }

  return reg_value;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000384 	.word	0x20000384

08002334 <gyro_sensitiviy_config>:
 * It returns the register value to be written for the specified configuration
 * and configures the sensitivity value with which we divide every time we convert to deg/s.
 *
 * */
static uint8_t gyro_sensitiviy_config(uint8_t config)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value; // Value to be written to the register //

  // Based on the configuration chosen by the user //
  // Choose the sensitivity value and the register value for the MPU6050 //
  switch (config) {
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d823      	bhi.n	800238c <gyro_sensitiviy_config+0x58>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <gyro_sensitiviy_config+0x18>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	08002369 	.word	0x08002369
 8002354:	08002375 	.word	0x08002375
 8002358:	08002381 	.word	0x08002381
    case MPU6050_Gyroscope_250_deg:
      reg_value = GYRO_SCALE_250_DEG;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.gyro_sensitivity = GYRO_SENS_250_DEG;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <gyro_sensitiviy_config+0x74>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <gyro_sensitiviy_config+0x78>)
 8002364:	601a      	str	r2, [r3, #0]
      break;
 8002366:	e017      	b.n	8002398 <gyro_sensitiviy_config+0x64>
    case MPU6050_Gyroscope_500_deg:
      reg_value = GYRO_SCALE_500_DEG;
 8002368:	2308      	movs	r3, #8
 800236a:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.gyro_sensitivity = GYRO_SENS_500_DEG;
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <gyro_sensitiviy_config+0x74>)
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <gyro_sensitiviy_config+0x7c>)
 8002370:	601a      	str	r2, [r3, #0]
      break;
 8002372:	e011      	b.n	8002398 <gyro_sensitiviy_config+0x64>
    case MPU6050_Gyroscope_1000_deg:
      reg_value = GYRO_SCALE_1K_DEG;
 8002374:	2310      	movs	r3, #16
 8002376:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.gyro_sensitivity = GYRO_SENS_1K_DEG;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <gyro_sensitiviy_config+0x74>)
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <gyro_sensitiviy_config+0x80>)
 800237c:	601a      	str	r2, [r3, #0]
      break;
 800237e:	e00b      	b.n	8002398 <gyro_sensitiviy_config+0x64>
    case MPU6050_Gyroscope_2000_deg:
      reg_value = GYRO_SCALE_2K_DEG;
 8002380:	2318      	movs	r3, #24
 8002382:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.gyro_sensitivity = GYRO_SENS_2K_DEG;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <gyro_sensitiviy_config+0x74>)
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <gyro_sensitiviy_config+0x84>)
 8002388:	601a      	str	r2, [r3, #0]
      break;
 800238a:	e005      	b.n	8002398 <gyro_sensitiviy_config+0x64>
    default:
      reg_value = GYRO_SCALE_250_DEG;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
      mpu6050_config.gyro_sensitivity = GYRO_SENS_250_DEG;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <gyro_sensitiviy_config+0x74>)
 8002392:	4a06      	ldr	r2, [pc, #24]	; (80023ac <gyro_sensitiviy_config+0x78>)
 8002394:	601a      	str	r2, [r3, #0]
      break;
 8002396:	bf00      	nop
  }

  return reg_value;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000384 	.word	0x20000384
 80023ac:	43030000 	.word	0x43030000
 80023b0:	42830000 	.word	0x42830000
 80023b4:	42033333 	.word	0x42033333
 80023b8:	41833333 	.word	0x41833333

080023bc <MPU6050_set_power_mode>:
 * Function of the MPU6050 that sets the power mode of the sensor
 * based on the input arguments.
 * Freq argument is taken into account only when CYCLE mode is used.
 * */
void MPU6050_set_power_mode(uint8_t power_mode, uint8_t freq)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	460a      	mov	r2, r1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71bb      	strb	r3, [r7, #6]
  uint8_t reg_trx[3]; // Values to be written to the register //

  // MPU6050 is already configured to this power mode //
  mpu6050_config.power_mode = power_mode;
 80023cc:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <MPU6050_set_power_mode+0x104>)
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	7213      	strb	r3, [r2, #8]

  // Set the register address //
  reg_trx[0] = PWR_MGMT_1_REG;
 80023d2:	236b      	movs	r3, #107	; 0x6b
 80023d4:	733b      	strb	r3, [r7, #12]

  // Based on the configuration chosen by the user //
  // Choose the sensitivity value and the register value for the MPU6050 //
  switch (power_mode) {
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d826      	bhi.n	800242a <MPU6050_set_power_mode+0x6e>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <MPU6050_set_power_mode+0x28>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f9 	.word	0x080023f9
 80023e8:	08002403 	.word	0x08002403
 80023ec:	0800240d 	.word	0x0800240d
 80023f0:	08002417 	.word	0x08002417
 80023f4:	08002421 	.word	0x08002421
    case MPU6050_ACCEL_ONLY:
      reg_trx[1] = TEMP_DIS;
 80023f8:	2308      	movs	r3, #8
 80023fa:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = GYRO_STBY;
 80023fc:	2307      	movs	r3, #7
 80023fe:	73bb      	strb	r3, [r7, #14]
      break;
 8002400:	e018      	b.n	8002434 <MPU6050_set_power_mode+0x78>
    case MPU6050_GYRO_ONLY:
      reg_trx[1] = TEMP_DIS;
 8002402:	2308      	movs	r3, #8
 8002404:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = ACCEL_STBY;
 8002406:	2338      	movs	r3, #56	; 0x38
 8002408:	73bb      	strb	r3, [r7, #14]
      break;
 800240a:	e013      	b.n	8002434 <MPU6050_set_power_mode+0x78>
    case MPU6050_CYCLE:
      reg_trx[1] = ENABLE_CYCLE | TEMP_DIS;
 800240c:	2328      	movs	r3, #40	; 0x28
 800240e:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = 0x00; // Needs Freq component //
 8002410:	2300      	movs	r3, #0
 8002412:	73bb      	strb	r3, [r7, #14]
      break;
 8002414:	e00e      	b.n	8002434 <MPU6050_set_power_mode+0x78>
    case MPU6050_SLEEP:
      reg_trx[1] = ENABLE_SLEEP;
 8002416:	2340      	movs	r3, #64	; 0x40
 8002418:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = 0x00; // Don't care Value //
 800241a:	2300      	movs	r3, #0
 800241c:	73bb      	strb	r3, [r7, #14]
      break;
 800241e:	e009      	b.n	8002434 <MPU6050_set_power_mode+0x78>
    case MPU6050_POWER_ON:
      reg_trx[1] = PWR_WAKE_UP;
 8002420:	2300      	movs	r3, #0
 8002422:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = 0x00; // Don't care Value //
 8002424:	2300      	movs	r3, #0
 8002426:	73bb      	strb	r3, [r7, #14]
      break;
 8002428:	e004      	b.n	8002434 <MPU6050_set_power_mode+0x78>
    default:
      reg_trx[1] = PWR_WAKE_UP;
 800242a:	2300      	movs	r3, #0
 800242c:	737b      	strb	r3, [r7, #13]
      reg_trx[2] = 0x00; // Don't care Value //
 800242e:	2300      	movs	r3, #0
 8002430:	73bb      	strb	r3, [r7, #14]
      break;
 8002432:	bf00      	nop
  }

  // Only when in
  if(power_mode == MPU6050_CYCLE) {
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d12e      	bne.n	8002498 <MPU6050_set_power_mode+0xdc>
    // Based on frequency chosen set power management reg 2 //
    // The value is only valid when in cycle mode  //
    switch (freq) {
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d825      	bhi.n	800248c <MPU6050_set_power_mode+0xd0>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <MPU6050_set_power_mode+0x8c>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800245d 	.word	0x0800245d
 800244c:	08002463 	.word	0x08002463
 8002450:	0800246f 	.word	0x0800246f
 8002454:	0800247b 	.word	0x0800247b
 8002458:	08002487 	.word	0x08002487
      case MPU6050_low_power_1_25Hz:
        reg_trx[2] |= LP_WAKE_FREQ_1_25HZ;
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	73bb      	strb	r3, [r7, #14]
        break;
 8002460:	e017      	b.n	8002492 <MPU6050_set_power_mode+0xd6>
      case MPU6050_low_power_5Hz:
        reg_trx[2] |= LP_WAKE_FREQ_5HZ;
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002468:	b2db      	uxtb	r3, r3
 800246a:	73bb      	strb	r3, [r7, #14]
        break;
 800246c:	e011      	b.n	8002492 <MPU6050_set_power_mode+0xd6>
      case MPU6050_low_power_20Hz:
        reg_trx[2] |= LP_WAKE_FREQ_20HZ;
 800246e:	7bbb      	ldrb	r3, [r7, #14]
 8002470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002474:	b2db      	uxtb	r3, r3
 8002476:	73bb      	strb	r3, [r7, #14]
        break;
 8002478:	e00b      	b.n	8002492 <MPU6050_set_power_mode+0xd6>
      case MPU6050_low_power_40Hz:
        reg_trx[2] |= LP_WAKE_FREQ_40HZ;
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002480:	b2db      	uxtb	r3, r3
 8002482:	73bb      	strb	r3, [r7, #14]
        break;
 8002484:	e005      	b.n	8002492 <MPU6050_set_power_mode+0xd6>
      case MPU6050_rate_dont_care:
        reg_trx[2] |= 0x00; // Don't care Value //
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	73bb      	strb	r3, [r7, #14]
        break;
 800248a:	e002      	b.n	8002492 <MPU6050_set_power_mode+0xd6>
      default:
        reg_trx[2] |= 0x00; // Don't care Value //
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	73bb      	strb	r3, [r7, #14]
        break;
 8002490:	bf00      	nop
    }

    // Update the frequency in the configuration struct //
    mpu6050_config.freq = freq;
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <MPU6050_set_power_mode+0x104>)
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	7253      	strb	r3, [r2, #9]
  }

  // Write the chosen values to the register //
  i2c_MPU6050_write_reg(reg_trx, 2);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fed0 	bl	8002244 <i2c_MPU6050_write_reg>

  // Write to the second register //
  // Burst write problems ? //
  reg_trx[0] = PWR_MGMT_2_REG;
 80024a4:	236c      	movs	r3, #108	; 0x6c
 80024a6:	733b      	strb	r3, [r7, #12]
  reg_trx[1] = reg_trx[2];
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	737b      	strb	r3, [r7, #13]
  i2c_MPU6050_write_reg(reg_trx , 2);
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2102      	movs	r1, #2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fec6 	bl	8002244 <i2c_MPU6050_write_reg>

  return;
 80024b8:	bf00      	nop
}
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000384 	.word	0x20000384

080024c4 <MPU6050_enable_irq>:
 *
 * Interrupts are generated when a measurement is complete.
 *
 * */
void MPU6050_enable_irq(uint8_t config)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_trx[2];

  // Configure the pin //
  reg_trx[0] = INT_PIN_CFG_REG;
 80024ce:	2337      	movs	r3, #55	; 0x37
 80024d0:	733b      	strb	r3, [r7, #12]
  reg_trx[1] = config;
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	737b      	strb	r3, [r7, #13]
  i2c_MPU6050_write_reg(reg_trx, 2);
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff feb1 	bl	8002244 <i2c_MPU6050_write_reg>

  // Configure the pin //
  reg_trx[0] = INT_ENABLE_REG;
 80024e2:	2338      	movs	r3, #56	; 0x38
 80024e4:	733b      	strb	r3, [r7, #12]
  reg_trx[1] = IRQ_ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	737b      	strb	r3, [r7, #13]
  i2c_MPU6050_write_reg(reg_trx, 2);
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	2102      	movs	r1, #2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fea7 	bl	8002244 <i2c_MPU6050_write_reg>

  // Read the IRQ status to clear it //
  i2c_MPU6050_read_reg(INT_STATUS_REG, reg_trx, 1);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2201      	movs	r2, #1
 80024fc:	4619      	mov	r1, r3
 80024fe:	203a      	movs	r0, #58	; 0x3a
 8002500:	f7ff febc 	bl	800227c <i2c_MPU6050_read_reg>

  // Update the status //
  mpu6050_config.irq_enable = IRQ_ENABLE;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <MPU6050_enable_irq+0x50>)
 8002506:	2201      	movs	r2, #1
 8002508:	729a      	strb	r2, [r3, #10]
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000384 	.word	0x20000384

08002518 <MPU6050_peripheral_config>:
 *
 * Initializes and configures the GPIOs and the I2C peripheral
 *
 * */
void MPU6050_peripheral_config(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  // Enable the GPIO Port Clock //
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]

  // Configure the GPIOs //
  LL_GPIO_SetPinSpeed(SCL_Port, SCL_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 800253a:	2202      	movs	r2, #2
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	4833      	ldr	r0, [pc, #204]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002540:	f7ff fdf3 	bl	800212a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(SCL_Port, SCL_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8002544:	2201      	movs	r2, #1
 8002546:	2140      	movs	r1, #64	; 0x40
 8002548:	4830      	ldr	r0, [pc, #192]	; (800260c <MPU6050_peripheral_config+0xf4>)
 800254a:	f7ff fdd6 	bl	80020fa <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(SCL_Port, SCL_Pin, LL_GPIO_PULL_UP);
 800254e:	2201      	movs	r2, #1
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	482e      	ldr	r0, [pc, #184]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002554:	f7ff fe18 	bl	8002188 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(SCL_Port, SCL_Pin, LL_GPIO_MODE_ALTERNATE);
 8002558:	2202      	movs	r2, #2
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	482b      	ldr	r0, [pc, #172]	; (800260c <MPU6050_peripheral_config+0xf4>)
 800255e:	f7ff fd9d 	bl	800209c <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(SCL_Port, SCL_Pin, LL_GPIO_AF_4);
 8002562:	2204      	movs	r2, #4
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	4829      	ldr	r0, [pc, #164]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002568:	f7ff fe3d 	bl	80021e6 <LL_GPIO_SetAFPin_0_7>

  LL_GPIO_SetPinSpeed(SDA_Port, SDA_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 800256c:	2202      	movs	r2, #2
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	4826      	ldr	r0, [pc, #152]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002572:	f7ff fdda 	bl	800212a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(SDA_Port, SDA_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8002576:	2201      	movs	r2, #1
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <MPU6050_peripheral_config+0xf4>)
 800257c:	f7ff fdbd 	bl	80020fa <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(SDA_Port, SDA_Pin, LL_GPIO_PULL_UP);
 8002580:	2201      	movs	r2, #1
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	4821      	ldr	r0, [pc, #132]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002586:	f7ff fdff 	bl	8002188 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(SDA_Port, SDA_Pin, LL_GPIO_MODE_ALTERNATE);
 800258a:	2202      	movs	r2, #2
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	481f      	ldr	r0, [pc, #124]	; (800260c <MPU6050_peripheral_config+0xf4>)
 8002590:	f7ff fd84 	bl	800209c <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(SDA_Port, SDA_Pin, LL_GPIO_AF_4);
 8002594:	2204      	movs	r2, #4
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <MPU6050_peripheral_config+0xf4>)
 800259a:	f7ff fe24 	bl	80021e6 <LL_GPIO_SetAFPin_0_7>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 80025a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MPU6050_peripheral_config+0xf0>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]


    hi2c1.Instance = I2C1;
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <MPU6050_peripheral_config+0xfc>)
 80025be:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025c2:	4a15      	ldr	r2, [pc, #84]	; (8002618 <MPU6050_peripheral_config+0x100>)
 80025c4:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d8:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <MPU6050_peripheral_config+0xf8>)
 80025f4:	f002 fa04 	bl	8004a00 <HAL_I2C_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d000      	beq.n	8002600 <MPU6050_peripheral_config+0xe8>
    {
      while(1);
 80025fe:	e7fe      	b.n	80025fe <MPU6050_peripheral_config+0xe6>
    }

}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400
 8002610:	20000390 	.word	0x20000390
 8002614:	40005400 	.word	0x40005400
 8002618:	000186a0 	.word	0x000186a0

0800261c <MPU6050_Init>:
 * Initializes and configures the MPU6050 sensor.
 * Performs self-test if it is enabled.
 *
 * */
uint8_t MPU6050_Init(uint8_t accel_config, uint8_t gyro_config, uint8_t sample_rate)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	460b      	mov	r3, r1
 8002628:	71bb      	strb	r3, [r7, #6]
 800262a:	4613      	mov	r3, r2
 800262c:	717b      	strb	r3, [r7, #5]
	  uint8_t check;
	  uint8_t reg_trx[2];

	  // check device ID WHO_AM_I register//
	  i2c_MPU6050_read_reg(WHO_AM_I_REG, &check, 1);
 800262e:	f107 030f 	add.w	r3, r7, #15
 8002632:	2201      	movs	r2, #1
 8002634:	4619      	mov	r1, r3
 8002636:	2075      	movs	r0, #117	; 0x75
 8002638:	f7ff fe20 	bl	800227c <i2c_MPU6050_read_reg>

	  if (check == MPU6050_DEVICE_ID)  // 0x68 will be returned by the sensor if everything goes well //
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b68      	cmp	r3, #104	; 0x68
 8002640:	d14c      	bne.n	80026dc <MPU6050_Init+0xc0>
	  {
	    // power management register 0X6B we should write all 0's to wake the sensor up //
	    reg_trx[0] = PWR_MGMT_1_REG;
 8002642:	236b      	movs	r3, #107	; 0x6b
 8002644:	733b      	strb	r3, [r7, #12]
	    reg_trx[1] = PWR_WAKE_UP;
 8002646:	2300      	movs	r3, #0
 8002648:	737b      	strb	r3, [r7, #13]
	    i2c_MPU6050_write_reg(reg_trx, 2);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	2102      	movs	r1, #2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fdf7 	bl	8002244 <i2c_MPU6050_write_reg>

	    // Set the power mode //
	    mpu6050_config.power_mode = MPU6050_POWER_ON;
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <MPU6050_Init+0xcc>)
 8002658:	2204      	movs	r2, #4
 800265a:	721a      	strb	r2, [r3, #8]

	    // Set Sample Rate by writing SMPLRT_DIV register //
	    reg_trx[0] = SMPLRT_DIV_REG;
 800265c:	2319      	movs	r3, #25
 800265e:	733b      	strb	r3, [r7, #12]
	    reg_trx[1] = sample_rate;
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	737b      	strb	r3, [r7, #13]
	    i2c_MPU6050_write_reg(reg_trx, 2);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	2102      	movs	r1, #2
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fdea 	bl	8002244 <i2c_MPU6050_write_reg>
        return MPU6050_FAILURE;
      #endif

    // Set accelerometer configuration in ACCEL_CONFIG Register //
    // XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> � 2g //
    reg_trx[0] = ACCEL_CONFIG_REG;
 8002670:	231c      	movs	r3, #28
 8002672:	733b      	strb	r3, [r7, #12]
    reg_trx[1] = accel_sensitiviy_config(accel_config);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe1c 	bl	80022b4 <accel_sensitiviy_config>
 800267c:	4603      	mov	r3, r0
 800267e:	737b      	strb	r3, [r7, #13]
    i2c_MPU6050_write_reg(reg_trx, 2);
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2102      	movs	r1, #2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fddc 	bl	8002244 <i2c_MPU6050_write_reg>

    #ifdef DEBUG_MPU6050
      printf("Config accel is %f and reg val is %x\n", mpu6050_config.accel_sensitivity, reg_trx[1]);
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MPU6050_Init+0xcc>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff61 	bl	8000558 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	7b79      	ldrb	r1, [r7, #13]
 800269c:	9100      	str	r1, [sp, #0]
 800269e:	4813      	ldr	r0, [pc, #76]	; (80026ec <MPU6050_Init+0xd0>)
 80026a0:	f00b fd44 	bl	800e12c <iprintf>
    #endif

    // Set Gyro configuration in GYRO_CONFIG Register //
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s //
    reg_trx[0] = GYRO_CONFIG_REG;
 80026a4:	231b      	movs	r3, #27
 80026a6:	733b      	strb	r3, [r7, #12]
    reg_trx[1] = gyro_sensitiviy_config(gyro_config);
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fe42 	bl	8002334 <gyro_sensitiviy_config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	737b      	strb	r3, [r7, #13]
    i2c_MPU6050_write_reg(reg_trx, 2);
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fdc2 	bl	8002244 <i2c_MPU6050_write_reg>

    printf("Config gyro is %f and reg val is %x\n", mpu6050_config.gyro_sensitivity, reg_trx[1]);
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MPU6050_Init+0xcc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff47 	bl	8000558 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	7b79      	ldrb	r1, [r7, #13]
 80026d0:	9100      	str	r1, [sp, #0]
 80026d2:	4807      	ldr	r0, [pc, #28]	; (80026f0 <MPU6050_Init+0xd4>)
 80026d4:	f00b fd2a 	bl	800e12c <iprintf>

    return MPU6050_SUCCESS;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <MPU6050_Init+0xc2>
  }
  return MPU6050_FAILURE;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000384 	.word	0x20000384
 80026ec:	08011200 	.word	0x08011200
 80026f0:	08011228 	.word	0x08011228
 80026f4:	00000000 	.word	0x00000000

080026f8 <MPU6050_Read_All>:
 * and converts them into their unit of measurement.
 * The values are stored in the DataStruct corresponding fields.
 *
 * */
void MPU6050_Read_All(MPU6050_t *DataStruct)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b090      	sub	sp, #64	; 0x40
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  uint8_t Rx_Data[14];
  uint16_t temp;

  // Read 14 BYTES of data starting from ACCEL_XOUT_H register //
  i2c_MPU6050_read_reg(ACCEL_XOUT_H_REG, Rx_Data, 14);
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	220e      	movs	r2, #14
 8002708:	4619      	mov	r1, r3
 800270a:	203b      	movs	r0, #59	; 0x3b
 800270c:	f7ff fdb6 	bl	800227c <i2c_MPU6050_read_reg>

  DataStruct->Accel_X_RAW = (uint16_t) (Rx_Data[0] << 8 | Rx_Data[1]);
 8002710:	7a3b      	ldrb	r3, [r7, #8]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21a      	sxth	r2, r3
 8002716:	7a7b      	ldrb	r3, [r7, #9]
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21a      	sxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	801a      	strh	r2, [r3, #0]
  DataStruct->Accel_Y_RAW = (uint16_t) (Rx_Data[2] << 8 | Rx_Data[3]);
 8002722:	7abb      	ldrb	r3, [r7, #10]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	b21a      	sxth	r2, r3
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21a      	sxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	805a      	strh	r2, [r3, #2]
  DataStruct->Accel_Z_RAW = (uint16_t) (Rx_Data[4] << 8 | Rx_Data[5]);
 8002734:	7b3b      	ldrb	r3, [r7, #12]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b21a      	sxth	r2, r3
 800273a:	7b7b      	ldrb	r3, [r7, #13]
 800273c:	b21b      	sxth	r3, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	b21a      	sxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	809a      	strh	r2, [r3, #4]

  DataStruct->Gyro_X_RAW = (uint16_t) (Rx_Data[8] << 8 | Rx_Data[9]);
 8002746:	7c3b      	ldrb	r3, [r7, #16]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	b21a      	sxth	r2, r3
 800274c:	7c7b      	ldrb	r3, [r7, #17]
 800274e:	b21b      	sxth	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b21a      	sxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  DataStruct->Gyro_Y_RAW = (uint16_t) (Rx_Data[10] << 8 | Rx_Data[11]);
 800275a:	7cbb      	ldrb	r3, [r7, #18]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	b21b      	sxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b21a      	sxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  DataStruct->Gyro_Z_RAW = (uint16_t) (Rx_Data[12] << 8 | Rx_Data[13]);
 800276e:	7d3b      	ldrb	r3, [r7, #20]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	7d7b      	ldrb	r3, [r7, #21]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b21a      	sxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  DataStruct->Gx = DataStruct->Gyro_X_RAW / (mpu6050_config.gyro_sensitivity);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002790:	4ba7      	ldr	r3, [pc, #668]	; (8002a30 <MPU6050_Read_All+0x338>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800279a:	ee16 0a90 	vmov	r0, s13
 800279e:	f7fd fedb 	bl	8000558 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  DataStruct->Gy = DataStruct->Gyro_Y_RAW / (mpu6050_config.gyro_sensitivity);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ba:	4b9d      	ldr	r3, [pc, #628]	; (8002a30 <MPU6050_Read_All+0x338>)
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027c4:	ee16 0a90 	vmov	r0, s13
 80027c8:	f7fd fec6 	bl	8000558 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  DataStruct->Gz = DataStruct->Gyro_Z_RAW / (mpu6050_config.gyro_sensitivity);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e4:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <MPU6050_Read_All+0x338>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027ee:	ee16 0a90 	vmov	r0, s13
 80027f2:	f7fd feb1 	bl	8000558 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

  DataStruct->Ax = DataStruct->Accel_X_RAW / (mpu6050_config.accel_sensitivity);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <MPU6050_Read_All+0x338>)
 8002810:	edd3 7a01 	vldr	s15, [r3, #4]
 8002814:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002818:	ee16 0a90 	vmov	r0, s13
 800281c:	f7fd fe9c 	bl	8000558 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	e9c1 2302 	strd	r2, r3, [r1, #8]
  DataStruct->Ay = DataStruct->Accel_Y_RAW / (mpu6050_config.accel_sensitivity);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <MPU6050_Read_All+0x338>)
 800283a:	edd3 7a01 	vldr	s15, [r3, #4]
 800283e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002842:	ee16 0a90 	vmov	r0, s13
 8002846:	f7fd fe87 	bl	8000558 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	e9c1 2304 	strd	r2, r3, [r1, #16]
  DataStruct->Az = DataStruct->Accel_Z_RAW / (mpu6050_config.accel_sensitivity);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <MPU6050_Read_All+0x338>)
 8002864:	edd3 7a01 	vldr	s15, [r3, #4]
 8002868:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800286c:	ee16 0a90 	vmov	r0, s13
 8002870:	f7fd fe72 	bl	8000558 <__aeabi_f2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	e9c1 2306 	strd	r2, r3, [r1, #24]

  temp = (uint16_t) (Rx_Data[6] << 8 | Rx_Data[7]);
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b21a      	sxth	r2, r3
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	86fb      	strh	r3, [r7, #54]	; 0x36
  DataStruct->Temperature = (float) ((uint16_t) temp / (float) 340.0 + (float) 36.53);
 800288e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002898:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002a34 <MPU6050_Read_All+0x33c>
 800289c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a38 <MPU6050_Read_All+0x340>
 80028a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  // Kalman angle solve
  double dt = (double) (HAL_GetTick() - timer) / 1000;
 80028ae:	f001 f9a1 	bl	8003bf4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <MPU6050_Read_All+0x344>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe2a 	bl	8000514 <__aeabi_ui2d>
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <MPU6050_Read_All+0x348>)
 80028c6:	f7fd ffc9 	bl	800085c <__aeabi_ddiv>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  timer = HAL_GetTick();
 80028d2:	f001 f98f 	bl	8003bf4 <HAL_GetTick>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <MPU6050_Read_All+0x344>)
 80028da:	6013      	str	r3, [r2, #0]
  double roll;
  double roll_sqrt = sqrt(
	  DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ea:	fb03 f202 	mul.w	r2, r3, r2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028f4:	4619      	mov	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
  double roll_sqrt = sqrt(
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe16 	bl	8000534 <__aeabi_i2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	ec43 2b10 	vmov	d0, r2, r3
 8002910:	f00e f8fc 	bl	8010b0c <sqrt>
 8002914:	ed87 0b08 	vstr	d0, [r7, #32]
  if (roll_sqrt != 0.0) {
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002924:	f7fe f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11f      	bne.n	800296e <MPU6050_Read_All+0x276>
      roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fdfd 	bl	8000534 <__aeabi_i2d>
 800293a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800293e:	f7fd ff8d 	bl	800085c <__aeabi_ddiv>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	ec43 2b17 	vmov	d7, r2, r3
 800294a:	eeb0 0a47 	vmov.f32	s0, s14
 800294e:	eef0 0a67 	vmov.f32	s1, s15
 8002952:	f00d fef1 	bl	8010738 <atan>
 8002956:	ec51 0b10 	vmov	r0, r1, d0
 800295a:	a333      	add	r3, pc, #204	; (adr r3, 8002a28 <MPU6050_Read_All+0x330>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fe52 	bl	8000608 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800296c:	e005      	b.n	800297a <MPU6050_Read_All+0x282>
  } else {
      roll = 0.0;
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }
  double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	425b      	negs	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdd6 	bl	8000534 <__aeabi_i2d>
 8002988:	4682      	mov	sl, r0
 800298a:	468b      	mov	fp, r1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdce 	bl	8000534 <__aeabi_i2d>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	ec43 2b11 	vmov	d1, r2, r3
 80029a0:	ec4b ab10 	vmov	d0, sl, fp
 80029a4:	f00e f871 	bl	8010a8a <atan2>
 80029a8:	ec51 0b10 	vmov	r0, r1, d0
 80029ac:	a31e      	add	r3, pc, #120	; (adr r3, 8002a28 <MPU6050_Read_All+0x330>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe29 	bl	8000608 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <MPU6050_Read_All+0x34c>)
 80029c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029c8:	f7fe f890 	bl	8000aec <__aeabi_dcmplt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <MPU6050_Read_All+0x2f0>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MPU6050_Read_All+0x350>)
 80029de:	f7fe f8a3 	bl	8000b28 <__aeabi_dcmpgt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d114      	bne.n	8002a12 <MPU6050_Read_All+0x31a>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <MPU6050_Read_All+0x350>)
 80029ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029f2:	f7fe f899 	bl	8000b28 <__aeabi_dcmpgt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d029      	beq.n	8002a50 <MPU6050_Read_All+0x358>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MPU6050_Read_All+0x34c>)
 8002a08:	f7fe f870 	bl	8000aec <__aeabi_dcmplt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01e      	beq.n	8002a50 <MPU6050_Read_All+0x358>
      KalmanY.angle = pitch;
 8002a12:	490e      	ldr	r1, [pc, #56]	; (8002a4c <MPU6050_Read_All+0x354>)
 8002a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a18:	e9c1 2306 	strd	r2, r3, [r1, #24]
      DataStruct->KalmanAngleY = pitch;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a22:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8002a26:	e028      	b.n	8002a7a <MPU6050_Read_All+0x382>
 8002a28:	1a63c1f8 	.word	0x1a63c1f8
 8002a2c:	404ca5dc 	.word	0x404ca5dc
 8002a30:	20000384 	.word	0x20000384
 8002a34:	43aa0000 	.word	0x43aa0000
 8002a38:	42121eb8 	.word	0x42121eb8
 8002a3c:	20000380 	.word	0x20000380
 8002a40:	408f4000 	.word	0x408f4000
 8002a44:	c0568000 	.word	0xc0568000
 8002a48:	40568000 	.word	0x40568000
 8002a4c:	20000048 	.word	0x20000048
  } else {
      DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8002a56:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002a5a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a5e:	eef0 1a67 	vmov.f32	s3, s15
 8002a62:	ed97 0b06 	vldr	d0, [r7, #24]
 8002a66:	481e      	ldr	r0, [pc, #120]	; (8002ae0 <MPU6050_Read_All+0x3e8>)
 8002a68:	f000 f840 	bl	8002aec <Kalman_getAngle>
 8002a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a70:	eef0 7a60 	vmov.f32	s15, s1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
  }
  if (fabs(DataStruct->KalmanAngleY) > 90)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8002a80:	4690      	mov	r8, r2
 8002a82:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <MPU6050_Read_All+0x3ec>)
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4649      	mov	r1, r9
 8002a90:	f7fe f84a 	bl	8000b28 <__aeabi_dcmpgt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <MPU6050_Read_All+0x3b4>
      DataStruct->Gx = -DataStruct->Gx;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	e9c3 451c 	strd	r4, r5, [r3, #112]	; 0x70

  DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8002ab2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002ab6:	eeb0 1a47 	vmov.f32	s2, s14
 8002aba:	eef0 1a67 	vmov.f32	s3, s15
 8002abe:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <MPU6050_Read_All+0x3f0>)
 8002ac4:	f000 f812 	bl	8002aec <Kalman_getAngle>
 8002ac8:	eeb0 7a40 	vmov.f32	s14, s0
 8002acc:	eef0 7a60 	vmov.f32	s15, s1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8

}
 8002ad6:	bf00      	nop
 8002ad8:	3740      	adds	r7, #64	; 0x40
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae0:	20000048 	.word	0x20000048
 8002ae4:	40568000 	.word	0x40568000
 8002ae8:	20000000 	.word	0x20000000

08002aec <Kalman_getAngle>:
 *
 * Function that given the input arguments it calculates a Kalman angle.
 *
 * */
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b096      	sub	sp, #88	; 0x58
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	61f8      	str	r0, [r7, #28]
 8002af4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002af8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002afc:	ed87 2b00 	vstr	d2, [r7]
  double rate = newRate - Kalman->bias;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b0a:	f7fd fbc5 	bl	8000298 <__aeabi_dsub>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  Kalman->angle += dt * rate;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b24:	f7fd fd70 	bl	8000608 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd fbb4 	bl	800029c <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	69f9      	ldr	r1, [r7, #28]
 8002b3a:	e9c1 2306 	strd	r2, r3, [r1, #24]

  Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b4e:	f7fd fd5b 	bl	8000608 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b60:	f7fd fb9a 	bl	8000298 <__aeabi_dsub>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b72:	f7fd fb91 	bl	8000298 <__aeabi_dsub>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fb8a 	bl	800029c <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b94:	f7fd fd38 	bl	8000608 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f7fd fb7c 	bl	800029c <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	69f9      	ldr	r1, [r7, #28]
 8002baa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bbe:	f7fd fd23 	bl	8000608 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fb65 	bl	8000298 <__aeabi_dsub>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	69f9      	ldr	r1, [r7, #28]
 8002bd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be8:	f7fd fd0e 	bl	8000608 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb50 	bl	8000298 <__aeabi_dsub>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c12:	f7fd fcf9 	bl	8000608 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb3d 	bl	800029c <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	69f9      	ldr	r1, [r7, #28]
 8002c28:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  double S = Kalman->P[0][0] + Kalman->R_measure;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c38:	f7fd fb30 	bl	800029c <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  double K[2];
  K[0] = Kalman->P[0][0] / S;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c4e:	f7fd fe05 	bl	800085c <__aeabi_ddiv>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	e9c7 2308 	strd	r2, r3, [r7, #32]
  K[1] = Kalman->P[1][0] / S;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c64:	f7fd fdfa 	bl	800085c <__aeabi_ddiv>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  double y = newAngle - Kalman->angle;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c7a:	f7fd fb0d 	bl	8000298 <__aeabi_dsub>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  Kalman->angle += K[0] * y;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c94:	f7fd fcb8 	bl	8000608 <__aeabi_dmul>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f7fd fafc 	bl	800029c <__adddf3>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	69f9      	ldr	r1, [r7, #28]
 8002caa:	e9c1 2306 	strd	r2, r3, [r1, #24]
  Kalman->bias += K[1] * y;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002cb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cbc:	f7fd fca4 	bl	8000608 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd fae8 	bl	800029c <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	69f9      	ldr	r1, [r7, #28]
 8002cd2:	e9c1 2308 	strd	r2, r3, [r1, #32]

  double P00_temp = Kalman->P[0][0];
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002cdc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  double P01_temp = Kalman->P[0][1];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ce6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  Kalman->P[0][0] -= K[0] * P00_temp;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002cf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cf8:	f7fd fc86 	bl	8000608 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd fac8 	bl	8000298 <__aeabi_dsub>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	69f9      	ldr	r1, [r7, #28]
 8002d0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  Kalman->P[0][1] -= K[0] * P01_temp;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002d18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d20:	f7fd fc72 	bl	8000608 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd fab4 	bl	8000298 <__aeabi_dsub>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	69f9      	ldr	r1, [r7, #28]
 8002d36:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  Kalman->P[1][0] -= K[1] * P00_temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002d40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d48:	f7fd fc5e 	bl	8000608 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4620      	mov	r0, r4
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7fd faa0 	bl	8000298 <__aeabi_dsub>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	69f9      	ldr	r1, [r7, #28]
 8002d5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  Kalman->P[1][1] -= K[1] * P01_temp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002d68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d70:	f7fd fc4a 	bl	8000608 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd fa8c 	bl	8000298 <__aeabi_dsub>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	69f9      	ldr	r1, [r7, #28]
 8002d86:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  return Kalman->angle;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d90:	ec43 2b17 	vmov	d7, r2, r3
};
 8002d94:	eeb0 0a47 	vmov.f32	s0, s14
 8002d98:	eef0 0a67 	vmov.f32	s1, s15
 8002d9c:	3758      	adds	r7, #88	; 0x58
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bdb0      	pop	{r4, r5, r7, pc}

08002da2 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]

}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dbc:	b0ce      	sub	sp, #312	; 0x138
 8002dbe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc0:	f000 feb2 	bl	8003b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc4:	f000 f97c 	bl	80030c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc8:	f000 fae2 	bl	8003390 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dcc:	f000 fac0 	bl	8003350 <MX_DMA_Init>
  MX_I2C1_Init();
 8002dd0:	f000 f9de 	bl	8003190 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002dd4:	f000 fa0a 	bl	80031ec <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002dd8:	f000 fa90 	bl	80032fc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002ddc:	f009 ffe6 	bl	800cdac <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002de0:	f000 fa32 	bl	8003248 <MX_SPI1_Init>
  MX_TIM11_Init();
 8002de4:	f000 fa66 	bl	80032b4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	Ra02 = newLoRa();
 8002de8:	4c9d      	ldr	r4, [pc, #628]	; (8003060 <main+0x2a8>)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fdff 	bl	80019f0 <newLoRa>
 8002df2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002df6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ra02.CS_port = LORA_NSS_GPIO_Port;
 8002e0c:	4b94      	ldr	r3, [pc, #592]	; (8003060 <main+0x2a8>)
 8002e0e:	4a95      	ldr	r2, [pc, #596]	; (8003064 <main+0x2ac>)
 8002e10:	601a      	str	r2, [r3, #0]
	Ra02.CS_pin = LORA_NSS_Pin;
 8002e12:	4b93      	ldr	r3, [pc, #588]	; (8003060 <main+0x2a8>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	809a      	strh	r2, [r3, #4]
	Ra02.DIO0_port = LORA_DIO0_GPIO_Port;
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <main+0x2a8>)
 8002e1a:	4a92      	ldr	r2, [pc, #584]	; (8003064 <main+0x2ac>)
 8002e1c:	611a      	str	r2, [r3, #16]
	Ra02.DIO0_pin = LORA_DIO0_Pin;
 8002e1e:	4b90      	ldr	r3, [pc, #576]	; (8003060 <main+0x2a8>)
 8002e20:	2210      	movs	r2, #16
 8002e22:	829a      	strh	r2, [r3, #20]
	Ra02.hSPIx = &hspi1;
 8002e24:	4b8e      	ldr	r3, [pc, #568]	; (8003060 <main+0x2a8>)
 8002e26:	4a90      	ldr	r2, [pc, #576]	; (8003068 <main+0x2b0>)
 8002e28:	619a      	str	r2, [r3, #24]
	Ra02.bandWidth = BW_500KHz;
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <main+0x2a8>)
 8002e2c:	2209      	movs	r2, #9
 8002e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Ra02.overCurrentProtection = 130;
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <main+0x2a8>)
 8002e34:	2282      	movs	r2, #130	; 0x82
 8002e36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	status = LoRa_init(&Ra02);
 8002e3a:	4889      	ldr	r0, [pc, #548]	; (8003060 <main+0x2a8>)
 8002e3c:	f7ff f88a 	bl	8001f54 <LoRa_init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b89      	ldr	r3, [pc, #548]	; (800306c <main+0x2b4>)
 8002e46:	801a      	strh	r2, [r3, #0]
	if (status == LORA_OK) {
 8002e48:	4b88      	ldr	r3, [pc, #544]	; (800306c <main+0x2b4>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e4e:	d102      	bne.n	8002e56 <main+0x9e>
		LoRa_status = 1;
 8002e50:	4b87      	ldr	r3, [pc, #540]	; (8003070 <main+0x2b8>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	801a      	strh	r2, [r3, #0]

	}

	bmp280_uhr_all_init(&bmp280.parameters);
 8002e56:	4887      	ldr	r0, [pc, #540]	; (8003074 <main+0x2bc>)
 8002e58:	f7fe f8d0 	bl	8000ffc <bmp280_uhr_all_init>
	bmp280.address = BMP280_I2C_ADDRESS;
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <main+0x2c0>)
 8002e5e:	2277      	movs	r2, #119	; 0x77
 8002e60:	835a      	strh	r2, [r3, #26]
	bmp280.i2c = &hi2c2;
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <main+0x2c0>)
 8002e64:	4a85      	ldr	r2, [pc, #532]	; (800307c <main+0x2c4>)
 8002e66:	61da      	str	r2, [r3, #28]

	while (!bmp280_init(&bmp280, &bmp280.parameters)) {
 8002e68:	e02f      	b.n	8002eca <main+0x112>
		Baro_STR_Size = sprintf((char*) Baro_Data,
 8002e6a:	4985      	ldr	r1, [pc, #532]	; (8003080 <main+0x2c8>)
 8002e6c:	4885      	ldr	r0, [pc, #532]	; (8003084 <main+0x2cc>)
 8002e6e:	f00b f9eb 	bl	800e248 <siprintf>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b84      	ldr	r3, [pc, #528]	; (8003088 <main+0x2d0>)
 8002e78:	701a      	strb	r2, [r3, #0]
				"BMP280 initialization failed\n");
		CDC_Transmit_FS((uint8_t*) Baro_Data, Baro_STR_Size);
 8002e7a:	4b83      	ldr	r3, [pc, #524]	; (8003088 <main+0x2d0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4880      	ldr	r0, [pc, #512]	; (8003084 <main+0x2cc>)
 8002e82:	f00a f865 	bl	800cf50 <CDC_Transmit_FS>
		for (BARO_ERROR_LED = 0; BARO_ERROR_LED <= 3; BARO_ERROR_LED++) {
 8002e86:	4b81      	ldr	r3, [pc, #516]	; (800308c <main+0x2d4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e00f      	b.n	8002eae <main+0xf6>
			HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_SET);
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e94:	487e      	ldr	r0, [pc, #504]	; (8003090 <main+0x2d8>)
 8002e96:	f001 fd75 	bl	8004984 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8002e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e9e:	f000 feb5 	bl	8003c0c <HAL_Delay>
		for (BARO_ERROR_LED = 0; BARO_ERROR_LED <= 3; BARO_ERROR_LED++) {
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	; (800308c <main+0x2d4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b78      	ldr	r3, [pc, #480]	; (800308c <main+0x2d4>)
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <main+0x2d4>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d9eb      	bls.n	8002e8e <main+0xd6>
		}
		HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ebc:	4874      	ldr	r0, [pc, #464]	; (8003090 <main+0x2d8>)
 8002ebe:	f001 fd61 	bl	8004984 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002ec2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ec6:	f000 fea1 	bl	8003c0c <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.parameters)) {
 8002eca:	496a      	ldr	r1, [pc, #424]	; (8003074 <main+0x2bc>)
 8002ecc:	486a      	ldr	r0, [pc, #424]	; (8003078 <main+0x2c0>)
 8002ece:	f7fe f9ac 	bl	800122a <bmp280_init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1c5      	bne.n	8002e6a <main+0xb2>
	}

	DWT->CYCCNT = 0;
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <main+0x2dc>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	605a      	str	r2, [r3, #4]
	MPU6050_t MPU6050;
	MPU6050_peripheral_config();
 8002ee4:	f7ff fb18 	bl	8002518 <MPU6050_peripheral_config>
	uint8_t check = MPU6050_Init(MPU6050_Accelerometer_2G,
 8002ee8:	2201      	movs	r2, #1
 8002eea:	2100      	movs	r1, #0
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fb95 	bl	800261c <MPU6050_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			MPU6050_Gyroscope_250_deg, MPU6050_DataRate_4KHz);
	if (check == MPU6050_SUCCESS) {
 8002ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <main+0x14e>
		printf("MPU6050 Initilalization Success\n");
 8002f00:	4865      	ldr	r0, [pc, #404]	; (8003098 <main+0x2e0>)
 8002f02:	f00b f999 	bl	800e238 <puts>
	}
	MPU6050_set_power_mode(MPU6050_POWER_ON, MPU6050_rate_dont_care);
 8002f06:	2104      	movs	r1, #4
 8002f08:	2004      	movs	r0, #4
 8002f0a:	f7ff fa57 	bl	80023bc <MPU6050_set_power_mode>
	MPU6050_enable_irq(LATCH_IRQ_EN | IRQ_RD_CLEAR);
 8002f0e:	2030      	movs	r0, #48	; 0x30
 8002f10:	f7ff fad8 	bl	80024c4 <MPU6050_enable_irq>

	uint32_t timerACC = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	uint32_t timerGYR = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t timerCOM = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MPU6050_Read_All(&MPU6050);
 8002f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fbe4 	bl	80026f8 <MPU6050_Read_All>
		while (!bmp280_read(&bmp280, &temperature, &pressure)) {
 8002f30:	e011      	b.n	8002f56 <main+0x19e>
			Baro_STR_Size = sprintf((char*) Baro_Data,
 8002f32:	495a      	ldr	r1, [pc, #360]	; (800309c <main+0x2e4>)
 8002f34:	4853      	ldr	r0, [pc, #332]	; (8003084 <main+0x2cc>)
 8002f36:	f00b f987 	bl	800e248 <siprintf>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b52      	ldr	r3, [pc, #328]	; (8003088 <main+0x2d0>)
 8002f40:	701a      	strb	r2, [r3, #0]
					"Temperature/pressure reading failed\n");
			CDC_Transmit_FS((uint8_t*) Baro_Data, Baro_STR_Size);
 8002f42:	4b51      	ldr	r3, [pc, #324]	; (8003088 <main+0x2d0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	484e      	ldr	r0, [pc, #312]	; (8003084 <main+0x2cc>)
 8002f4a:	f00a f801 	bl	800cf50 <CDC_Transmit_FS>
			HAL_Delay(2000);
 8002f4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f52:	f000 fe5b 	bl	8003c0c <HAL_Delay>
		while (!bmp280_read(&bmp280, &temperature, &pressure)) {
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <main+0x2e8>)
 8002f58:	4952      	ldr	r1, [pc, #328]	; (80030a4 <main+0x2ec>)
 8002f5a:	4847      	ldr	r0, [pc, #284]	; (8003078 <main+0x2c0>)
 8002f5c:	f7fe fd14 	bl	8001988 <bmp280_read>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e2      	bne.n	8002f32 <main+0x17a>
		}
		altitude = -log(pressure / PRESSURE_SEA_PA)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <main+0x2e8>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80030a8 <main+0x2f0>
 8002f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f7a:	ee16 0a90 	vmov	r0, s13
 8002f7e:	f7fd faeb 	bl	8000558 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	ec43 2b10 	vmov	d0, r2, r3
 8002f8a:	f00d fd81 	bl	8010a90 <log>
 8002f8e:	ec53 2b10 	vmov	r2, r3, d0
 8002f92:	4690      	mov	r8, r2
 8002f94:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
				* (((UNI_GAS_CONST_NMP_MOLK * (273.15 + temperature))
 8002f98:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <main+0x2ec>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fadb 	bl	8000558 <__aeabi_f2d>
 8002fa2:	a329      	add	r3, pc, #164	; (adr r3, 8003048 <main+0x290>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd f978 	bl	800029c <__adddf3>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	a326      	add	r3, pc, #152	; (adr r3, 8003050 <main+0x298>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f7fd fb25 	bl	8000608 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
						/ (G_MPS2 * MOLAR_MASS_AIR_KG_MOL)));
 8002fc6:	a324      	add	r3, pc, #144	; (adr r3, 8003058 <main+0x2a0>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fc46 	bl	800085c <__aeabi_ddiv>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
				* (((UNI_GAS_CONST_NMP_MOLK * (273.15 + temperature))
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f7fd fb16 	bl	8000608 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fde8 	bl	8000bb8 <__aeabi_d2f>
 8002fe8:	4603      	mov	r3, r0
		altitude = -log(pressure / PRESSURE_SEA_PA)
 8002fea:	4a30      	ldr	r2, [pc, #192]	; (80030ac <main+0x2f4>)
 8002fec:	6013      	str	r3, [r2, #0]

		UART_STR_Size = sprintf(UART_Data,
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <main+0x2f4>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <main+0x2ec>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003002:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003006:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800300a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800300e:	e9cd 2300 	strd	r2, r3, [sp]
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	ee17 2a10 	vmov	r2, s14
 800301a:	4925      	ldr	r1, [pc, #148]	; (80030b0 <main+0x2f8>)
 800301c:	4825      	ldr	r0, [pc, #148]	; (80030b4 <main+0x2fc>)
 800301e:	f00b f913 	bl	800e248 <siprintf>
 8003022:	4603      	mov	r3, r0
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <main+0x300>)
 8003028:	701a      	strb	r2, [r3, #0]
				"ALT(m):%d,TMP(C):%d,PTH:%.2f,ROL:%.2f\r\n",
				(int) altitude, (int) temperature, MPU6050.KalmanAngleY,
				MPU6050.KalmanAngleX);
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) UART_Data, UART_STR_Size);
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <main+0x300>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	4920      	ldr	r1, [pc, #128]	; (80030b4 <main+0x2fc>)
 8003034:	4821      	ldr	r0, [pc, #132]	; (80030bc <main+0x304>)
 8003036:	f005 fa91 	bl	800855c <HAL_UART_Transmit_DMA>

		LoRa_transmit(&Ra02, (uint8_t*) UART_Data, sizeof(UART_Data),0);
 800303a:	2300      	movs	r3, #0
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	491d      	ldr	r1, [pc, #116]	; (80030b4 <main+0x2fc>)
 8003040:	4807      	ldr	r0, [pc, #28]	; (8003060 <main+0x2a8>)
 8003042:	f7fe ff2f 	bl	8001ea4 <LoRa_transmit>
		MPU6050_Read_All(&MPU6050);
 8003046:	e76e      	b.n	8002f26 <main+0x16e>
 8003048:	66666666 	.word	0x66666666
 800304c:	40711266 	.word	0x40711266
 8003050:	9ba5e354 	.word	0x9ba5e354
 8003054:	4020a0c4 	.word	0x4020a0c4
 8003058:	a8f5c290 	.word	0xa8f5c290
 800305c:	3fd233a8 	.word	0x3fd233a8
 8003060:	2000057c 	.word	0x2000057c
 8003064:	40020000 	.word	0x40020000
 8003068:	20000438 	.word	0x20000438
 800306c:	200005aa 	.word	0x200005aa
 8003070:	200005a8 	.word	0x200005a8
 8003074:	200005cc 	.word	0x200005cc
 8003078:	200005ac 	.word	0x200005ac
 800307c:	200003e4 	.word	0x200003e4
 8003080:	08011250 	.word	0x08011250
 8003084:	200005e0 	.word	0x200005e0
 8003088:	20000620 	.word	0x20000620
 800308c:	20000621 	.word	0x20000621
 8003090:	40020400 	.word	0x40020400
 8003094:	e0001000 	.word	0xe0001000
 8003098:	08011270 	.word	0x08011270
 800309c:	08011290 	.word	0x08011290
 80030a0:	200005d4 	.word	0x200005d4
 80030a4:	200005d8 	.word	0x200005d8
 80030a8:	47c5e680 	.word	0x47c5e680
 80030ac:	200005dc 	.word	0x200005dc
 80030b0:	080112b8 	.word	0x080112b8
 80030b4:	20000624 	.word	0x20000624
 80030b8:	20000664 	.word	0x20000664
 80030bc:	200004d8 	.word	0x200004d8

080030c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b094      	sub	sp, #80	; 0x50
 80030c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c6:	f107 0320 	add.w	r3, r7, #32
 80030ca:	2230      	movs	r2, #48	; 0x30
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00a fbba 	bl	800d848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <SystemClock_Config+0xc8>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <SystemClock_Config+0xc8>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <SystemClock_Config+0xc8>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003100:	2300      	movs	r3, #0
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <SystemClock_Config+0xcc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <SystemClock_Config+0xcc>)
 800310a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <SystemClock_Config+0xcc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800311c:	2301      	movs	r3, #1
 800311e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003126:	2302      	movs	r3, #2
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800312a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003130:	2308      	movs	r3, #8
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003134:	2360      	movs	r3, #96	; 0x60
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003138:	2302      	movs	r3, #2
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800313c:	2304      	movs	r3, #4
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003140:	f107 0320 	add.w	r3, r7, #32
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fe97 	bl	8006e78 <HAL_RCC_OscConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003150:	f000 f9da 	bl	8003508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003154:	230f      	movs	r3, #15
 8003156:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003158:	2302      	movs	r3, #2
 800315a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	2103      	movs	r1, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f004 f8f9 	bl	8007368 <HAL_RCC_ClockConfig>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800317c:	f000 f9c4 	bl	8003508 <Error_Handler>
  }
}
 8003180:	bf00      	nop
 8003182:	3750      	adds	r7, #80	; 0x50
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	40007000 	.word	0x40007000

08003190 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <MX_I2C1_Init+0x50>)
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <MX_I2C1_Init+0x54>)
 8003198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_I2C1_Init+0x50>)
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <MX_I2C1_Init+0x58>)
 800319e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <MX_I2C1_Init+0x50>)
 80031ce:	f001 fc17 	bl	8004a00 <HAL_I2C_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031d8:	f000 f996 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000390 	.word	0x20000390
 80031e4:	40005400 	.word	0x40005400
 80031e8:	000186a0 	.word	0x000186a0

080031ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <MX_I2C2_Init+0x50>)
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <MX_I2C2_Init+0x54>)
 80031f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <MX_I2C2_Init+0x50>)
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <MX_I2C2_Init+0x58>)
 80031fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_I2C2_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <MX_I2C2_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_I2C2_Init+0x50>)
 800320a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800320e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <MX_I2C2_Init+0x50>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_I2C2_Init+0x50>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <MX_I2C2_Init+0x50>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_I2C2_Init+0x50>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <MX_I2C2_Init+0x50>)
 800322a:	f001 fbe9 	bl	8004a00 <HAL_I2C_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003234:	f000 f968 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200003e4 	.word	0x200003e4
 8003240:	40005800 	.word	0x40005800
 8003244:	000186a0 	.word	0x000186a0

08003248 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <MX_SPI1_Init+0x64>)
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <MX_SPI1_Init+0x68>)
 8003250:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_SPI1_Init+0x64>)
 8003254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003258:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <MX_SPI1_Init+0x64>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <MX_SPI1_Init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_SPI1_Init+0x64>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_SPI1_Init+0x64>)
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_SPI1_Init+0x64>)
 8003274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003278:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <MX_SPI1_Init+0x64>)
 800327c:	2218      	movs	r2, #24
 800327e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <MX_SPI1_Init+0x64>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_SPI1_Init+0x64>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <MX_SPI1_Init+0x64>)
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_SPI1_Init+0x64>)
 8003294:	220a      	movs	r2, #10
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003298:	4804      	ldr	r0, [pc, #16]	; (80032ac <MX_SPI1_Init+0x64>)
 800329a:	f004 fa83 	bl	80077a4 <HAL_SPI_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032a4:	f000 f930 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000438 	.word	0x20000438
 80032b0:	40013000 	.word	0x40013000

080032b4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <MX_TIM11_Init+0x44>)
 80032bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032c0:	225f      	movs	r2, #95	; 0x5f
 80032c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_TIM11_Init+0x40>)
 80032e0:	f005 f816 	bl	8008310 <HAL_TIM_Base_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80032ea:	f000 f90d 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000490 	.word	0x20000490
 80032f8:	40014800 	.word	0x40014800

080032fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <MX_USART2_UART_Init+0x50>)
 8003304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800330c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003322:	2208      	movs	r2, #8
 8003324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_USART2_UART_Init+0x4c>)
 8003334:	f005 f8bc 	bl	80084b0 <HAL_HalfDuplex_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800333e:	f000 f8e3 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200004d8 	.word	0x200004d8
 800334c:	40004400 	.word	0x40004400

08003350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_DMA_Init+0x3c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <MX_DMA_Init+0x3c>)
 8003360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_DMA_Init+0x3c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2011      	movs	r0, #17
 8003378:	f000 fd47 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800337c:	2011      	movs	r0, #17
 800337e:	f000 fd60 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a4c      	ldr	r2, [pc, #304]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a45      	ldr	r2, [pc, #276]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <MX_GPIO_Init+0x16c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80033fa:	2201      	movs	r2, #1
 80033fc:	2102      	movs	r1, #2
 80033fe:	4840      	ldr	r0, [pc, #256]	; (8003500 <MX_GPIO_Init+0x170>)
 8003400:	f001 fac0 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_RESET);
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340a:	483e      	ldr	r0, [pc, #248]	; (8003504 <MX_GPIO_Init+0x174>)
 800340c:	f001 faba 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8003410:	2302      	movs	r3, #2
 8003412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	4836      	ldr	r0, [pc, #216]	; (8003500 <MX_GPIO_Init+0x170>)
 8003428:	f001 f928 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_BUTTON_Pin */
  GPIO_InitStruct.Pin = SD_CARD_BUTTON_Pin;
 800342c:	2308      	movs	r3, #8
 800342e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003430:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CARD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4619      	mov	r1, r3
 8003440:	482f      	ldr	r0, [pc, #188]	; (8003500 <MX_GPIO_Init+0x170>)
 8003442:	f001 f91b 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8003446:	2310      	movs	r3, #16
 8003448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800344a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800344e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	4619      	mov	r1, r3
 800345a:	4829      	ldr	r0, [pc, #164]	; (8003500 <MX_GPIO_Init+0x170>)
 800345c:	f001 f90e 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_INT_Pin IMU_INT_Pin */
  GPIO_InitStruct.Pin = BARO_INT_Pin|IMU_INT_Pin;
 8003460:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800346a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	4619      	mov	r1, r3
 8003476:	4823      	ldr	r0, [pc, #140]	; (8003504 <MX_GPIO_Init+0x174>)
 8003478:	f001 f900 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_LED_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin;
 800347c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003482:	2301      	movs	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_LED_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4619      	mov	r1, r3
 8003494:	481b      	ldr	r0, [pc, #108]	; (8003504 <MX_GPIO_Init+0x174>)
 8003496:	f001 f8f1 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin;
 800349a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 030c 	add.w	r3, r7, #12
 80034ac:	4619      	mov	r1, r3
 80034ae:	4815      	ldr	r0, [pc, #84]	; (8003504 <MX_GPIO_Init+0x174>)
 80034b0:	f001 f8e4 	bl	800467c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2007      	movs	r0, #7
 80034ba:	f000 fca6 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80034be:	2007      	movs	r0, #7
 80034c0:	f000 fcbf 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	2009      	movs	r0, #9
 80034ca:	f000 fc9e 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80034ce:	2009      	movs	r0, #9
 80034d0:	f000 fcb7 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	200a      	movs	r0, #10
 80034da:	f000 fc96 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034de:	200a      	movs	r0, #10
 80034e0:	f000 fcaf 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	2017      	movs	r0, #23
 80034ea:	f000 fc8e 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034ee:	2017      	movs	r0, #23
 80034f0:	f000 fca7 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 80034f4:	bf00      	nop
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400

08003508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800350c:	b672      	cpsid	i
}
 800350e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003510:	e7fe      	b.n	8003510 <Error_Handler+0x8>
	...

08003514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_MspInit+0x4c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <HAL_MspInit+0x4c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_MspInit+0x4c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_MspInit+0x4c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_MspInit+0x4c>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_MspInit+0x4c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_I2C_MspInit+0x10c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12c      	bne.n	80035e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_I2C_MspInit+0x110>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_I2C_MspInit+0x110>)
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_I2C_MspInit+0x110>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a2:	23c0      	movs	r3, #192	; 0xc0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a6:	2312      	movs	r3, #18
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035b2:	2304      	movs	r3, #4
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b6:	f107 031c 	add.w	r3, r7, #28
 80035ba:	4619      	mov	r1, r3
 80035bc:	482e      	ldr	r0, [pc, #184]	; (8003678 <HAL_I2C_MspInit+0x114>)
 80035be:	f001 f85d 	bl	800467c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035de:	e042      	b.n	8003666 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <HAL_I2C_MspInit+0x118>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d13d      	bne.n	8003666 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_I2C_MspInit+0x110>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360c:	2312      	movs	r3, #18
 800360e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003614:	2303      	movs	r3, #3
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003618:	2304      	movs	r3, #4
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	4619      	mov	r1, r3
 8003622:	4815      	ldr	r0, [pc, #84]	; (8003678 <HAL_I2C_MspInit+0x114>)
 8003624:	f001 f82a 	bl	800467c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800362e:	2312      	movs	r3, #18
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800363a:	2309      	movs	r3, #9
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	480c      	ldr	r0, [pc, #48]	; (8003678 <HAL_I2C_MspInit+0x114>)
 8003646:	f001 f819 	bl	800467c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_I2C_MspInit+0x110>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_I2C_MspInit+0x110>)
 8003654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_I2C_MspInit+0x110>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	3730      	adds	r7, #48	; 0x30
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40005400 	.word	0x40005400
 8003674:	40023800 	.word	0x40023800
 8003678:	40020400 	.word	0x40020400
 800367c:	40005800 	.word	0x40005800

08003680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_SPI_MspInit+0x84>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12b      	bne.n	80036fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6313      	str	r3, [r2, #48]	; 0x30
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_SPI_MspInit+0x88>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036da:	23e0      	movs	r3, #224	; 0xe0
 80036dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036ea:	2305      	movs	r3, #5
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4619      	mov	r1, r3
 80036f4:	4805      	ldr	r0, [pc, #20]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036f6:	f000 ffc1 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036fa:	bf00      	nop
 80036fc:	3728      	adds	r7, #40	; 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40013000 	.word	0x40013000
 8003708:	40023800 	.word	0x40023800
 800370c:	40020000 	.word	0x40020000

08003710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_TIM_Base_MspInit+0x3c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10d      	bne.n	800373e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_TIM_Base_MspInit+0x40>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_TIM_Base_MspInit+0x40>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_TIM_Base_MspInit+0x40>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40014800 	.word	0x40014800
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a34      	ldr	r2, [pc, #208]	; (8003844 <HAL_UART_MspInit+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d162      	bne.n	800383c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_UART_MspInit+0xf4>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a32      	ldr	r2, [pc, #200]	; (8003848 <HAL_UART_MspInit+0xf4>)
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_UART_MspInit+0xf4>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_UART_MspInit+0xf4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_UART_MspInit+0xf4>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_UART_MspInit+0xf4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ae:	2304      	movs	r3, #4
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b2:	2312      	movs	r3, #18
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037be:	2307      	movs	r3, #7
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4820      	ldr	r0, [pc, #128]	; (800384c <HAL_UART_MspInit+0xf8>)
 80037ca:	f000 ff57 	bl	800467c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_UART_MspInit+0x100>)
 80037d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80037d4:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_UART_MspInit+0xfc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_UART_MspInit+0xfc>)
 8003804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003808:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_UART_MspInit+0xfc>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003810:	480f      	ldr	r0, [pc, #60]	; (8003850 <HAL_UART_MspInit+0xfc>)
 8003812:	f000 fb31 	bl	8003e78 <HAL_DMA_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800381c:	f7ff fe74 	bl	8003508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_UART_MspInit+0xfc>)
 8003824:	635a      	str	r2, [r3, #52]	; 0x34
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <HAL_UART_MspInit+0xfc>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2100      	movs	r1, #0
 8003830:	2026      	movs	r0, #38	; 0x26
 8003832:	f000 faea 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003836:	2026      	movs	r0, #38	; 0x26
 8003838:	f000 fb03 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800383c:	bf00      	nop
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40004400 	.word	0x40004400
 8003848:	40023800 	.word	0x40023800
 800384c:	40020000 	.word	0x40020000
 8003850:	2000051c 	.word	0x2000051c
 8003854:	400260a0 	.word	0x400260a0

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler+0x4>

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a4:	f000 f992 	bl	8003bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}

080038ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BARO_INT_Pin);
 80038b0:	2002      	movs	r0, #2
 80038b2:	f001 f881 	bl	80049b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}

080038ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_CARD_BUTTON_Pin);
 80038be:	2008      	movs	r0, #8
 80038c0:	f001 f87a 	bl	80049b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80038cc:	2010      	movs	r0, #16
 80038ce:	f001 f873 	bl	80049b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA1_Stream6_IRQHandler+0x10>)
 80038de:	f000 fc63 	bl	80041a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000051c 	.word	0x2000051c

080038ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80038f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038f4:	f001 f860 	bl	80049b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <USART2_IRQHandler+0x10>)
 8003902:	f004 fea9 	bl	8008658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200004d8 	.word	0x200004d8

08003910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <OTG_FS_IRQHandler+0x10>)
 8003916:	f002 f982 	bl	8005c1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001b50 	.word	0x20001b50

08003924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return 1;
 8003928:	2301      	movs	r3, #1
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_kill>:

int _kill(int pid, int sig)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800393e:	f009 ff59 	bl	800d7f4 <__errno>
 8003942:	4603      	mov	r3, r0
 8003944:	2216      	movs	r2, #22
 8003946:	601a      	str	r2, [r3, #0]
  return -1;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_exit>:

void _exit (int status)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffe7 	bl	8003934 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003966:	e7fe      	b.n	8003966 <_exit+0x12>

08003968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e00a      	b.n	8003990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800397a:	f3af 8000 	nop.w
 800397e:	4601      	mov	r1, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	b2ca      	uxtb	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	dbf0      	blt.n	800397a <_read+0x12>
  }

  return len;
 8003998:	687b      	ldr	r3, [r7, #4]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e009      	b.n	80039c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	60ba      	str	r2, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dbf1      	blt.n	80039b4 <_write+0x12>
  }
  return len;
 80039d0:	687b      	ldr	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_close>:

int _close(int file)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a02:	605a      	str	r2, [r3, #4]
  return 0;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_isatty>:

int _isatty(int file)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <_sbrk+0x5c>)
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <_sbrk+0x60>)
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <_sbrk+0x64>)
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <_sbrk+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d207      	bcs.n	8003a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a74:	f009 febe 	bl	800d7f4 <__errno>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e009      	b.n	8003a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <_sbrk+0x64>)
 8003a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20020000 	.word	0x20020000
 8003aa4:	00004000 	.word	0x00004000
 8003aa8:	20000668 	.word	0x20000668
 8003aac:	20002290 	.word	0x20002290

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <SystemInit+0x20>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <SystemInit+0x20>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad8:	480d      	ldr	r0, [pc, #52]	; (8003b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ada:	490e      	ldr	r1, [pc, #56]	; (8003b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003af0:	4c0b      	ldr	r4, [pc, #44]	; (8003b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003afe:	f7ff ffd7 	bl	8003ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b02:	f009 fe7d 	bl	800d800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b06:	f7ff f957 	bl	8002db8 <main>
  bx  lr    
 8003b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b14:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8003b18:	080117a8 	.word	0x080117a8
  ldr r2, =_sbss
 8003b1c:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8003b20:	2000228c 	.word	0x2000228c

08003b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC_IRQHandler>
	...

08003b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_Init+0x40>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <HAL_Init+0x40>)
 8003b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_Init+0x40>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_Init+0x40>)
 8003b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_Init+0x40>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_Init+0x40>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b50:	2003      	movs	r0, #3
 8003b52:	f000 f94f 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b56:	200f      	movs	r0, #15
 8003b58:	f000 f808 	bl	8003b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b5c:	f7ff fcda 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00

08003b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_InitTick+0x54>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_InitTick+0x58>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f967 	bl	8003e5e <HAL_SYSTICK_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00e      	b.n	8003bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d80a      	bhi.n	8003bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	f000 f92f 	bl	8003e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bac:	4a06      	ldr	r2, [pc, #24]	; (8003bc8 <HAL_InitTick+0x5c>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000090 	.word	0x20000090
 8003bc4:	20000098 	.word	0x20000098
 8003bc8:	20000094 	.word	0x20000094

08003bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x20>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000098 	.word	0x20000098
 8003bf0:	2000066c 	.word	0x2000066c

08003bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_GetTick+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000066c 	.word	0x2000066c

08003c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff ffee 	bl	8003bf4 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d005      	beq.n	8003c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_Delay+0x44>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c32:	bf00      	nop
 8003c34:	f7ff ffde 	bl	8003bf4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d8f7      	bhi.n	8003c34 <HAL_Delay+0x28>
  {
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000098 	.word	0x20000098

08003c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c70:	4013      	ands	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	60d3      	str	r3, [r2, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	f003 0307 	and.w	r3, r3, #7
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db0b      	blt.n	8003ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <__NVIC_EnableIRQ+0x38>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2001      	movs	r0, #1
 8003cda:	fa00 f202 	lsl.w	r2, r0, r2
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d301      	bcc.n	8003dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00f      	b.n	8003de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <SysTick_Config+0x40>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dce:	210f      	movs	r1, #15
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f7ff ff8e 	bl	8003cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SysTick_Config+0x40>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SysTick_Config+0x40>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff29 	bl	8003c54 <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff ff3e 	bl	8003c9c <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff8e 	bl	8003d48 <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5d 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff31 	bl	8003cb8 <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffa2 	bl	8003db0 <SysTick_Config>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7ff feb6 	bl	8003bf4 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e099      	b.n	8003fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb4:	e00f      	b.n	8003ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb6:	f7ff fe9d 	bl	8003bf4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d908      	bls.n	8003ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e078      	b.n	8003fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e8      	bne.n	8003eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_DMA_Init+0x158>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d117      	bne.n	8003f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb01 	bl	8004584 <DMA_CheckFifoParam>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f96:	2301      	movs	r3, #1
 8003f98:	e016      	b.n	8003fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fab8 	bl	8004518 <DMA_CalcBaseAndBitshift>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	223f      	movs	r2, #63	; 0x3f
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	f010803f 	.word	0xf010803f

08003fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Start_IT+0x26>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e040      	b.n	800407c <HAL_DMA_Start_IT+0xa8>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d12f      	bne.n	800406e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa4a 	bl	80044bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	223f      	movs	r2, #63	; 0x3f
 800402e:	409a      	lsls	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0216 	orr.w	r2, r2, #22
 8004042:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e005      	b.n	800407a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff fdaf 	bl	8003bf4 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d008      	beq.n	80040b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e052      	b.n	800415c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0216 	bic.w	r2, r2, #22
 80040c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_DMA_Abort+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0208 	bic.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	e013      	b.n	8004130 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004108:	f7ff fd74 	bl	8003bf4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b05      	cmp	r3, #5
 8004114:	d90c      	bls.n	8004130 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e015      	b.n	800415c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e4      	bne.n	8004108 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	223f      	movs	r2, #63	; 0x3f
 8004144:	409a      	lsls	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d004      	beq.n	8004182 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e00c      	b.n	800419c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2205      	movs	r2, #5
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041b4:	4b8e      	ldr	r3, [pc, #568]	; (80043f0 <HAL_DMA_IRQHandler+0x248>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a8e      	ldr	r2, [pc, #568]	; (80043f4 <HAL_DMA_IRQHandler+0x24c>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	2208      	movs	r2, #8
 80041d4:	409a      	lsls	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01a      	beq.n	8004214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2208      	movs	r2, #8
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2201      	movs	r2, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2204      	movs	r2, #4
 8004250:	409a      	lsls	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2204      	movs	r2, #4
 800426e:	409a      	lsls	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	2210      	movs	r2, #16
 8004286:	409a      	lsls	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d043      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03c      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	2210      	movs	r2, #16
 80042a4:	409a      	lsls	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d018      	beq.n	80042ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d024      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
 80042d6:	e01f      	b.n	8004318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
 80042e8:	e016      	b.n	8004318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0208 	bic.w	r2, r2, #8
 8004306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	2220      	movs	r2, #32
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808f 	beq.w	8004448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8087 	beq.w	8004448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	2220      	movs	r2, #32
 8004340:	409a      	lsls	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b05      	cmp	r3, #5
 8004350:	d136      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0216 	bic.w	r2, r2, #22
 8004360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <HAL_DMA_IRQHandler+0x1da>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0208 	bic.w	r2, r2, #8
 8004390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	223f      	movs	r2, #63	; 0x3f
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d07e      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
        }
        return;
 80043be:	e079      	b.n	80044b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01d      	beq.n	800440a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d031      	beq.n	8004448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e02c      	b.n	8004448 <HAL_DMA_IRQHandler+0x2a0>
 80043ee:	bf00      	nop
 80043f0:	20000090 	.word	0x20000090
 80043f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d023      	beq.n	8004448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
 8004408:	e01e      	b.n	8004448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10f      	bne.n	8004438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0210 	bic.w	r2, r2, #16
 8004426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	2b00      	cmp	r3, #0
 800444e:	d032      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2205      	movs	r2, #5
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3301      	adds	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	429a      	cmp	r2, r3
 800447e:	d307      	bcc.n	8004490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f2      	bne.n	8004474 <HAL_DMA_IRQHandler+0x2cc>
 800448e:	e000      	b.n	8004492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
 80044b2:	e000      	b.n	80044b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044b4:	bf00      	nop
    }
  }
}
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d108      	bne.n	80044fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044fa:	e007      	b.n	800450c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3b10      	subs	r3, #16
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <DMA_CalcBaseAndBitshift+0x64>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <DMA_CalcBaseAndBitshift+0x68>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d909      	bls.n	800455a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	659a      	str	r2, [r3, #88]	; 0x58
 8004558:	e007      	b.n	800456a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	aaaaaaab 	.word	0xaaaaaaab
 8004580:	08011340 	.word	0x08011340

08004584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11f      	bne.n	80045de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d856      	bhi.n	8004652 <DMA_CheckFifoParam+0xce>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <DMA_CheckFifoParam+0x28>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045cf 	.word	0x080045cf
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	08004653 	.word	0x08004653
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d046      	beq.n	8004656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045cc:	e043      	b.n	8004656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d6:	d140      	bne.n	800465a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e03d      	b.n	800465a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e6:	d121      	bne.n	800462c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d837      	bhi.n	800465e <DMA_CheckFifoParam+0xda>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <DMA_CheckFifoParam+0x70>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	0800460b 	.word	0x0800460b
 80045fc:	08004605 	.word	0x08004605
 8004600:	0800461d 	.word	0x0800461d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e030      	b.n	800466c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d025      	beq.n	8004662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461a:	e022      	b.n	8004662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004624:	d11f      	bne.n	8004666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800462a:	e01c      	b.n	8004666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d903      	bls.n	800463a <DMA_CheckFifoParam+0xb6>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d003      	beq.n	8004640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004638:	e018      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      break;
 800463e:	e015      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00e      	beq.n	800466a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      break;
 8004650:	e00b      	b.n	800466a <DMA_CheckFifoParam+0xe6>
      break;
 8004652:	bf00      	nop
 8004654:	e00a      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e008      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e006      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e004      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;   
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
    }
  } 
  
  return status; 
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e159      	b.n	800494c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004698:	2201      	movs	r2, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f040 8148 	bne.w	8004946 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d005      	beq.n	80046ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d130      	bne.n	8004730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	2203      	movs	r2, #3
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004704:	2201      	movs	r2, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 0201 	and.w	r2, r3, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b03      	cmp	r3, #3
 800473a:	d017      	beq.n	800476c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	2203      	movs	r2, #3
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d123      	bne.n	80047c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	08da      	lsrs	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3208      	adds	r2, #8
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0203 	and.w	r2, r3, #3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a2 	beq.w	8004946 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	4b57      	ldr	r3, [pc, #348]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	4a56      	ldr	r2, [pc, #344]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 800480c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004810:	6453      	str	r3, [r2, #68]	; 0x44
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800481e:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_GPIO_Init+0x2ec>)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	3302      	adds	r3, #2
 8004826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	220f      	movs	r2, #15
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a49      	ldr	r2, [pc, #292]	; (800496c <HAL_GPIO_Init+0x2f0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_GPIO_Init+0x202>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a48      	ldr	r2, [pc, #288]	; (8004970 <HAL_GPIO_Init+0x2f4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_GPIO_Init+0x1fe>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a47      	ldr	r2, [pc, #284]	; (8004974 <HAL_GPIO_Init+0x2f8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_GPIO_Init+0x1fa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a46      	ldr	r2, [pc, #280]	; (8004978 <HAL_GPIO_Init+0x2fc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_GPIO_Init+0x1f6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a45      	ldr	r2, [pc, #276]	; (800497c <HAL_GPIO_Init+0x300>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_GPIO_Init+0x1f2>
 800486a:	2304      	movs	r3, #4
 800486c:	e008      	b.n	8004880 <HAL_GPIO_Init+0x204>
 800486e:	2307      	movs	r3, #7
 8004870:	e006      	b.n	8004880 <HAL_GPIO_Init+0x204>
 8004872:	2303      	movs	r3, #3
 8004874:	e004      	b.n	8004880 <HAL_GPIO_Init+0x204>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_Init+0x204>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_Init+0x204>
 800487e:	2300      	movs	r3, #0
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	4093      	lsls	r3, r2
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004890:	4935      	ldr	r1, [pc, #212]	; (8004968 <HAL_GPIO_Init+0x2ec>)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800489e:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_GPIO_Init+0x304>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048c2:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_GPIO_Init+0x304>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c8:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_GPIO_Init+0x304>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ec:	4a24      	ldr	r2, [pc, #144]	; (8004980 <HAL_GPIO_Init+0x304>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f2:	4b23      	ldr	r3, [pc, #140]	; (8004980 <HAL_GPIO_Init+0x304>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_GPIO_Init+0x304>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491c:	4b18      	ldr	r3, [pc, #96]	; (8004980 <HAL_GPIO_Init+0x304>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004940:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <HAL_GPIO_Init+0x304>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	f67f aea2 	bls.w	8004698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	40013800 	.word	0x40013800
 800496c:	40020000 	.word	0x40020000
 8004970:	40020400 	.word	0x40020400
 8004974:	40020800 	.word	0x40020800
 8004978:	40020c00 	.word	0x40020c00
 800497c:	40021000 	.word	0x40021000
 8004980:	40013c00 	.word	0x40013c00

08004984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004994:	787b      	ldrb	r3, [r7, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a0:	e003      	b.n	80049aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049a2:	887b      	ldrh	r3, [r7, #2]
 80049a4:	041a      	lsls	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	619a      	str	r2, [r3, #24]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f806 	bl	80049e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e12b      	b.n	8004c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe fd9c 	bl	8003564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a64:	f002 fe76 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8004a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4a81      	ldr	r2, [pc, #516]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d807      	bhi.n	8004a84 <HAL_I2C_Init+0x84>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <HAL_I2C_Init+0x278>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e006      	b.n	8004a92 <HAL_I2C_Init+0x92>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a7d      	ldr	r2, [pc, #500]	; (8004c7c <HAL_I2C_Init+0x27c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf94      	ite	ls
 8004a8c:	2301      	movls	r3, #1
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0e7      	b.n	8004c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a78      	ldr	r2, [pc, #480]	; (8004c80 <HAL_I2C_Init+0x280>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0c9b      	lsrs	r3, r3, #18
 8004aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a6a      	ldr	r2, [pc, #424]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d802      	bhi.n	8004ad4 <HAL_I2C_Init+0xd4>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	e009      	b.n	8004ae8 <HAL_I2C_Init+0xe8>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	4a69      	ldr	r2, [pc, #420]	; (8004c84 <HAL_I2C_Init+0x284>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	495c      	ldr	r1, [pc, #368]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004b04:	428b      	cmp	r3, r1
 8004b06:	d819      	bhi.n	8004b3c <HAL_I2C_Init+0x13c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e59      	subs	r1, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b1c:	400b      	ands	r3, r1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_I2C_Init+0x138>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1e59      	subs	r1, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b30:	3301      	adds	r3, #1
 8004b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b36:	e051      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	e04f      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d111      	bne.n	8004b68 <HAL_I2C_Init+0x168>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e58      	subs	r0, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e012      	b.n	8004b8e <HAL_I2C_Init+0x18e>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	0099      	lsls	r1, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Init+0x196>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10e      	bne.n	8004bbc <HAL_I2C_Init+0x1bc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e58      	subs	r0, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	e00f      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1e58      	subs	r0, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	0099      	lsls	r1, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	6809      	ldr	r1, [r1, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6911      	ldr	r1, [r2, #16]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	000186a0 	.word	0x000186a0
 8004c78:	001e847f 	.word	0x001e847f
 8004c7c:	003d08ff 	.word	0x003d08ff
 8004c80:	431bde83 	.word	0x431bde83
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	817b      	strh	r3, [r7, #10]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	813b      	strh	r3, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ca2:	f7fe ffa7 	bl	8003bf4 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	f040 80d9 	bne.w	8004e68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2319      	movs	r3, #25
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	496d      	ldr	r1, [pc, #436]	; (8004e74 <HAL_I2C_Mem_Write+0x1ec>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fc7f 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0cc      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Mem_Write+0x56>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0c5      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d007      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	; 0x21
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a4d      	ldr	r2, [pc, #308]	; (8004e78 <HAL_I2C_Mem_Write+0x1f0>)
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d46:	88f8      	ldrh	r0, [r7, #6]
 8004d48:	893a      	ldrh	r2, [r7, #8]
 8004d4a:	8979      	ldrh	r1, [r7, #10]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4603      	mov	r3, r0
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fab6 	bl	80052c8 <I2C_RequestMemoryWrite>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d052      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e081      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fd00 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d107      	bne.n	8004d8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06b      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d11b      	bne.n	8004e08 <HAL_I2C_Mem_Write+0x180>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d017      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1aa      	bne.n	8004d66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fcec 	bl	80057f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d107      	bne.n	8004e38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e016      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	00100002 	.word	0x00100002
 8004e78:	ffff0000 	.word	0xffff0000

08004e7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	4608      	mov	r0, r1
 8004e86:	4611      	mov	r1, r2
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	817b      	strh	r3, [r7, #10]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	813b      	strh	r3, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e96:	f7fe fead 	bl	8003bf4 <HAL_GetTick>
 8004e9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	f040 8208 	bne.w	80052ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2319      	movs	r3, #25
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	497b      	ldr	r1, [pc, #492]	; (80050a0 <HAL_I2C_Mem_Read+0x224>)
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fb85 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e1fb      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x56>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e1f4      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d007      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2222      	movs	r2, #34	; 0x22
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2240      	movs	r2, #64	; 0x40
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a5b      	ldr	r2, [pc, #364]	; (80050a4 <HAL_I2C_Mem_Read+0x228>)
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f3a:	88f8      	ldrh	r0, [r7, #6]
 8004f3c:	893a      	ldrh	r2, [r7, #8]
 8004f3e:	8979      	ldrh	r1, [r7, #10]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4603      	mov	r3, r0
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fa52 	bl	80053f4 <I2C_RequestMemoryRead>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e1b0      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d113      	bne.n	8004f8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e184      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d11b      	bne.n	8004fca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e164      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d11b      	bne.n	800500a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	e144      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005020:	e138      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	2b03      	cmp	r3, #3
 8005028:	f200 80f1 	bhi.w	800520e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	2b01      	cmp	r3, #1
 8005032:	d123      	bne.n	800507c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fc1b 	bl	8005874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e139      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	855a      	strh	r2, [r3, #42]	; 0x2a
 800507a:	e10b      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	2b02      	cmp	r3, #2
 8005082:	d14e      	bne.n	8005122 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	2200      	movs	r2, #0
 800508c:	4906      	ldr	r1, [pc, #24]	; (80050a8 <HAL_I2C_Mem_Read+0x22c>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa98 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e10e      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
 800509e:	bf00      	nop
 80050a0:	00100002 	.word	0x00100002
 80050a4:	ffff0000 	.word	0xffff0000
 80050a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005120:	e0b8      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2200      	movs	r2, #0
 800512a:	4966      	ldr	r1, [pc, #408]	; (80052c4 <HAL_I2C_Mem_Read+0x448>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa49 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0bf      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2200      	movs	r2, #0
 8005186:	494f      	ldr	r1, [pc, #316]	; (80052c4 <HAL_I2C_Mem_Read+0x448>)
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fa1b 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e091      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800520c:	e042      	b.n	8005294 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fb2e 	bl	8005874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e04c      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d118      	bne.n	8005294 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	f47f aec2 	bne.w	8005022 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e000      	b.n	80052bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
  }
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	00010004 	.word	0x00010004

080052c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	817b      	strh	r3, [r7, #10]
 80052da:	460b      	mov	r3, r1
 80052dc:	813b      	strh	r3, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f960 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d103      	bne.n	8005322 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e05f      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	492d      	ldr	r1, [pc, #180]	; (80053f0 <I2C_RequestMemoryWrite+0x128>)
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f998 	bl	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04c      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6a39      	ldr	r1, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fa02 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b04      	cmp	r3, #4
 8005378:	d107      	bne.n	800538a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e02b      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e021      	b.n	80053e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f9dc 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e005      	b.n	80053e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	00010002 	.word	0x00010002

080053f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	817b      	strh	r3, [r7, #10]
 8005406:	460b      	mov	r3, r1
 8005408:	813b      	strh	r3, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800541c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	2200      	movs	r2, #0
 8005436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f8c2 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005454:	d103      	bne.n	800545e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0aa      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005462:	897b      	ldrh	r3, [r7, #10]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	6a3a      	ldr	r2, [r7, #32]
 8005476:	4952      	ldr	r1, [pc, #328]	; (80055c0 <I2C_RequestMemoryRead+0x1cc>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f8fa 	bl	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e097      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	6a39      	ldr	r1, [r7, #32]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f964 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d107      	bne.n	80054c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e076      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054d0:	893b      	ldrh	r3, [r7, #8]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	611a      	str	r2, [r3, #16]
 80054da:	e021      	b.n	8005520 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	6a39      	ldr	r1, [r7, #32]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f93e 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d107      	bne.n	8005512 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e050      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005516:	893b      	ldrh	r3, [r7, #8]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	6a39      	ldr	r1, [r7, #32]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f923 	bl	8005770 <I2C_WaitOnTXEFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005546:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e035      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2200      	movs	r2, #0
 8005564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f82b 	bl	80055c4 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00d      	beq.n	8005590 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005582:	d103      	bne.n	800558c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e013      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005590:	897b      	ldrh	r3, [r7, #10]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	6a3a      	ldr	r2, [r7, #32]
 80055a4:	4906      	ldr	r1, [pc, #24]	; (80055c0 <I2C_RequestMemoryRead+0x1cc>)
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f863 	bl	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	00010002 	.word	0x00010002

080055c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d4:	e025      	b.n	8005622 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d021      	beq.n	8005622 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055de:	f7fe fb09 	bl	8003bf4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d116      	bne.n	8005622 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e023      	b.n	800566a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10d      	bne.n	8005648 <I2C_WaitOnFlagUntilTimeout+0x84>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2300      	movne	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	e00c      	b.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	429a      	cmp	r2, r3
 8005666:	d0b6      	beq.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005680:	e051      	b.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	d123      	bne.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0204 	orr.w	r2, r3, #4
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e046      	b.n	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d021      	beq.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fe fa87 	bl	8003bf4 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d116      	bne.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e020      	b.n	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d10c      	bne.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	43da      	mvns	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4013      	ands	r3, r2
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e00b      	b.n	8005762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	43da      	mvns	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d18d      	bne.n	8005682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800577c:	e02d      	b.n	80057da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f8ce 	bl	8005920 <I2C_IsAcknowledgeFailed>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e02d      	b.n	80057ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d021      	beq.n	80057da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fe fa2d 	bl	8003bf4 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e007      	b.n	80057ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d1ca      	bne.n	800577e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057fe:	e02d      	b.n	800585c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f88d 	bl	8005920 <I2C_IsAcknowledgeFailed>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e02d      	b.n	800586c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d021      	beq.n	800585c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fe f9ec 	bl	8003bf4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e007      	b.n	800586c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d1ca      	bne.n	8005800 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005880:	e042      	b.n	8005908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d119      	bne.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0210 	mvn.w	r2, #16
 8005898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e029      	b.n	8005918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c4:	f7fe f996 	bl	8003bf4 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e007      	b.n	8005918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d1b5      	bne.n	8005882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005936:	d11b      	bne.n	8005970 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005940:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800597e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005980:	b08f      	sub	sp, #60	; 0x3c
 8005982:	af0a      	add	r7, sp, #40	; 0x28
 8005984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e10f      	b.n	8005bb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f007 fc18 	bl	800d1e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2203      	movs	r2, #3
 80059b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 feeb 	bl	80097aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	687e      	ldr	r6, [r7, #4]
 80059dc:	466d      	mov	r5, sp
 80059de:	f106 0410 	add.w	r4, r6, #16
 80059e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80059f2:	1d33      	adds	r3, r6, #4
 80059f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f6:	6838      	ldr	r0, [r7, #0]
 80059f8:	f003 fdc2 	bl	8009580 <USB_CoreInit>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0d0      	b.n	8005bb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f003 fed9 	bl	80097cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e04a      	b.n	8005ab6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a20:	7bfa      	ldrb	r2, [r7, #15]
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	333d      	adds	r3, #61	; 0x3d
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	333c      	adds	r3, #60	; 0x3c
 8005a44:	7bfa      	ldrb	r2, [r7, #15]
 8005a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	b298      	uxth	r0, r3
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3344      	adds	r3, #68	; 0x44
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a60:	7bfa      	ldrb	r2, [r7, #15]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3340      	adds	r3, #64	; 0x40
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	3348      	adds	r3, #72	; 0x48
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a88:	7bfa      	ldrb	r2, [r7, #15]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	334c      	adds	r3, #76	; 0x4c
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3354      	adds	r3, #84	; 0x54
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d3af      	bcc.n	8005a20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]
 8005ac4:	e044      	b.n	8005b50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	7bfa      	ldrb	r2, [r7, #15]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3b5      	bcc.n	8005ac6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	687e      	ldr	r6, [r7, #4]
 8005b62:	466d      	mov	r5, sp
 8005b64:	f106 0410 	add.w	r4, r6, #16
 8005b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b78:	1d33      	adds	r3, r6, #4
 8005b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f003 fe71 	bl	8009864 <USB_DevInit>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e00d      	b.n	8005bb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f004 ffc0 	bl	800ab2e <USB_DevDisconnect>

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_PCD_Start+0x1c>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e020      	b.n	8005c16 <HAL_PCD_Start+0x5e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d109      	bne.n	8005bf8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d005      	beq.n	8005bf8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f003 fdc3 	bl	8009788 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 ff70 	bl	800aaec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c1e:	b590      	push	{r4, r7, lr}
 8005c20:	b08d      	sub	sp, #52	; 0x34
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f005 f82e 	bl	800ac96 <USB_GetMode>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 848a 	bne.w	8006556 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f004 ff92 	bl	800ab70 <USB_ReadInterrupts>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8480 	beq.w	8006554 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f004 ff7f 	bl	800ab70 <USB_ReadInterrupts>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d107      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f002 0202 	and.w	r2, r2, #2
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 ff6d 	bl	800ab70 <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d161      	bne.n	8005d64 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0210 	bic.w	r2, r2, #16
 8005cae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	0c5b      	lsrs	r3, r3, #17
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d124      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d035      	beq.n	8005d54 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6a38      	ldr	r0, [r7, #32]
 8005cfc:	f004 fda4 	bl	800a848 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	091b      	lsrs	r3, r3, #4
 8005d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d0c:	441a      	add	r2, r3
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d1e:	441a      	add	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
 8005d24:	e016      	b.n	8005d54 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	0c5b      	lsrs	r3, r3, #17
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	2b06      	cmp	r3, #6
 8005d30:	d110      	bne.n	8005d54 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d38:	2208      	movs	r2, #8
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6a38      	ldr	r0, [r7, #32]
 8005d3e:	f004 fd83 	bl	800a848 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d4e:	441a      	add	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0210 	orr.w	r2, r2, #16
 8005d62:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f004 ff01 	bl	800ab70 <USB_ReadInterrupts>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d78:	f040 80a7 	bne.w	8005eca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f004 ff06 	bl	800ab96 <USB_ReadDevAllOutEpInterrupt>
 8005d8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d8c:	e099      	b.n	8005ec2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 808e 	beq.w	8005eb6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	4611      	mov	r1, r2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f004 ff2a 	bl	800abfe <USB_ReadDevOutEPInterrupt>
 8005daa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fec2 	bl	8006b54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	461a      	mov	r2, r3
 8005de8:	2308      	movs	r3, #8
 8005dea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 ff98 	bl	8006d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d030      	beq.n	8005e7c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d109      	bne.n	8005e3a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e38:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	78db      	ldrb	r3, [r3, #3]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d108      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f007 fab7 	bl	800d3d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	461a      	mov	r2, r3
 8005e78:	2302      	movs	r3, #2
 8005e7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	2320      	movs	r3, #32
 8005e96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f af62 	bne.w	8005d8e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f004 fe4e 	bl	800ab70 <USB_ReadInterrupts>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ede:	f040 80db 	bne.w	8006098 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f004 fe6f 	bl	800abca <USB_ReadDevAllInEpInterrupt>
 8005eec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ef2:	e0cd      	b.n	8006090 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80c2 	beq.w	8006084 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	4611      	mov	r1, r2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 fe95 	bl	800ac3a <USB_ReadDevInEPInterrupt>
 8005f10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d057      	beq.n	8005fcc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69f9      	ldr	r1, [r7, #28]
 8005f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2301      	movs	r3, #1
 8005f50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d132      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	334c      	adds	r3, #76	; 0x4c
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4403      	add	r3, r0
 8005f7a:	3348      	adds	r3, #72	; 0x48
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4419      	add	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4403      	add	r3, r0
 8005f8e:	334c      	adds	r3, #76	; 0x4c
 8005f90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d113      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x3a2>
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3354      	adds	r3, #84	; 0x54
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2101      	movs	r1, #1
 8005fbc:	f004 fe9c 	bl	800acf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f007 f98b 	bl	800d2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	461a      	mov	r2, r3
 8006000:	2310      	movs	r3, #16
 8006002:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	461a      	mov	r2, r3
 800601c:	2340      	movs	r3, #64	; 0x40
 800601e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d023      	beq.n	8006072 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800602a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800602c:	6a38      	ldr	r0, [r7, #32]
 800602e:	f003 fd7d 	bl	8009b2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006034:	4613      	mov	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	3338      	adds	r3, #56	; 0x38
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	3304      	adds	r3, #4
 8006044:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d108      	bne.n	8006060 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2200      	movs	r2, #0
 8006052:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	b2db      	uxtb	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f007 f9ce 	bl	800d3fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	461a      	mov	r2, r3
 800606e:	2302      	movs	r3, #2
 8006070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800607c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fcdb 	bl	8006a3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	3301      	adds	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af2e 	bne.w	8005ef4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f004 fd67 	bl	800ab70 <USB_ReadInterrupts>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ac:	d122      	bne.n	80060f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d108      	bne.n	80060de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060d4:	2100      	movs	r1, #0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fec2 	bl	8006e60 <HAL_PCDEx_LPM_Callback>
 80060dc:	e002      	b.n	80060e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f007 f96c 	bl	800d3bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80060f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f004 fd39 	bl	800ab70 <USB_ReadInterrupts>
 80060fe:	4603      	mov	r3, r0
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006108:	d112      	bne.n	8006130 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d102      	bne.n	8006120 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f007 f928 	bl	800d370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800612e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f004 fd1b 	bl	800ab70 <USB_ReadInterrupts>
 800613a:	4603      	mov	r3, r0
 800613c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006144:	f040 80b7 	bne.w	80062b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2110      	movs	r1, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f003 fce2 	bl	8009b2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616c:	e046      	b.n	80061fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006180:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	461a      	mov	r2, r3
 80061b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	3301      	adds	r3, #1
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006202:	429a      	cmp	r2, r3
 8006204:	d3b3      	bcc.n	800616e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006214:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006218:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f043 030b 	orr.w	r3, r3, #11
 8006236:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006248:	f043 030b 	orr.w	r3, r3, #11
 800624c:	6453      	str	r3, [r2, #68]	; 0x44
 800624e:	e015      	b.n	800627c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006262:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006266:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006276:	f043 030b 	orr.w	r3, r3, #11
 800627a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800628e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062a0:	461a      	mov	r2, r3
 80062a2:	f004 fd29 	bl	800acf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80062b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f004 fc58 	bl	800ab70 <USB_ReadInterrupts>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	d124      	bne.n	8006316 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f004 fcee 	bl	800acb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f003 fca3 	bl	8009c26 <USB_GetDevSpeed>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681c      	ldr	r4, [r3, #0]
 80062ec:	f001 fa26 	bl	800773c <HAL_RCC_GetHCLKFreq>
 80062f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	4620      	mov	r0, r4
 80062fc:	f003 f9a2 	bl	8009644 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f007 f816 	bl	800d332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006314:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f004 fc28 	bl	800ab70 <USB_ReadInterrupts>
 8006320:	4603      	mov	r3, r0
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b08      	cmp	r3, #8
 8006328:	d10a      	bne.n	8006340 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f006 fff3 	bl	800d316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f002 0208 	and.w	r2, r2, #8
 800633e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f004 fc13 	bl	800ab70 <USB_ReadInterrupts>
 800634a:	4603      	mov	r3, r0
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d122      	bne.n	800639a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006360:	2301      	movs	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	e014      	b.n	8006390 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	b2db      	uxtb	r3, r3
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fb27 	bl	80069d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	3301      	adds	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	429a      	cmp	r2, r3
 8006398:	d3e5      	bcc.n	8006366 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 fbe6 	bl	800ab70 <USB_ReadInterrupts>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ae:	d13b      	bne.n	8006428 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063b0:	2301      	movs	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	e02b      	b.n	800640e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3340      	adds	r3, #64	; 0x40
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d115      	bne.n	8006408 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80063dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da12      	bge.n	8006408 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	333f      	adds	r3, #63	; 0x3f
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fae8 	bl	80069d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	3301      	adds	r3, #1
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006414:	429a      	cmp	r2, r3
 8006416:	d3ce      	bcc.n	80063b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f004 fb9f 	bl	800ab70 <USB_ReadInterrupts>
 8006432:	4603      	mov	r3, r0
 8006434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800643c:	d155      	bne.n	80064ea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800643e:	2301      	movs	r3, #1
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
 8006442:	e045      	b.n	80064d0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d12e      	bne.n	80064ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800646c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800646e:	2b00      	cmp	r3, #0
 8006470:	da2b      	bge.n	80064ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800647e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006482:	429a      	cmp	r2, r3
 8006484:	d121      	bne.n	80064ca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064c6:	6053      	str	r3, [r2, #4]
            break;
 80064c8:	e007      	b.n	80064da <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3301      	adds	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3b4      	bcc.n	8006444 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 fb3e 	bl	800ab70 <USB_ReadInterrupts>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d10a      	bne.n	8006516 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f006 ff8d 	bl	800d420 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f004 fb28 	bl	800ab70 <USB_ReadInterrupts>
 8006520:	4603      	mov	r3, r0
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d115      	bne.n	8006556 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f006 ff7d 	bl	800d43c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	e000      	b.n	8006556 <HAL_PCD_IRQHandler+0x938>
      return;
 8006554:	bf00      	nop
    }
  }
}
 8006556:	3734      	adds	r7, #52	; 0x34
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}

0800655c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_PCD_SetAddress+0x1a>
 8006572:	2302      	movs	r3, #2
 8006574:	e013      	b.n	800659e <HAL_PCD_SetAddress+0x42>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f004 fa86 	bl	800aaa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	461a      	mov	r2, r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	70fb      	strb	r3, [r7, #3]
 80065b8:	460b      	mov	r3, r1
 80065ba:	803b      	strh	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da0f      	bge.n	80065ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	3338      	adds	r3, #56	; 0x38
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	3304      	adds	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	705a      	strb	r2, [r3, #1]
 80065ea:	e00f      	b.n	800660c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	3304      	adds	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006618:	883a      	ldrh	r2, [r7, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	78ba      	ldrb	r2, [r7, #2]
 8006622:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006636:	78bb      	ldrb	r3, [r7, #2]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d102      	bne.n	8006642 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_PCD_EP_Open+0xaa>
 800664c:	2302      	movs	r3, #2
 800664e:	e00e      	b.n	800666e <HAL_PCD_EP_Open+0xc8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	4618      	mov	r0, r3
 8006660:	f003 fb06 	bl	8009c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800666c:	7afb      	ldrb	r3, [r7, #11]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006686:	2b00      	cmp	r3, #0
 8006688:	da0f      	bge.n	80066aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	3338      	adds	r3, #56	; 0x38
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	705a      	strb	r2, [r3, #1]
 80066a8:	e00f      	b.n	80066ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	4613      	mov	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4413      	add	r3, r2
 80066c0:	3304      	adds	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_PCD_EP_Close+0x6e>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e00e      	b.n	8006702 <HAL_PCD_EP_Close+0x8c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f003 fb44 	bl	8009d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b086      	sub	sp, #24
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	460b      	mov	r3, r1
 8006718:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	4613      	mov	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2200      	movs	r2, #0
 800674a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	b2da      	uxtb	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d102      	bne.n	8006766 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	f003 fe23 	bl	800a3c8 <USB_EP0StartXfer>
 8006782:	e008      	b.n	8006796 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	f003 fbd1 	bl	8009f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80067c2:	681b      	ldr	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	460b      	mov	r3, r1
 80067de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	f003 020f 	and.w	r2, r3, #15
 80067e6:	4613      	mov	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	3338      	adds	r3, #56	; 0x38
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2201      	movs	r2, #1
 800680e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d102      	bne.n	800682a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	6979      	ldr	r1, [r7, #20]
 8006842:	f003 fdc1 	bl	800a3c8 <USB_EP0StartXfer>
 8006846:	e008      	b.n	800685a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	6979      	ldr	r1, [r7, #20]
 8006856:	f003 fb6f 	bl	8009f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	f003 020f 	and.w	r2, r3, #15
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d901      	bls.n	8006882 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e050      	b.n	8006924 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006886:	2b00      	cmp	r3, #0
 8006888:	da0f      	bge.n	80068aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	3338      	adds	r3, #56	; 0x38
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	705a      	strb	r2, [r3, #1]
 80068a8:	e00d      	b.n	80068c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	3304      	adds	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_PCD_EP_SetStall+0x82>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e01e      	b.n	8006924 <HAL_PCD_EP_SetStall+0xc0>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f003 ffff 	bl	800a8f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	b2d9      	uxtb	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006914:	461a      	mov	r2, r3
 8006916:	f004 f9ef 	bl	800acf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	f003 020f 	and.w	r2, r3, #15
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d901      	bls.n	800694a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e042      	b.n	80069d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800694a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800694e:	2b00      	cmp	r3, #0
 8006950:	da0f      	bge.n	8006972 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	4613      	mov	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	3338      	adds	r3, #56	; 0x38
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	705a      	strb	r2, [r3, #1]
 8006970:	e00f      	b.n	8006992 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	3304      	adds	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_PCD_EP_ClrStall+0x86>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e00e      	b.n	80069d0 <HAL_PCD_EP_ClrStall+0xa4>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f004 f807 	bl	800a9d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80069e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da0c      	bge.n	8006a06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	f003 020f 	and.w	r2, r3, #15
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	3338      	adds	r3, #56	; 0x38
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	3304      	adds	r3, #4
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e00c      	b.n	8006a20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f003 fe26 	bl	800a678 <USB_EPStopXfer>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a30:	7afb      	ldrb	r3, [r7, #11]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08a      	sub	sp, #40	; 0x28
 8006a3e:	af02      	add	r7, sp, #8
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	3338      	adds	r3, #56	; 0x38
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3304      	adds	r3, #4
 8006a60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d901      	bls.n	8006a72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e06c      	b.n	8006b4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d902      	bls.n	8006a8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	3303      	adds	r3, #3
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a96:	e02b      	b.n	8006af0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d902      	bls.n	8006ab4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3303      	adds	r3, #3
 8006ab8:	089b      	lsrs	r3, r3, #2
 8006aba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6919      	ldr	r1, [r3, #16]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	6978      	ldr	r0, [r7, #20]
 8006ad4:	f003 fe7a 	bl	800a7cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	441a      	add	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	441a      	add	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d809      	bhi.n	8006b1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1a      	ldr	r2, [r3, #32]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d203      	bcs.n	8006b1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1be      	bne.n	8006a98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d811      	bhi.n	8006b4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	6939      	ldr	r1, [r7, #16]
 8006b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b46:	4013      	ands	r3, r2
 8006b48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	333c      	adds	r3, #60	; 0x3c
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d17b      	bne.n	8006c82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4a61      	ldr	r2, [pc, #388]	; (8006d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	f240 80b9 	bls.w	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80b3 	beq.w	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bbc:	6093      	str	r3, [r2, #8]
 8006bbe:	e0a7      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2320      	movs	r3, #32
 8006bda:	6093      	str	r3, [r2, #8]
 8006bdc:	e098      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f040 8093 	bne.w	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4a4b      	ldr	r2, [pc, #300]	; (8006d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d90f      	bls.n	8006c12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	6093      	str	r3, [r2, #8]
 8006c10:	e07e      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	0159      	lsls	r1, r3, #5
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	440b      	add	r3, r1
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d114      	bne.n	8006c74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2101      	movs	r1, #1
 8006c60:	f004 f84a 	bl	800acf8 <USB_EP0_OutStart>
 8006c64:	e006      	b.n	8006c74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	441a      	add	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f006 fb16 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
 8006c80:	e046      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d124      	bne.n	8006cd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca6:	6093      	str	r3, [r2, #8]
 8006ca8:	e032      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2320      	movs	r3, #32
 8006cc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f006 faed 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
 8006cd2:	e01d      	b.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d114      	bne.n	8006d04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2100      	movs	r1, #0
 8006d00:	f003 fffa 	bl	800acf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f006 face 	bl	800d2ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	4f54300a 	.word	0x4f54300a
 8006d20:	4f54310a 	.word	0x4f54310a

08006d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	333c      	adds	r3, #60	; 0x3c
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <PCD_EP_OutSetupPacket_int+0x88>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d90e      	bls.n	8006d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	461a      	mov	r2, r3
 8006d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f006 fa85 	bl	800d288 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <PCD_EP_OutSetupPacket_int+0x88>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d90c      	bls.n	8006da0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d108      	bne.n	8006da0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d98:	461a      	mov	r2, r3
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	f003 ffac 	bl	800acf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	4f54300a 	.word	0x4f54300a

08006db0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d107      	bne.n	8006dde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006dce:	883b      	ldrh	r3, [r7, #0]
 8006dd0:	0419      	lsls	r1, r3, #16
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	629a      	str	r2, [r3, #40]	; 0x28
 8006ddc:	e028      	b.n	8006e30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e00d      	b.n	8006e0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3340      	adds	r3, #64	; 0x40
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	0c1b      	lsrs	r3, r3, #16
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	4413      	add	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	7bfa      	ldrb	r2, [r7, #15]
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d3ec      	bcc.n	8006df2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006e18:	883b      	ldrh	r3, [r7, #0]
 8006e1a:	0418      	lsls	r0, r3, #16
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	4302      	orrs	r2, r0
 8006e28:	3340      	adds	r3, #64	; 0x40
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	887a      	ldrh	r2, [r7, #2]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e267      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d075      	beq.n	8006f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e96:	4b88      	ldr	r3, [pc, #544]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 030c 	and.w	r3, r3, #12
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d00c      	beq.n	8006ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ea2:	4b85      	ldr	r3, [pc, #532]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d112      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eae:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eba:	d10b      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebc:	4b7e      	ldr	r3, [pc, #504]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05b      	beq.n	8006f80 <HAL_RCC_OscConfig+0x108>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d157      	bne.n	8006f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e242      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d106      	bne.n	8006eec <HAL_RCC_OscConfig+0x74>
 8006ede:	4b76      	ldr	r3, [pc, #472]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a75      	ldr	r2, [pc, #468]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e01d      	b.n	8006f28 <HAL_RCC_OscConfig+0xb0>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef4:	d10c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x98>
 8006ef6:	4b70      	ldr	r3, [pc, #448]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6f      	ldr	r2, [pc, #444]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b6d      	ldr	r3, [pc, #436]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a6c      	ldr	r2, [pc, #432]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e00b      	b.n	8006f28 <HAL_RCC_OscConfig+0xb0>
 8006f10:	4b69      	ldr	r3, [pc, #420]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a68      	ldr	r2, [pc, #416]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	4b66      	ldr	r3, [pc, #408]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a65      	ldr	r2, [pc, #404]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d013      	beq.n	8006f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f30:	f7fc fe60 	bl	8003bf4 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f38:	f7fc fe5c 	bl	8003bf4 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b64      	cmp	r3, #100	; 0x64
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e207      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4a:	4b5b      	ldr	r3, [pc, #364]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0xc0>
 8006f56:	e014      	b.n	8006f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc fe4c 	bl	8003bf4 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f60:	f7fc fe48 	bl	8003bf4 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b64      	cmp	r3, #100	; 0x64
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e1f3      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f72:	4b51      	ldr	r3, [pc, #324]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0xe8>
 8006f7e:	e000      	b.n	8006f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d063      	beq.n	8007056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f8e:	4b4a      	ldr	r3, [pc, #296]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 030c 	and.w	r3, r3, #12
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f9a:	4b47      	ldr	r3, [pc, #284]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d11c      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fa6:	4b44      	ldr	r3, [pc, #272]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d116      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb2:	4b41      	ldr	r3, [pc, #260]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_RCC_OscConfig+0x152>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d001      	beq.n	8006fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e1c7      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fca:	4b3b      	ldr	r3, [pc, #236]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4937      	ldr	r1, [pc, #220]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fde:	e03a      	b.n	8007056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d020      	beq.n	800702a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe8:	4b34      	ldr	r3, [pc, #208]	; (80070bc <HAL_RCC_OscConfig+0x244>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fee:	f7fc fe01 	bl	8003bf4 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ff6:	f7fc fdfd 	bl	8003bf4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e1a8      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007008:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007014:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4925      	ldr	r1, [pc, #148]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]
 8007028:	e015      	b.n	8007056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_RCC_OscConfig+0x244>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007030:	f7fc fde0 	bl	8003bf4 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007036:	e008      	b.n	800704a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007038:	f7fc fddc 	bl	8003bf4 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e187      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1f0      	bne.n	8007038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d036      	beq.n	80070d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800706a:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <HAL_RCC_OscConfig+0x248>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fc fdc0 	bl	8003bf4 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007078:	f7fc fdbc 	bl	8003bf4 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e167      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_RCC_OscConfig+0x240>)
 800708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x200>
 8007096:	e01b      	b.n	80070d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_RCC_OscConfig+0x248>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800709e:	f7fc fda9 	bl	8003bf4 <HAL_GetTick>
 80070a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a4:	e00e      	b.n	80070c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070a6:	f7fc fda5 	bl	8003bf4 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d907      	bls.n	80070c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e150      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
 80070b8:	40023800 	.word	0x40023800
 80070bc:	42470000 	.word	0x42470000
 80070c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c4:	4b88      	ldr	r3, [pc, #544]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80070c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1ea      	bne.n	80070a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8097 	beq.w	800720c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e2:	4b81      	ldr	r3, [pc, #516]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10f      	bne.n	800710e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	4b7d      	ldr	r3, [pc, #500]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	4a7c      	ldr	r2, [pc, #496]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80070f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fc:	6413      	str	r3, [r2, #64]	; 0x40
 80070fe:	4b7a      	ldr	r3, [pc, #488]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007106:	60bb      	str	r3, [r7, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710e:	4b77      	ldr	r3, [pc, #476]	; (80072ec <HAL_RCC_OscConfig+0x474>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007116:	2b00      	cmp	r3, #0
 8007118:	d118      	bne.n	800714c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800711a:	4b74      	ldr	r3, [pc, #464]	; (80072ec <HAL_RCC_OscConfig+0x474>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a73      	ldr	r2, [pc, #460]	; (80072ec <HAL_RCC_OscConfig+0x474>)
 8007120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007126:	f7fc fd65 	bl	8003bf4 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712e:	f7fc fd61 	bl	8003bf4 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e10c      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007140:	4b6a      	ldr	r3, [pc, #424]	; (80072ec <HAL_RCC_OscConfig+0x474>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d106      	bne.n	8007162 <HAL_RCC_OscConfig+0x2ea>
 8007154:	4b64      	ldr	r3, [pc, #400]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4a63      	ldr	r2, [pc, #396]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6713      	str	r3, [r2, #112]	; 0x70
 8007160:	e01c      	b.n	800719c <HAL_RCC_OscConfig+0x324>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b05      	cmp	r3, #5
 8007168:	d10c      	bne.n	8007184 <HAL_RCC_OscConfig+0x30c>
 800716a:	4b5f      	ldr	r3, [pc, #380]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	4a5e      	ldr	r2, [pc, #376]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007170:	f043 0304 	orr.w	r3, r3, #4
 8007174:	6713      	str	r3, [r2, #112]	; 0x70
 8007176:	4b5c      	ldr	r3, [pc, #368]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	4a5b      	ldr	r2, [pc, #364]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	6713      	str	r3, [r2, #112]	; 0x70
 8007182:	e00b      	b.n	800719c <HAL_RCC_OscConfig+0x324>
 8007184:	4b58      	ldr	r3, [pc, #352]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007188:	4a57      	ldr	r2, [pc, #348]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	6713      	str	r3, [r2, #112]	; 0x70
 8007190:	4b55      	ldr	r3, [pc, #340]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007194:	4a54      	ldr	r2, [pc, #336]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007196:	f023 0304 	bic.w	r3, r3, #4
 800719a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a4:	f7fc fd26 	bl	8003bf4 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071aa:	e00a      	b.n	80071c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ac:	f7fc fd22 	bl	8003bf4 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e0cb      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c2:	4b49      	ldr	r3, [pc, #292]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0ee      	beq.n	80071ac <HAL_RCC_OscConfig+0x334>
 80071ce:	e014      	b.n	80071fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d0:	f7fc fd10 	bl	8003bf4 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d6:	e00a      	b.n	80071ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d8:	f7fc fd0c 	bl	8003bf4 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0b5      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ee:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1ee      	bne.n	80071d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007200:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	4a38      	ldr	r2, [pc, #224]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80a1 	beq.w	8007358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007216:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 030c 	and.w	r3, r3, #12
 800721e:	2b08      	cmp	r3, #8
 8007220:	d05c      	beq.n	80072dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d141      	bne.n	80072ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <HAL_RCC_OscConfig+0x478>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007230:	f7fc fce0 	bl	8003bf4 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007238:	f7fc fcdc 	bl	8003bf4 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e087      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724a:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f0      	bne.n	8007238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69da      	ldr	r2, [r3, #28]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	019b      	lsls	r3, r3, #6
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	3b01      	subs	r3, #1
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	061b      	lsls	r3, r3, #24
 800727a:	491b      	ldr	r1, [pc, #108]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 800727c:	4313      	orrs	r3, r2
 800727e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <HAL_RCC_OscConfig+0x478>)
 8007282:	2201      	movs	r2, #1
 8007284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007286:	f7fc fcb5 	bl	8003bf4 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800728e:	f7fc fcb1 	bl	8003bf4 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e05c      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a0:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f0      	beq.n	800728e <HAL_RCC_OscConfig+0x416>
 80072ac:	e054      	b.n	8007358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <HAL_RCC_OscConfig+0x478>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b4:	f7fc fc9e 	bl	8003bf4 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072bc:	f7fc fc9a 	bl	8003bf4 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e045      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <HAL_RCC_OscConfig+0x470>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x444>
 80072da:	e03d      	b.n	8007358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e038      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
 80072e8:	40023800 	.word	0x40023800
 80072ec:	40007000 	.word	0x40007000
 80072f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072f4:	4b1b      	ldr	r3, [pc, #108]	; (8007364 <HAL_RCC_OscConfig+0x4ec>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d028      	beq.n	8007354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d121      	bne.n	8007354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	429a      	cmp	r2, r3
 800731c:	d11a      	bne.n	8007354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007324:	4013      	ands	r3, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800732a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800732c:	4293      	cmp	r3, r2
 800732e:	d111      	bne.n	8007354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	3b01      	subs	r3, #1
 800733e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007340:	429a      	cmp	r2, r3
 8007342:	d107      	bne.n	8007354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40023800 	.word	0x40023800

08007368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0cc      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800737c:	4b68      	ldr	r3, [pc, #416]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d90c      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b65      	ldr	r3, [pc, #404]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b63      	ldr	r3, [pc, #396]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0b8      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073bc:	4b59      	ldr	r3, [pc, #356]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a58      	ldr	r2, [pc, #352]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073d4:	4b53      	ldr	r3, [pc, #332]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	4a52      	ldr	r2, [pc, #328]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e0:	4b50      	ldr	r3, [pc, #320]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	494d      	ldr	r1, [pc, #308]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d044      	beq.n	8007488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d107      	bne.n	8007416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007406:	4b47      	ldr	r3, [pc, #284]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d119      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e07f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d003      	beq.n	8007426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007422:	2b03      	cmp	r3, #3
 8007424:	d107      	bne.n	8007436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007426:	4b3f      	ldr	r3, [pc, #252]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e06f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007436:	4b3b      	ldr	r3, [pc, #236]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e067      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007446:	4b37      	ldr	r3, [pc, #220]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f023 0203 	bic.w	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4934      	ldr	r1, [pc, #208]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	4313      	orrs	r3, r2
 8007456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007458:	f7fc fbcc 	bl	8003bf4 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	e00a      	b.n	8007476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007460:	f7fc fbc8 	bl	8003bf4 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	; 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e04f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007476:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 020c 	and.w	r2, r3, #12
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	429a      	cmp	r2, r3
 8007486:	d1eb      	bne.n	8007460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d20c      	bcs.n	80074b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e032      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074bc:	4b19      	ldr	r3, [pc, #100]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	4916      	ldr	r1, [pc, #88]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074da:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	490e      	ldr	r1, [pc, #56]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074ee:	f000 f821 	bl	8007534 <HAL_RCC_GetSysClockFreq>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	490a      	ldr	r1, [pc, #40]	; (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 8007500:	5ccb      	ldrb	r3, [r1, r3]
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	4a09      	ldr	r2, [pc, #36]	; (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <HAL_RCC_ClockConfig+0x1c8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7fc fb2c 	bl	8003b6c <HAL_InitTick>

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40023c00 	.word	0x40023c00
 8007524:	40023800 	.word	0x40023800
 8007528:	08011328 	.word	0x08011328
 800752c:	20000090 	.word	0x20000090
 8007530:	20000094 	.word	0x20000094

08007534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007538:	b094      	sub	sp, #80	; 0x50
 800753a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	647b      	str	r3, [r7, #68]	; 0x44
 8007540:	2300      	movs	r3, #0
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007544:	2300      	movs	r3, #0
 8007546:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800754c:	4b79      	ldr	r3, [pc, #484]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b08      	cmp	r3, #8
 8007556:	d00d      	beq.n	8007574 <HAL_RCC_GetSysClockFreq+0x40>
 8007558:	2b08      	cmp	r3, #8
 800755a:	f200 80e1 	bhi.w	8007720 <HAL_RCC_GetSysClockFreq+0x1ec>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_RCC_GetSysClockFreq+0x34>
 8007562:	2b04      	cmp	r3, #4
 8007564:	d003      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x3a>
 8007566:	e0db      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007568:	4b73      	ldr	r3, [pc, #460]	; (8007738 <HAL_RCC_GetSysClockFreq+0x204>)
 800756a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800756c:	e0db      	b.n	8007726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800756e:	4b72      	ldr	r3, [pc, #456]	; (8007738 <HAL_RCC_GetSysClockFreq+0x204>)
 8007570:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007572:	e0d8      	b.n	8007726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007574:	4b6f      	ldr	r3, [pc, #444]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800757e:	4b6d      	ldr	r3, [pc, #436]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d063      	beq.n	8007652 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800758a:	4b6a      	ldr	r3, [pc, #424]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	099b      	lsrs	r3, r3, #6
 8007590:	2200      	movs	r2, #0
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
 8007594:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	633b      	str	r3, [r7, #48]	; 0x30
 800759e:	2300      	movs	r3, #0
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
 80075a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	f04f 0000 	mov.w	r0, #0
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	0159      	lsls	r1, r3, #5
 80075b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075b8:	0150      	lsls	r0, r2, #5
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4621      	mov	r1, r4
 80075c0:	1a51      	subs	r1, r2, r1
 80075c2:	6139      	str	r1, [r7, #16]
 80075c4:	4629      	mov	r1, r5
 80075c6:	eb63 0301 	sbc.w	r3, r3, r1
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075d8:	4659      	mov	r1, fp
 80075da:	018b      	lsls	r3, r1, #6
 80075dc:	4651      	mov	r1, sl
 80075de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075e2:	4651      	mov	r1, sl
 80075e4:	018a      	lsls	r2, r1, #6
 80075e6:	4651      	mov	r1, sl
 80075e8:	ebb2 0801 	subs.w	r8, r2, r1
 80075ec:	4659      	mov	r1, fp
 80075ee:	eb63 0901 	sbc.w	r9, r3, r1
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007606:	4690      	mov	r8, r2
 8007608:	4699      	mov	r9, r3
 800760a:	4623      	mov	r3, r4
 800760c:	eb18 0303 	adds.w	r3, r8, r3
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	462b      	mov	r3, r5
 8007614:	eb49 0303 	adc.w	r3, r9, r3
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007626:	4629      	mov	r1, r5
 8007628:	028b      	lsls	r3, r1, #10
 800762a:	4621      	mov	r1, r4
 800762c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007630:	4621      	mov	r1, r4
 8007632:	028a      	lsls	r2, r1, #10
 8007634:	4610      	mov	r0, r2
 8007636:	4619      	mov	r1, r3
 8007638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763a:	2200      	movs	r2, #0
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
 800763e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007644:	f7f9 fb58 	bl	8000cf8 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4613      	mov	r3, r2
 800764e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007650:	e058      	b.n	8007704 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007652:	4b38      	ldr	r3, [pc, #224]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	2200      	movs	r2, #0
 800765a:	4618      	mov	r0, r3
 800765c:	4611      	mov	r1, r2
 800765e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	2300      	movs	r3, #0
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
 8007668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	f04f 0000 	mov.w	r0, #0
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	0159      	lsls	r1, r3, #5
 800767a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800767e:	0150      	lsls	r0, r2, #5
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4641      	mov	r1, r8
 8007686:	ebb2 0a01 	subs.w	sl, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800769c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80076a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80076a4:	ebb2 040a 	subs.w	r4, r2, sl
 80076a8:	eb63 050b 	sbc.w	r5, r3, fp
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	00eb      	lsls	r3, r5, #3
 80076b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ba:	00e2      	lsls	r2, r4, #3
 80076bc:	4614      	mov	r4, r2
 80076be:	461d      	mov	r5, r3
 80076c0:	4643      	mov	r3, r8
 80076c2:	18e3      	adds	r3, r4, r3
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	464b      	mov	r3, r9
 80076c8:	eb45 0303 	adc.w	r3, r5, r3
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076da:	4629      	mov	r1, r5
 80076dc:	028b      	lsls	r3, r1, #10
 80076de:	4621      	mov	r1, r4
 80076e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076e4:	4621      	mov	r1, r4
 80076e6:	028a      	lsls	r2, r1, #10
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ee:	2200      	movs	r2, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	61fa      	str	r2, [r7, #28]
 80076f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076f8:	f7f9 fafe 	bl	8000cf8 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <HAL_RCC_GetSysClockFreq+0x200>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	3301      	adds	r3, #1
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800771e:	e002      	b.n	8007726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCC_GetSysClockFreq+0x204>)
 8007722:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007728:	4618      	mov	r0, r3
 800772a:	3750      	adds	r7, #80	; 0x50
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007732:	bf00      	nop
 8007734:	40023800 	.word	0x40023800
 8007738:	00f42400 	.word	0x00f42400

0800773c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007740:	4b03      	ldr	r3, [pc, #12]	; (8007750 <HAL_RCC_GetHCLKFreq+0x14>)
 8007742:	681b      	ldr	r3, [r3, #0]
}
 8007744:	4618      	mov	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000090 	.word	0x20000090

08007754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007758:	f7ff fff0 	bl	800773c <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0a9b      	lsrs	r3, r3, #10
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4903      	ldr	r1, [pc, #12]	; (8007778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40023800 	.word	0x40023800
 8007778:	08011338 	.word	0x08011338

0800777c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007780:	f7ff ffdc 	bl	800773c <HAL_RCC_GetHCLKFreq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	0b5b      	lsrs	r3, r3, #13
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	4903      	ldr	r1, [pc, #12]	; (80077a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007792:	5ccb      	ldrb	r3, [r1, r3]
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40023800 	.word	0x40023800
 80077a0:	08011338 	.word	0x08011338

080077a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e07b      	b.n	80078ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c6:	d009      	beq.n	80077dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	61da      	str	r2, [r3, #28]
 80077ce:	e005      	b.n	80077dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fb ff42 	bl	8003680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007860:	ea42 0103 	orr.w	r1, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	f003 0104 	and.w	r1, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	f003 0210 	and.w	r2, r3, #16
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800789c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_SPI_Transmit+0x22>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e126      	b.n	8007b26 <HAL_SPI_Transmit+0x270>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078e0:	f7fc f988 	bl	8003bf4 <HAL_GetTick>
 80078e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078fa:	e10b      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SPI_Transmit+0x52>
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800790c:	e102      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007954:	d10f      	bne.n	8007976 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d007      	beq.n	8007994 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799c:	d14b      	bne.n	8007a36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0xf6>
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d13e      	bne.n	8007a2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079d0:	e02b      	b.n	8007a2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d112      	bne.n	8007a06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a04:	e011      	b.n	8007a2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a06:	f7fc f8f5 	bl	8003bf4 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d803      	bhi.n	8007a1e <HAL_SPI_Transmit+0x168>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x16e>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a28:	e074      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1ce      	bne.n	80079d2 <HAL_SPI_Transmit+0x11c>
 8007a34:	e04c      	b.n	8007ad0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_SPI_Transmit+0x18e>
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d140      	bne.n	8007ac6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a6a:	e02c      	b.n	8007ac6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d113      	bne.n	8007aa2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007aa0:	e011      	b.n	8007ac6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa2:	f7fc f8a7 	bl	8003bf4 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_Transmit+0x204>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Transmit+0x20a>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ac4:	e026      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1cd      	bne.n	8007a6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fbd9 	bl	800828c <SPI_EndRxTxTransaction>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e000      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b088      	sub	sp, #32
 8007b32:	af02      	add	r7, sp, #8
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b4a:	d112      	bne.n	8007b72 <HAL_SPI_Receive+0x44>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10e      	bne.n	8007b72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2204      	movs	r2, #4
 8007b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b5c:	88fa      	ldrh	r2, [r7, #6]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f8f1 	bl	8007d50 <HAL_SPI_TransmitReceive>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	e0ea      	b.n	8007d48 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_SPI_Receive+0x52>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e0e3      	b.n	8007d48 <HAL_SPI_Receive+0x21a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b88:	f7fc f834 	bl	8003bf4 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d002      	beq.n	8007ba0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b9e:	e0ca      	b.n	8007d36 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_Receive+0x7e>
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bb0:	e0c1      	b.n	8007d36 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf8:	d10f      	bne.n	8007c1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c24:	2b40      	cmp	r3, #64	; 0x40
 8007c26:	d007      	beq.n	8007c38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d162      	bne.n	8007d06 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c40:	e02e      	b.n	8007ca0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d115      	bne.n	8007c7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f103 020c 	add.w	r2, r3, #12
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	7812      	ldrb	r2, [r2, #0]
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c7a:	e011      	b.n	8007ca0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c7c:	f7fb ffba 	bl	8003bf4 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d803      	bhi.n	8007c94 <HAL_SPI_Receive+0x166>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d102      	bne.n	8007c9a <HAL_SPI_Receive+0x16c>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c9e:	e04a      	b.n	8007d36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1cb      	bne.n	8007c42 <HAL_SPI_Receive+0x114>
 8007caa:	e031      	b.n	8007d10 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d113      	bne.n	8007ce2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	1c9a      	adds	r2, r3, #2
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ce0:	e011      	b.n	8007d06 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce2:	f7fb ff87 	bl	8003bf4 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d803      	bhi.n	8007cfa <HAL_SPI_Receive+0x1cc>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d102      	bne.n	8007d00 <HAL_SPI_Receive+0x1d2>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d04:	e017      	b.n	8007d36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1cd      	bne.n	8007cac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fa53 	bl	80081c0 <SPI_EndRxTransaction>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
 8007d32:	e000      	b.n	8007d36 <HAL_SPI_Receive+0x208>
  }

error :
 8007d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_SPI_TransmitReceive+0x26>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e18a      	b.n	800808c <HAL_SPI_TransmitReceive+0x33c>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7e:	f7fb ff39 	bl	8003bf4 <HAL_GetTick>
 8007d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d94:	887b      	ldrh	r3, [r7, #2]
 8007d96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d00f      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x70>
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da6:	d107      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x68>
 8007db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d003      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007db8:	2302      	movs	r3, #2
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dbe:	e15b      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x82>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x82>
 8007dcc:	887b      	ldrh	r3, [r7, #2]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dd8:	e14e      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d003      	beq.n	8007dee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2205      	movs	r2, #5
 8007dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	887a      	ldrh	r2, [r7, #2]
 8007dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	887a      	ldrh	r2, [r7, #2]
 8007e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d007      	beq.n	8007e42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e4a:	d178      	bne.n	8007f3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x10a>
 8007e54:	8b7b      	ldrh	r3, [r7, #26]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d166      	bne.n	8007f28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	881a      	ldrh	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	1c9a      	adds	r2, r3, #2
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e7e:	e053      	b.n	8007f28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d11b      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x176>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d016      	beq.n	8007ec6 <HAL_SPI_TransmitReceive+0x176>
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d113      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	881a      	ldrh	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d119      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x1b8>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef0:	1c9a      	adds	r2, r3, #2
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f04:	2301      	movs	r3, #1
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f08:	f7fb fe74 	bl	8003bf4 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d807      	bhi.n	8007f28 <HAL_SPI_TransmitReceive+0x1d8>
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d003      	beq.n	8007f28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f26:	e0a7      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1a6      	bne.n	8007e80 <HAL_SPI_TransmitReceive+0x130>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1a1      	bne.n	8007e80 <HAL_SPI_TransmitReceive+0x130>
 8007f3c:	e07c      	b.n	8008038 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <HAL_SPI_TransmitReceive+0x1fc>
 8007f46:	8b7b      	ldrh	r3, [r7, #26]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d16b      	bne.n	8008024 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f72:	e057      	b.n	8008024 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d11c      	bne.n	8007fbc <HAL_SPI_TransmitReceive+0x26c>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d017      	beq.n	8007fbc <HAL_SPI_TransmitReceive+0x26c>
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d114      	bne.n	8007fbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	7812      	ldrb	r2, [r2, #0]
 8007f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d119      	bne.n	8007ffe <HAL_SPI_TransmitReceive+0x2ae>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d014      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ffe:	f7fb fdf9 	bl	8003bf4 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800800a:	429a      	cmp	r2, r3
 800800c:	d803      	bhi.n	8008016 <HAL_SPI_TransmitReceive+0x2c6>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d102      	bne.n	800801c <HAL_SPI_TransmitReceive+0x2cc>
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008022:	e029      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1a2      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x224>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d19d      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f925 	bl	800828c <SPI_EndRxTxTransaction>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d006      	beq.n	8008056 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008054:	e010      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	e000      	b.n	8008078 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800808c:	4618      	mov	r0, r3
 800808e:	3730      	adds	r7, #48	; 0x30
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080a2:	b2db      	uxtb	r3, r3
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080c0:	f7fb fd98 	bl	8003bf4 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4413      	add	r3, r2
 80080ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080d0:	f7fb fd90 	bl	8003bf4 <HAL_GetTick>
 80080d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080d6:	4b39      	ldr	r3, [pc, #228]	; (80081bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	015b      	lsls	r3, r3, #5
 80080dc:	0d1b      	lsrs	r3, r3, #20
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080e6:	e054      	b.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d050      	beq.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f0:	f7fb fd80 	bl	8003bf4 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d902      	bls.n	8008106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d13d      	bne.n	8008182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800811e:	d111      	bne.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008128:	d004      	beq.n	8008134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d107      	bne.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814c:	d10f      	bne.n	800816e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800816c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e017      	b.n	80081b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3b01      	subs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4013      	ands	r3, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d19b      	bne.n	80080e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000090 	.word	0x20000090

080081c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d4:	d111      	bne.n	80081fa <SPI_EndRxTransaction+0x3a>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081de:	d004      	beq.n	80081ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e8:	d107      	bne.n	80081fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008202:	d12a      	bne.n	800825a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820c:	d012      	beq.n	8008234 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	2180      	movs	r1, #128	; 0x80
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff ff49 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02d      	beq.n	8008280 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e026      	b.n	8008282 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	2101      	movs	r1, #1
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff ff36 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01a      	beq.n	8008280 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e013      	b.n	8008282 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	2101      	movs	r1, #1
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff ff23 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008274:	f043 0220 	orr.w	r2, r3, #32
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e000      	b.n	8008282 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008298:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <SPI_EndRxTxTransaction+0x7c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1b      	ldr	r2, [pc, #108]	; (800830c <SPI_EndRxTxTransaction+0x80>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	0d5b      	lsrs	r3, r3, #21
 80082a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b6:	d112      	bne.n	80082de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2200      	movs	r2, #0
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fef4 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d016      	beq.n	80082fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e00f      	b.n	80082fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f4:	2b80      	cmp	r3, #128	; 0x80
 80082f6:	d0f2      	beq.n	80082de <SPI_EndRxTxTransaction+0x52>
 80082f8:	e000      	b.n	80082fc <SPI_EndRxTxTransaction+0x70>
        break;
 80082fa:	bf00      	nop
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000090 	.word	0x20000090
 800830c:	165e9f81 	.word	0x165e9f81

08008310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e041      	b.n	80083a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fb f9ea 	bl	8003710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3304      	adds	r3, #4
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f000 f82e 	bl	80083b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a34      	ldr	r2, [pc, #208]	; (8008494 <TIM_Base_SetConfig+0xe4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00f      	beq.n	80083e8 <TIM_Base_SetConfig+0x38>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ce:	d00b      	beq.n	80083e8 <TIM_Base_SetConfig+0x38>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a31      	ldr	r2, [pc, #196]	; (8008498 <TIM_Base_SetConfig+0xe8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_Base_SetConfig+0x38>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a30      	ldr	r2, [pc, #192]	; (800849c <TIM_Base_SetConfig+0xec>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_Base_SetConfig+0x38>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a2f      	ldr	r2, [pc, #188]	; (80084a0 <TIM_Base_SetConfig+0xf0>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d108      	bne.n	80083fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a25      	ldr	r2, [pc, #148]	; (8008494 <TIM_Base_SetConfig+0xe4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d01b      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d017      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a22      	ldr	r2, [pc, #136]	; (8008498 <TIM_Base_SetConfig+0xe8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d013      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a21      	ldr	r2, [pc, #132]	; (800849c <TIM_Base_SetConfig+0xec>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00f      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a20      	ldr	r2, [pc, #128]	; (80084a0 <TIM_Base_SetConfig+0xf0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00b      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1f      	ldr	r2, [pc, #124]	; (80084a4 <TIM_Base_SetConfig+0xf4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d007      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <TIM_Base_SetConfig+0xf8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <TIM_Base_SetConfig+0x8a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a1d      	ldr	r2, [pc, #116]	; (80084ac <TIM_Base_SetConfig+0xfc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d108      	bne.n	800844c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <TIM_Base_SetConfig+0xe4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40010000 	.word	0x40010000
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800

080084b0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e047      	b.n	8008552 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fb f93c 	bl	8003754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2224      	movs	r2, #36	; 0x24
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fdcf 	bl	8009098 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008518:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0208 	orr.w	r2, r2, #8
 8008528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	; 0x30
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b20      	cmp	r3, #32
 8008574:	d165      	bne.n	8008642 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_UART_Transmit_DMA+0x26>
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e05e      	b.n	8008644 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_UART_Transmit_DMA+0x38>
 8008590:	2302      	movs	r3, #2
 8008592:	e057      	b.n	8008644 <HAL_UART_Transmit_DMA+0xe8>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2221      	movs	r2, #33	; 0x21
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	4a22      	ldr	r2, [pc, #136]	; (800864c <HAL_UART_Transmit_DMA+0xf0>)
 80085c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c8:	4a21      	ldr	r2, [pc, #132]	; (8008650 <HAL_UART_Transmit_DMA+0xf4>)
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d0:	4a20      	ldr	r2, [pc, #128]	; (8008654 <HAL_UART_Transmit_DMA+0xf8>)
 80085d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d8:	2200      	movs	r2, #0
 80085da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80085dc:	f107 0308 	add.w	r3, r7, #8
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	6819      	ldr	r1, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	461a      	mov	r2, r3
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	f7fb fcee 	bl	8003fd4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008600:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3314      	adds	r3, #20
 8008610:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	617b      	str	r3, [r7, #20]
   return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3314      	adds	r3, #20
 8008628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862a:	627a      	str	r2, [r7, #36]	; 0x24
 800862c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6a39      	ldr	r1, [r7, #32]
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	61fb      	str	r3, [r7, #28]
   return(result);
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008642:	2302      	movs	r3, #2
  }
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	08008bc9 	.word	0x08008bc9
 8008650:	08008c63 	.word	0x08008c63
 8008654:	08008c7f 	.word	0x08008c7f

08008658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b0ba      	sub	sp, #232	; 0xe8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800867e:	2300      	movs	r3, #0
 8008680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008684:	2300      	movs	r3, #0
 8008686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10f      	bne.n	80086be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <HAL_UART_IRQHandler+0x66>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc32 	bl	8008f20 <UART_Receive_IT>
      return;
 80086bc:	e256      	b.n	8008b6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 80de 	beq.w	8008884 <HAL_UART_IRQHandler+0x22c>
 80086c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80d1 	beq.w	8008884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <HAL_UART_IRQHandler+0xae>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f043 0201 	orr.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870a:	f003 0304 	and.w	r3, r3, #4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <HAL_UART_IRQHandler+0xd2>
 8008712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	f043 0202 	orr.w	r2, r3, #2
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <HAL_UART_IRQHandler+0xf6>
 8008736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	f043 0204 	orr.w	r2, r3, #4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <HAL_UART_IRQHandler+0x126>
 800875a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d105      	bne.n	8008772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	f043 0208 	orr.w	r2, r3, #8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81ed 	beq.w	8008b62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d008      	beq.n	80087a6 <HAL_UART_IRQHandler+0x14e>
 8008794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fbbd 	bl	8008f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <HAL_UART_IRQHandler+0x17a>
 80087ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04f      	beq.n	8008872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fac5 	bl	8008d62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	d141      	bne.n	800886a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3314      	adds	r3, #20
 80087ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3314      	adds	r3, #20
 800880e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800881e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800882a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1d9      	bne.n	80087e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d013      	beq.n	8008862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	4a7d      	ldr	r2, [pc, #500]	; (8008a34 <HAL_UART_IRQHandler+0x3dc>)
 8008840:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	4618      	mov	r0, r3
 8008848:	f7fb fc8c 	bl	8004164 <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d016      	beq.n	8008880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800885c:	4610      	mov	r0, r2
 800885e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	e00e      	b.n	8008880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f99a 	bl	8008b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008868:	e00a      	b.n	8008880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f996 	bl	8008b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	e006      	b.n	8008880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f992 	bl	8008b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800887e:	e170      	b.n	8008b62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	bf00      	nop
    return;
 8008882:	e16e      	b.n	8008b62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	2b01      	cmp	r3, #1
 800888a:	f040 814a 	bne.w	8008b22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800888e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8143 	beq.w	8008b22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 813c 	beq.w	8008b22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60bb      	str	r3, [r7, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	60bb      	str	r3, [r7, #8]
 80088be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	f040 80b4 	bne.w	8008a38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8140 	beq.w	8008b66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ee:	429a      	cmp	r2, r3
 80088f0:	f080 8139 	bcs.w	8008b66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008906:	f000 8088 	beq.w	8008a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800893a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800894e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1d9      	bne.n	800890a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3314      	adds	r3, #20
 800895c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800897a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800897e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800898c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e1      	bne.n	8008956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3314      	adds	r3, #20
 8008998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3314      	adds	r3, #20
 80089b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e3      	bne.n	8008992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	330c      	adds	r3, #12
 80089de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ea:	f023 0310 	bic.w	r3, r3, #16
 80089ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	330c      	adds	r3, #12
 80089f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80089fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e3      	bne.n	80089d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fb fb35 	bl	8004084 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8c0 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a30:	e099      	b.n	8008b66 <HAL_UART_IRQHandler+0x50e>
 8008a32:	bf00      	nop
 8008a34:	08008e29 	.word	0x08008e29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 808b 	beq.w	8008b6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8086 	beq.w	8008b6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	330c      	adds	r3, #12
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a82:	647a      	str	r2, [r7, #68]	; 0x44
 8008a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3314      	adds	r3, #20
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
 8008aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3314      	adds	r3, #20
 8008ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aba:	633a      	str	r2, [r7, #48]	; 0x30
 8008abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e3      	bne.n	8008a96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0310 	bic.w	r3, r3, #16
 8008af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b00:	61fa      	str	r2, [r7, #28]
 8008b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e3      	bne.n	8008adc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f848 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b20:	e023      	b.n	8008b6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_UART_IRQHandler+0x4ea>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f988 	bl	8008e50 <UART_Transmit_IT>
    return;
 8008b40:	e014      	b.n	8008b6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <HAL_UART_IRQHandler+0x514>
 8008b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9c8 	bl	8008ef0 <UART_EndTransmit_IT>
    return;
 8008b60:	e004      	b.n	8008b6c <HAL_UART_IRQHandler+0x514>
    return;
 8008b62:	bf00      	nop
 8008b64:	e002      	b.n	8008b6c <HAL_UART_IRQHandler+0x514>
      return;
 8008b66:	bf00      	nop
 8008b68:	e000      	b.n	8008b6c <HAL_UART_IRQHandler+0x514>
      return;
 8008b6a:	bf00      	nop
  }
}
 8008b6c:	37e8      	adds	r7, #232	; 0xe8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop

08008b74 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	; 0x40
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d137      	bne.n	8008c54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be6:	2200      	movs	r2, #0
 8008be8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3e:	61fa      	str	r2, [r7, #28]
 8008c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	69b9      	ldr	r1, [r7, #24]
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e5      	bne.n	8008c1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c52:	e002      	b.n	8008c5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c56:	f7fa f8a4 	bl	8002da2 <HAL_UART_TxCpltCallback>
}
 8008c5a:	bf00      	nop
 8008c5c:	3740      	adds	r7, #64	; 0x40
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff ff7f 	bl	8008b74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9a:	2b80      	cmp	r3, #128	; 0x80
 8008c9c:	bf0c      	ite	eq
 8008c9e:	2301      	moveq	r3, #1
 8008ca0:	2300      	movne	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b21      	cmp	r3, #33	; 0x21
 8008cb0:	d108      	bne.n	8008cc4 <UART_DMAError+0x46>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008cbe:	68b8      	ldr	r0, [r7, #8]
 8008cc0:	f000 f827 	bl	8008d12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b22      	cmp	r3, #34	; 0x22
 8008ce4:	d108      	bne.n	8008cf8 <UART_DMAError+0x7a>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008cf2:	68b8      	ldr	r0, [r7, #8]
 8008cf4:	f000 f835 	bl	8008d62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	f043 0210 	orr.w	r2, r3, #16
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d04:	68b8      	ldr	r0, [r7, #8]
 8008d06:	f7ff ff49 	bl	8008b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	61ba      	str	r2, [r7, #24]
 8008d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6979      	ldr	r1, [r7, #20]
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	613b      	str	r3, [r7, #16]
   return(result);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e5      	bne.n	8008d1a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008d56:	bf00      	nop
 8008d58:	3724      	adds	r7, #36	; 0x24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b095      	sub	sp, #84	; 0x54
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	330c      	adds	r3, #12
 8008d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d8a:	643a      	str	r2, [r7, #64]	; 0x40
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e5      	bne.n	8008d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e5      	bne.n	8008d9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d119      	bne.n	8008e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f023 0310 	bic.w	r3, r3, #16
 8008df0:	647b      	str	r3, [r7, #68]	; 0x44
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dfa:	61ba      	str	r2, [r7, #24]
 8008dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6979      	ldr	r1, [r7, #20]
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	613b      	str	r3, [r7, #16]
   return(result);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e1c:	bf00      	nop
 8008e1e:	3754      	adds	r7, #84	; 0x54
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff feaa 	bl	8008b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b21      	cmp	r3, #33	; 0x21
 8008e62:	d13e      	bne.n	8008ee2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6c:	d114      	bne.n	8008e98 <UART_Transmit_IT+0x48>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d110      	bne.n	8008e98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	1c9a      	adds	r2, r3, #2
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	621a      	str	r2, [r3, #32]
 8008e96:	e008      	b.n	8008eaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	1c59      	adds	r1, r3, #1
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6211      	str	r1, [r2, #32]
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10f      	bne.n	8008ede <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7f9 ff46 	bl	8002da2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08c      	sub	sp, #48	; 0x30
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b22      	cmp	r3, #34	; 0x22
 8008f32:	f040 80ab 	bne.w	800908c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3e:	d117      	bne.n	8008f70 <UART_Receive_IT+0x50>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d113      	bne.n	8008f70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	629a      	str	r2, [r3, #40]	; 0x28
 8008f6e:	e026      	b.n	8008fbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f82:	d007      	beq.n	8008f94 <UART_Receive_IT+0x74>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <UART_Receive_IT+0x82>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e008      	b.n	8008fb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d15a      	bne.n	8009088 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0220 	bic.w	r2, r2, #32
 8008fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0201 	bic.w	r2, r2, #1
 8009000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	2b01      	cmp	r3, #1
 8009010:	d135      	bne.n	800907e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	613b      	str	r3, [r7, #16]
   return(result);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f023 0310 	bic.w	r3, r3, #16
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009038:	623a      	str	r2, [r7, #32]
 800903a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	69f9      	ldr	r1, [r7, #28]
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	61bb      	str	r3, [r7, #24]
   return(result);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0310 	and.w	r3, r3, #16
 8009056:	2b10      	cmp	r3, #16
 8009058:	d10a      	bne.n	8009070 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fd9a 	bl	8008bb0 <HAL_UARTEx_RxEventCallback>
 800907c:	e002      	b.n	8009084 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fd82 	bl	8008b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e002      	b.n	800908e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	e000      	b.n	800908e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3730      	adds	r7, #48	; 0x30
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800909c:	b0c0      	sub	sp, #256	; 0x100
 800909e:	af00      	add	r7, sp, #0
 80090a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b4:	68d9      	ldr	r1, [r3, #12]
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	ea40 0301 	orr.w	r3, r0, r1
 80090c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	431a      	orrs	r2, r3
 80090d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	4313      	orrs	r3, r2
 80090e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090f0:	f021 010c 	bic.w	r1, r1, #12
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090fe:	430b      	orrs	r3, r1
 8009100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800910e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009112:	6999      	ldr	r1, [r3, #24]
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	ea40 0301 	orr.w	r3, r0, r1
 800911e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b8f      	ldr	r3, [pc, #572]	; (8009364 <UART_SetConfig+0x2cc>)
 8009128:	429a      	cmp	r2, r3
 800912a:	d005      	beq.n	8009138 <UART_SetConfig+0xa0>
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	4b8d      	ldr	r3, [pc, #564]	; (8009368 <UART_SetConfig+0x2d0>)
 8009134:	429a      	cmp	r2, r3
 8009136:	d104      	bne.n	8009142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009138:	f7fe fb20 	bl	800777c <HAL_RCC_GetPCLK2Freq>
 800913c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009140:	e003      	b.n	800914a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009142:	f7fe fb07 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8009146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800914a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009154:	f040 810c 	bne.w	8009370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800915c:	2200      	movs	r2, #0
 800915e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800916a:	4622      	mov	r2, r4
 800916c:	462b      	mov	r3, r5
 800916e:	1891      	adds	r1, r2, r2
 8009170:	65b9      	str	r1, [r7, #88]	; 0x58
 8009172:	415b      	adcs	r3, r3
 8009174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800917a:	4621      	mov	r1, r4
 800917c:	eb12 0801 	adds.w	r8, r2, r1
 8009180:	4629      	mov	r1, r5
 8009182:	eb43 0901 	adc.w	r9, r3, r1
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800919a:	4690      	mov	r8, r2
 800919c:	4699      	mov	r9, r3
 800919e:	4623      	mov	r3, r4
 80091a0:	eb18 0303 	adds.w	r3, r8, r3
 80091a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091a8:	462b      	mov	r3, r5
 80091aa:	eb49 0303 	adc.w	r3, r9, r3
 80091ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091c6:	460b      	mov	r3, r1
 80091c8:	18db      	adds	r3, r3, r3
 80091ca:	653b      	str	r3, [r7, #80]	; 0x50
 80091cc:	4613      	mov	r3, r2
 80091ce:	eb42 0303 	adc.w	r3, r2, r3
 80091d2:	657b      	str	r3, [r7, #84]	; 0x54
 80091d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80091dc:	f7f7 fd8c 	bl	8000cf8 <__aeabi_uldivmod>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4b61      	ldr	r3, [pc, #388]	; (800936c <UART_SetConfig+0x2d4>)
 80091e6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	011c      	lsls	r4, r3, #4
 80091ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80091fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009200:	4642      	mov	r2, r8
 8009202:	464b      	mov	r3, r9
 8009204:	1891      	adds	r1, r2, r2
 8009206:	64b9      	str	r1, [r7, #72]	; 0x48
 8009208:	415b      	adcs	r3, r3
 800920a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800920c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009210:	4641      	mov	r1, r8
 8009212:	eb12 0a01 	adds.w	sl, r2, r1
 8009216:	4649      	mov	r1, r9
 8009218:	eb43 0b01 	adc.w	fp, r3, r1
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800922c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009230:	4692      	mov	sl, r2
 8009232:	469b      	mov	fp, r3
 8009234:	4643      	mov	r3, r8
 8009236:	eb1a 0303 	adds.w	r3, sl, r3
 800923a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800923e:	464b      	mov	r3, r9
 8009240:	eb4b 0303 	adc.w	r3, fp, r3
 8009244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800925c:	460b      	mov	r3, r1
 800925e:	18db      	adds	r3, r3, r3
 8009260:	643b      	str	r3, [r7, #64]	; 0x40
 8009262:	4613      	mov	r3, r2
 8009264:	eb42 0303 	adc.w	r3, r2, r3
 8009268:	647b      	str	r3, [r7, #68]	; 0x44
 800926a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800926e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009272:	f7f7 fd41 	bl	8000cf8 <__aeabi_uldivmod>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4611      	mov	r1, r2
 800927c:	4b3b      	ldr	r3, [pc, #236]	; (800936c <UART_SetConfig+0x2d4>)
 800927e:	fba3 2301 	umull	r2, r3, r3, r1
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	2264      	movs	r2, #100	; 0x64
 8009286:	fb02 f303 	mul.w	r3, r2, r3
 800928a:	1acb      	subs	r3, r1, r3
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009292:	4b36      	ldr	r3, [pc, #216]	; (800936c <UART_SetConfig+0x2d4>)
 8009294:	fba3 2302 	umull	r2, r3, r3, r2
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092a0:	441c      	add	r4, r3
 80092a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	1891      	adds	r1, r2, r2
 80092ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80092bc:	415b      	adcs	r3, r3
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092c4:	4641      	mov	r1, r8
 80092c6:	1851      	adds	r1, r2, r1
 80092c8:	6339      	str	r1, [r7, #48]	; 0x30
 80092ca:	4649      	mov	r1, r9
 80092cc:	414b      	adcs	r3, r1
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80092dc:	4659      	mov	r1, fp
 80092de:	00cb      	lsls	r3, r1, #3
 80092e0:	4651      	mov	r1, sl
 80092e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092e6:	4651      	mov	r1, sl
 80092e8:	00ca      	lsls	r2, r1, #3
 80092ea:	4610      	mov	r0, r2
 80092ec:	4619      	mov	r1, r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	4642      	mov	r2, r8
 80092f2:	189b      	adds	r3, r3, r2
 80092f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092f8:	464b      	mov	r3, r9
 80092fa:	460a      	mov	r2, r1
 80092fc:	eb42 0303 	adc.w	r3, r2, r3
 8009300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009318:	460b      	mov	r3, r1
 800931a:	18db      	adds	r3, r3, r3
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
 800931e:	4613      	mov	r3, r2
 8009320:	eb42 0303 	adc.w	r3, r2, r3
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800932a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800932e:	f7f7 fce3 	bl	8000cf8 <__aeabi_uldivmod>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4b0d      	ldr	r3, [pc, #52]	; (800936c <UART_SetConfig+0x2d4>)
 8009338:	fba3 1302 	umull	r1, r3, r3, r2
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	2164      	movs	r1, #100	; 0x64
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	3332      	adds	r3, #50	; 0x32
 800934a:	4a08      	ldr	r2, [pc, #32]	; (800936c <UART_SetConfig+0x2d4>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	f003 0207 	and.w	r2, r3, #7
 8009356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4422      	add	r2, r4
 800935e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009360:	e105      	b.n	800956e <UART_SetConfig+0x4d6>
 8009362:	bf00      	nop
 8009364:	40011000 	.word	0x40011000
 8009368:	40011400 	.word	0x40011400
 800936c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009374:	2200      	movs	r2, #0
 8009376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800937a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800937e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009382:	4642      	mov	r2, r8
 8009384:	464b      	mov	r3, r9
 8009386:	1891      	adds	r1, r2, r2
 8009388:	6239      	str	r1, [r7, #32]
 800938a:	415b      	adcs	r3, r3
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
 800938e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009392:	4641      	mov	r1, r8
 8009394:	1854      	adds	r4, r2, r1
 8009396:	4649      	mov	r1, r9
 8009398:	eb43 0501 	adc.w	r5, r3, r1
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	00eb      	lsls	r3, r5, #3
 80093a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093aa:	00e2      	lsls	r2, r4, #3
 80093ac:	4614      	mov	r4, r2
 80093ae:	461d      	mov	r5, r3
 80093b0:	4643      	mov	r3, r8
 80093b2:	18e3      	adds	r3, r4, r3
 80093b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093b8:	464b      	mov	r3, r9
 80093ba:	eb45 0303 	adc.w	r3, r5, r3
 80093be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80093de:	4629      	mov	r1, r5
 80093e0:	008b      	lsls	r3, r1, #2
 80093e2:	4621      	mov	r1, r4
 80093e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093e8:	4621      	mov	r1, r4
 80093ea:	008a      	lsls	r2, r1, #2
 80093ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093f0:	f7f7 fc82 	bl	8000cf8 <__aeabi_uldivmod>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4b60      	ldr	r3, [pc, #384]	; (800957c <UART_SetConfig+0x4e4>)
 80093fa:	fba3 2302 	umull	r2, r3, r3, r2
 80093fe:	095b      	lsrs	r3, r3, #5
 8009400:	011c      	lsls	r4, r3, #4
 8009402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009406:	2200      	movs	r2, #0
 8009408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800940c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009414:	4642      	mov	r2, r8
 8009416:	464b      	mov	r3, r9
 8009418:	1891      	adds	r1, r2, r2
 800941a:	61b9      	str	r1, [r7, #24]
 800941c:	415b      	adcs	r3, r3
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009424:	4641      	mov	r1, r8
 8009426:	1851      	adds	r1, r2, r1
 8009428:	6139      	str	r1, [r7, #16]
 800942a:	4649      	mov	r1, r9
 800942c:	414b      	adcs	r3, r1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800943c:	4659      	mov	r1, fp
 800943e:	00cb      	lsls	r3, r1, #3
 8009440:	4651      	mov	r1, sl
 8009442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009446:	4651      	mov	r1, sl
 8009448:	00ca      	lsls	r2, r1, #3
 800944a:	4610      	mov	r0, r2
 800944c:	4619      	mov	r1, r3
 800944e:	4603      	mov	r3, r0
 8009450:	4642      	mov	r2, r8
 8009452:	189b      	adds	r3, r3, r2
 8009454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009458:	464b      	mov	r3, r9
 800945a:	460a      	mov	r2, r1
 800945c:	eb42 0303 	adc.w	r3, r2, r3
 8009460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	67bb      	str	r3, [r7, #120]	; 0x78
 800946e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800947c:	4649      	mov	r1, r9
 800947e:	008b      	lsls	r3, r1, #2
 8009480:	4641      	mov	r1, r8
 8009482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009486:	4641      	mov	r1, r8
 8009488:	008a      	lsls	r2, r1, #2
 800948a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800948e:	f7f7 fc33 	bl	8000cf8 <__aeabi_uldivmod>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4b39      	ldr	r3, [pc, #228]	; (800957c <UART_SetConfig+0x4e4>)
 8009498:	fba3 1302 	umull	r1, r3, r3, r2
 800949c:	095b      	lsrs	r3, r3, #5
 800949e:	2164      	movs	r1, #100	; 0x64
 80094a0:	fb01 f303 	mul.w	r3, r1, r3
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	3332      	adds	r3, #50	; 0x32
 80094aa:	4a34      	ldr	r2, [pc, #208]	; (800957c <UART_SetConfig+0x4e4>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094b6:	441c      	add	r4, r3
 80094b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094bc:	2200      	movs	r2, #0
 80094be:	673b      	str	r3, [r7, #112]	; 0x70
 80094c0:	677a      	str	r2, [r7, #116]	; 0x74
 80094c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094c6:	4642      	mov	r2, r8
 80094c8:	464b      	mov	r3, r9
 80094ca:	1891      	adds	r1, r2, r2
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	415b      	adcs	r3, r3
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094d6:	4641      	mov	r1, r8
 80094d8:	1851      	adds	r1, r2, r1
 80094da:	6039      	str	r1, [r7, #0]
 80094dc:	4649      	mov	r1, r9
 80094de:	414b      	adcs	r3, r1
 80094e0:	607b      	str	r3, [r7, #4]
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094ee:	4659      	mov	r1, fp
 80094f0:	00cb      	lsls	r3, r1, #3
 80094f2:	4651      	mov	r1, sl
 80094f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094f8:	4651      	mov	r1, sl
 80094fa:	00ca      	lsls	r2, r1, #3
 80094fc:	4610      	mov	r0, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	4603      	mov	r3, r0
 8009502:	4642      	mov	r2, r8
 8009504:	189b      	adds	r3, r3, r2
 8009506:	66bb      	str	r3, [r7, #104]	; 0x68
 8009508:	464b      	mov	r3, r9
 800950a:	460a      	mov	r2, r1
 800950c:	eb42 0303 	adc.w	r3, r2, r3
 8009510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	663b      	str	r3, [r7, #96]	; 0x60
 800951c:	667a      	str	r2, [r7, #100]	; 0x64
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	f04f 0300 	mov.w	r3, #0
 8009526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800952a:	4649      	mov	r1, r9
 800952c:	008b      	lsls	r3, r1, #2
 800952e:	4641      	mov	r1, r8
 8009530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009534:	4641      	mov	r1, r8
 8009536:	008a      	lsls	r2, r1, #2
 8009538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800953c:	f7f7 fbdc 	bl	8000cf8 <__aeabi_uldivmod>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4b0d      	ldr	r3, [pc, #52]	; (800957c <UART_SetConfig+0x4e4>)
 8009546:	fba3 1302 	umull	r1, r3, r3, r2
 800954a:	095b      	lsrs	r3, r3, #5
 800954c:	2164      	movs	r1, #100	; 0x64
 800954e:	fb01 f303 	mul.w	r3, r1, r3
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	011b      	lsls	r3, r3, #4
 8009556:	3332      	adds	r3, #50	; 0x32
 8009558:	4a08      	ldr	r2, [pc, #32]	; (800957c <UART_SetConfig+0x4e4>)
 800955a:	fba2 2303 	umull	r2, r3, r2, r3
 800955e:	095b      	lsrs	r3, r3, #5
 8009560:	f003 020f 	and.w	r2, r3, #15
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4422      	add	r2, r4
 800956c:	609a      	str	r2, [r3, #8]
}
 800956e:	bf00      	nop
 8009570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009574:	46bd      	mov	sp, r7
 8009576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800957a:	bf00      	nop
 800957c:	51eb851f 	.word	0x51eb851f

08009580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009580:	b084      	sub	sp, #16
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	f107 001c 	add.w	r0, r7, #28
 800958e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b01      	cmp	r3, #1
 8009596:	d122      	bne.n	80095de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fbee 	bl	800adb4 <USB_CoreReset>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
 80095dc:	e01a      	b.n	8009614 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fbe2 	bl	800adb4 <USB_CoreReset>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
 8009606:	e005      	b.n	8009614 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b01      	cmp	r3, #1
 8009618:	d10b      	bne.n	8009632 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f043 0206 	orr.w	r2, r3, #6
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f043 0220 	orr.w	r2, r3, #32
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800963e:	b004      	add	sp, #16
 8009640:	4770      	bx	lr
	...

08009644 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d165      	bne.n	8009724 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	4a41      	ldr	r2, [pc, #260]	; (8009760 <USB_SetTurnaroundTime+0x11c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d906      	bls.n	800966e <USB_SetTurnaroundTime+0x2a>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4a40      	ldr	r2, [pc, #256]	; (8009764 <USB_SetTurnaroundTime+0x120>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d202      	bcs.n	800966e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009668:	230f      	movs	r3, #15
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	e062      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	4a3c      	ldr	r2, [pc, #240]	; (8009764 <USB_SetTurnaroundTime+0x120>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d306      	bcc.n	8009684 <USB_SetTurnaroundTime+0x40>
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	4a3b      	ldr	r2, [pc, #236]	; (8009768 <USB_SetTurnaroundTime+0x124>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d202      	bcs.n	8009684 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800967e:	230e      	movs	r3, #14
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e057      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	4a38      	ldr	r2, [pc, #224]	; (8009768 <USB_SetTurnaroundTime+0x124>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d306      	bcc.n	800969a <USB_SetTurnaroundTime+0x56>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4a37      	ldr	r2, [pc, #220]	; (800976c <USB_SetTurnaroundTime+0x128>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d202      	bcs.n	800969a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009694:	230d      	movs	r3, #13
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	e04c      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	4a33      	ldr	r2, [pc, #204]	; (800976c <USB_SetTurnaroundTime+0x128>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d306      	bcc.n	80096b0 <USB_SetTurnaroundTime+0x6c>
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4a32      	ldr	r2, [pc, #200]	; (8009770 <USB_SetTurnaroundTime+0x12c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d802      	bhi.n	80096b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80096aa:	230c      	movs	r3, #12
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e041      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4a2f      	ldr	r2, [pc, #188]	; (8009770 <USB_SetTurnaroundTime+0x12c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d906      	bls.n	80096c6 <USB_SetTurnaroundTime+0x82>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4a2e      	ldr	r2, [pc, #184]	; (8009774 <USB_SetTurnaroundTime+0x130>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d802      	bhi.n	80096c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096c0:	230b      	movs	r3, #11
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	e036      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4a2a      	ldr	r2, [pc, #168]	; (8009774 <USB_SetTurnaroundTime+0x130>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d906      	bls.n	80096dc <USB_SetTurnaroundTime+0x98>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4a29      	ldr	r2, [pc, #164]	; (8009778 <USB_SetTurnaroundTime+0x134>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d802      	bhi.n	80096dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096d6:	230a      	movs	r3, #10
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	e02b      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4a26      	ldr	r2, [pc, #152]	; (8009778 <USB_SetTurnaroundTime+0x134>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d906      	bls.n	80096f2 <USB_SetTurnaroundTime+0xae>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4a25      	ldr	r2, [pc, #148]	; (800977c <USB_SetTurnaroundTime+0x138>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d202      	bcs.n	80096f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096ec:	2309      	movs	r3, #9
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e020      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4a21      	ldr	r2, [pc, #132]	; (800977c <USB_SetTurnaroundTime+0x138>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d306      	bcc.n	8009708 <USB_SetTurnaroundTime+0xc4>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4a20      	ldr	r2, [pc, #128]	; (8009780 <USB_SetTurnaroundTime+0x13c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d802      	bhi.n	8009708 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009702:	2308      	movs	r3, #8
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e015      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4a1d      	ldr	r2, [pc, #116]	; (8009780 <USB_SetTurnaroundTime+0x13c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d906      	bls.n	800971e <USB_SetTurnaroundTime+0xda>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4a1c      	ldr	r2, [pc, #112]	; (8009784 <USB_SetTurnaroundTime+0x140>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d202      	bcs.n	800971e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009718:	2307      	movs	r3, #7
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e00a      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800971e:	2306      	movs	r3, #6
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	e007      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800972a:	2309      	movs	r3, #9
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	e001      	b.n	8009734 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009730:	2309      	movs	r3, #9
 8009732:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	029b      	lsls	r3, r3, #10
 8009748:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800974c:	431a      	orrs	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	00d8acbf 	.word	0x00d8acbf
 8009764:	00e4e1c0 	.word	0x00e4e1c0
 8009768:	00f42400 	.word	0x00f42400
 800976c:	01067380 	.word	0x01067380
 8009770:	011a499f 	.word	0x011a499f
 8009774:	01312cff 	.word	0x01312cff
 8009778:	014ca43f 	.word	0x014ca43f
 800977c:	016e3600 	.word	0x016e3600
 8009780:	01a6ab1f 	.word	0x01a6ab1f
 8009784:	01e84800 	.word	0x01e84800

08009788 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f043 0201 	orr.w	r2, r3, #1
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f023 0201 	bic.w	r2, r3, #1
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d115      	bne.n	800981a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097fa:	2001      	movs	r0, #1
 80097fc:	f7fa fa06 	bl	8003c0c <HAL_Delay>
      ms++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fa45 	bl	800ac96 <USB_GetMode>
 800980c:	4603      	mov	r3, r0
 800980e:	2b01      	cmp	r3, #1
 8009810:	d01e      	beq.n	8009850 <USB_SetCurrentMode+0x84>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b31      	cmp	r3, #49	; 0x31
 8009816:	d9f0      	bls.n	80097fa <USB_SetCurrentMode+0x2e>
 8009818:	e01a      	b.n	8009850 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d115      	bne.n	800984c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800982c:	2001      	movs	r0, #1
 800982e:	f7fa f9ed 	bl	8003c0c <HAL_Delay>
      ms++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 fa2c 	bl	800ac96 <USB_GetMode>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <USB_SetCurrentMode+0x84>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b31      	cmp	r3, #49	; 0x31
 8009848:	d9f0      	bls.n	800982c <USB_SetCurrentMode+0x60>
 800984a:	e001      	b.n	8009850 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e005      	b.n	800985c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b32      	cmp	r3, #50	; 0x32
 8009854:	d101      	bne.n	800985a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009864:	b084      	sub	sp, #16
 8009866:	b580      	push	{r7, lr}
 8009868:	b086      	sub	sp, #24
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800987e:	2300      	movs	r3, #0
 8009880:	613b      	str	r3, [r7, #16]
 8009882:	e009      	b.n	8009898 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	3340      	adds	r3, #64	; 0x40
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	2200      	movs	r2, #0
 8009890:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3301      	adds	r3, #1
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2b0e      	cmp	r3, #14
 800989c:	d9f2      	bls.n	8009884 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800989e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11c      	bne.n	80098de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098b2:	f043 0302 	orr.w	r3, r3, #2
 80098b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
 80098dc:	e00b      	b.n	80098f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098fc:	461a      	mov	r2, r3
 80098fe:	2300      	movs	r3, #0
 8009900:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009908:	4619      	mov	r1, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009910:	461a      	mov	r2, r3
 8009912:	680b      	ldr	r3, [r1, #0]
 8009914:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2b01      	cmp	r3, #1
 800991a:	d10c      	bne.n	8009936 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009922:	2100      	movs	r1, #0
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f965 	bl	8009bf4 <USB_SetDevSpeed>
 800992a:	e008      	b.n	800993e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800992c:	2101      	movs	r1, #1
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f960 	bl	8009bf4 <USB_SetDevSpeed>
 8009934:	e003      	b.n	800993e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009936:	2103      	movs	r1, #3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f95b 	bl	8009bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800993e:	2110      	movs	r1, #16
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f8f3 	bl	8009b2c <USB_FlushTxFifo>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f91f 	bl	8009b94 <USB_FlushRxFifo>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009966:	461a      	mov	r2, r3
 8009968:	2300      	movs	r3, #0
 800996a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009972:	461a      	mov	r2, r3
 8009974:	2300      	movs	r3, #0
 8009976:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997e:	461a      	mov	r2, r3
 8009980:	2300      	movs	r3, #0
 8009982:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009984:	2300      	movs	r3, #0
 8009986:	613b      	str	r3, [r7, #16]
 8009988:	e043      	b.n	8009a12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800999c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a0:	d118      	bne.n	80099d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b4:	461a      	mov	r2, r3
 80099b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	e013      	b.n	80099e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ca:	461a      	mov	r2, r3
 80099cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	e008      	b.n	80099e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e0:	461a      	mov	r2, r3
 80099e2:	2300      	movs	r3, #0
 80099e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	461a      	mov	r2, r3
 80099f4:	2300      	movs	r3, #0
 80099f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	461a      	mov	r2, r3
 8009a06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d3b7      	bcc.n	800998a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
 8009a1e:	e043      	b.n	8009aa8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a36:	d118      	bne.n	8009a6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10a      	bne.n	8009a54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	e013      	b.n	8009a7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a60:	461a      	mov	r2, r3
 8009a62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	e008      	b.n	8009a7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a76:	461a      	mov	r2, r3
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d3b7      	bcc.n	8009a20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ac2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ad0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d105      	bne.n	8009ae4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f043 0210 	orr.w	r2, r3, #16
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699a      	ldr	r2, [r3, #24]
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <USB_DevInit+0x2c4>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f043 0208 	orr.w	r2, r3, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d107      	bne.n	8009b18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b10:	f043 0304 	orr.w	r3, r3, #4
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b24:	b004      	add	sp, #16
 8009b26:	4770      	bx	lr
 8009b28:	803c3800 	.word	0x803c3800

08009b2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a13      	ldr	r2, [pc, #76]	; (8009b90 <USB_FlushTxFifo+0x64>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d901      	bls.n	8009b4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e01b      	b.n	8009b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	daf2      	bge.n	8009b3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	019b      	lsls	r3, r3, #6
 8009b5c:	f043 0220 	orr.w	r2, r3, #32
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <USB_FlushTxFifo+0x64>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d901      	bls.n	8009b76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e006      	b.n	8009b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d0f0      	beq.n	8009b64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	00030d40 	.word	0x00030d40

08009b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a11      	ldr	r2, [pc, #68]	; (8009bf0 <USB_FlushRxFifo+0x5c>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d901      	bls.n	8009bb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e018      	b.n	8009be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	daf2      	bge.n	8009ba0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2210      	movs	r2, #16
 8009bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <USB_FlushRxFifo+0x5c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d901      	bls.n	8009bd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e006      	b.n	8009be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	f003 0310 	and.w	r3, r3, #16
 8009bde:	2b10      	cmp	r3, #16
 8009be0:	d0f0      	beq.n	8009bc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	00030d40 	.word	0x00030d40

08009bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 0306 	and.w	r3, r3, #6
 8009c3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
 8009c4a:	e00a      	b.n	8009c62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d002      	beq.n	8009c58 <USB_GetDevSpeed+0x32>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b06      	cmp	r3, #6
 8009c56:	d102      	bne.n	8009c5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	75fb      	strb	r3, [r7, #23]
 8009c5c:	e001      	b.n	8009c62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c5e:	230f      	movs	r3, #15
 8009c60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d13a      	bne.n	8009d02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009caa:	4313      	orrs	r3, r2
 8009cac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d155      	bne.n	8009d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ce0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	e036      	b.n	8009d70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	69da      	ldr	r2, [r3, #28]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	2101      	movs	r1, #1
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	041b      	lsls	r3, r3, #16
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d11a      	bne.n	8009d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d56:	430b      	orrs	r3, r1
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	0151      	lsls	r1, r2, #5
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	440a      	add	r2, r1
 8009d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d161      	bne.n	8009e60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db2:	d11f      	bne.n	8009df4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	0151      	lsls	r1, r2, #5
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	440a      	add	r2, r1
 8009dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009df2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	2101      	movs	r1, #1
 8009e06:	fa01 f303 	lsl.w	r3, r1, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	43db      	mvns	r3, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e14:	4013      	ands	r3, r2
 8009e16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1e:	69da      	ldr	r2, [r3, #28]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	2101      	movs	r1, #1
 8009e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	43db      	mvns	r3, r3
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e38:	4013      	ands	r3, r2
 8009e3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	0159      	lsls	r1, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	440b      	add	r3, r1
 8009e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e56:	4619      	mov	r1, r3
 8009e58:	4b35      	ldr	r3, [pc, #212]	; (8009f30 <USB_DeactivateEndpoint+0x1b0>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	600b      	str	r3, [r1, #0]
 8009e5e:	e060      	b.n	8009f22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e76:	d11f      	bne.n	8009eb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	0151      	lsls	r1, r2, #5
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	440a      	add	r2, r1
 8009eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	2101      	movs	r1, #1
 8009eca:	fa01 f303 	lsl.w	r3, r1, r3
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	43db      	mvns	r3, r3
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed8:	4013      	ands	r3, r2
 8009eda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	2101      	movs	r1, #1
 8009eee:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef2:	041b      	lsls	r3, r3, #16
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009efc:	4013      	ands	r3, r2
 8009efe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	0159      	lsls	r1, r3, #5
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	440b      	add	r3, r1
 8009f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <USB_DeactivateEndpoint+0x1b4>)
 8009f1e:	4013      	ands	r3, r2
 8009f20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	ec337800 	.word	0xec337800
 8009f34:	eff37800 	.word	0xeff37800

08009f38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	; 0x28
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	f040 815c 	bne.w	800a212 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d132      	bne.n	8009fc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	0151      	lsls	r1, r2, #5
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	440a      	add	r2, r1
 8009f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	69ba      	ldr	r2, [r7, #24]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	69fa      	ldr	r2, [r7, #28]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc0:	0cdb      	lsrs	r3, r3, #19
 8009fc2:	04db      	lsls	r3, r3, #19
 8009fc4:	6113      	str	r3, [r2, #16]
 8009fc6:	e074      	b.n	800a0b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe2:	0cdb      	lsrs	r3, r3, #19
 8009fe4:	04db      	lsls	r3, r3, #19
 8009fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	6999      	ldr	r1, [r3, #24]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	440b      	add	r3, r1
 800a024:	1e59      	subs	r1, r3, #1
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a02e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a030:	4b9d      	ldr	r3, [pc, #628]	; (800a2a8 <USB_EPStartXfer+0x370>)
 800a032:	400b      	ands	r3, r1
 800a034:	69b9      	ldr	r1, [r7, #24]
 800a036:	0148      	lsls	r0, r1, #5
 800a038:	69f9      	ldr	r1, [r7, #28]
 800a03a:	4401      	add	r1, r0
 800a03c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a040:	4313      	orrs	r3, r2
 800a042:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a050:	691a      	ldr	r2, [r3, #16]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05a:	69b9      	ldr	r1, [r7, #24]
 800a05c:	0148      	lsls	r0, r1, #5
 800a05e:	69f9      	ldr	r1, [r7, #28]
 800a060:	4401      	add	r1, r0
 800a062:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a066:	4313      	orrs	r3, r2
 800a068:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d11f      	bne.n	800a0b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	440a      	add	r2, r1
 800a088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a090:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	69fa      	ldr	r2, [r7, #28]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d14b      	bne.n	800a150 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d009      	beq.n	800a0d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	791b      	ldrb	r3, [r3, #4]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d128      	bne.n	800a12e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d110      	bne.n	800a10e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	0151      	lsls	r1, r2, #5
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	440a      	add	r2, r1
 800a102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	e00f      	b.n	800a12e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a12c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	0151      	lsls	r1, r2, #5
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	440a      	add	r2, r1
 800a144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e133      	b.n	800a3b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a16a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a16e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	791b      	ldrb	r3, [r3, #4]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d015      	beq.n	800a1a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 811b 	beq.w	800a3b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	2101      	movs	r1, #1
 800a194:	fa01 f303 	lsl.w	r3, r1, r3
 800a198:	69f9      	ldr	r1, [r7, #28]
 800a19a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	634b      	str	r3, [r1, #52]	; 0x34
 800a1a2:	e109      	b.n	800a3b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	0151      	lsls	r1, r2, #5
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	440a      	add	r2, r1
 800a1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	e00f      	b.n	800a1f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	0151      	lsls	r1, r2, #5
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	440a      	add	r2, r1
 800a1ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6919      	ldr	r1, [r3, #16]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	b298      	uxth	r0, r3
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4603      	mov	r3, r0
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fade 	bl	800a7cc <USB_WritePacket>
 800a210:	e0d2      	b.n	800a3b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	0151      	lsls	r1, r2, #5
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	440a      	add	r2, r1
 800a228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a22c:	0cdb      	lsrs	r3, r3, #19
 800a22e:	04db      	lsls	r3, r3, #19
 800a230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	0151      	lsls	r1, r2, #5
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	440a      	add	r2, r1
 800a248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a254:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d126      	bne.n	800a2ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a274:	69b9      	ldr	r1, [r7, #24]
 800a276:	0148      	lsls	r0, r1, #5
 800a278:	69f9      	ldr	r1, [r7, #28]
 800a27a:	4401      	add	r1, r0
 800a27c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a280:	4313      	orrs	r3, r2
 800a282:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a29e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2a2:	6113      	str	r3, [r2, #16]
 800a2a4:	e03a      	b.n	800a31c <USB_EPStartXfer+0x3e4>
 800a2a6:	bf00      	nop
 800a2a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	699a      	ldr	r2, [r3, #24]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	1e5a      	subs	r2, r3, #1
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	8afa      	ldrh	r2, [r7, #22]
 800a2c8:	fb03 f202 	mul.w	r2, r3, r2
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	8afb      	ldrh	r3, [r7, #22]
 800a2e0:	04d9      	lsls	r1, r3, #19
 800a2e2:	4b38      	ldr	r3, [pc, #224]	; (800a3c4 <USB_EPStartXfer+0x48c>)
 800a2e4:	400b      	ands	r3, r1
 800a2e6:	69b9      	ldr	r1, [r7, #24]
 800a2e8:	0148      	lsls	r0, r1, #5
 800a2ea:	69f9      	ldr	r1, [r7, #28]
 800a2ec:	4401      	add	r1, r0
 800a2ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a30c:	69b9      	ldr	r1, [r7, #24]
 800a30e:	0148      	lsls	r0, r1, #5
 800a310:	69f9      	ldr	r1, [r7, #28]
 800a312:	4401      	add	r1, r0
 800a314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a318:	4313      	orrs	r3, r2
 800a31a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10d      	bne.n	800a33e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6919      	ldr	r1, [r3, #16]
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a33a:	460a      	mov	r2, r1
 800a33c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d128      	bne.n	800a398 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a352:	2b00      	cmp	r3, #0
 800a354:	d110      	bne.n	800a378 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	e00f      	b.n	800a398 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a396:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	0151      	lsls	r1, r2, #5
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	440a      	add	r2, r1
 800a3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	1ff80000 	.word	0x1ff80000

0800a3c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	f040 80ce 	bne.w	800a586 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d132      	bne.n	800a458 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	0151      	lsls	r1, r2, #5
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	440a      	add	r2, r1
 800a408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a450:	0cdb      	lsrs	r3, r3, #19
 800a452:	04db      	lsls	r3, r3, #19
 800a454:	6113      	str	r3, [r2, #16]
 800a456:	e04e      	b.n	800a4f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a472:	0cdb      	lsrs	r3, r3, #19
 800a474:	04db      	lsls	r3, r3, #19
 800a476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a49a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	699a      	ldr	r2, [r3, #24]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d903      	bls.n	800a4b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	0151      	lsls	r1, r2, #5
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	440a      	add	r2, r1
 800a4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4e6:	6939      	ldr	r1, [r7, #16]
 800a4e8:	0148      	lsls	r0, r1, #5
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	4401      	add	r1, r0
 800a4ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d11e      	bne.n	800a53a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d009      	beq.n	800a518 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a510:	461a      	mov	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	e097      	b.n	800a66a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a558:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8083 	beq.w	800a66a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a56a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	2101      	movs	r1, #1
 800a576:	fa01 f303 	lsl.w	r3, r1, r3
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a580:	4313      	orrs	r3, r2
 800a582:	634b      	str	r3, [r1, #52]	; 0x34
 800a584:	e071      	b.n	800a66a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5a0:	0cdb      	lsrs	r3, r3, #19
 800a5a2:	04db      	lsls	r3, r3, #19
 800a5a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	0151      	lsls	r1, r2, #5
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	440a      	add	r2, r1
 800a5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a618:	6939      	ldr	r1, [r7, #16]
 800a61a:	0148      	lsls	r0, r1, #5
 800a61c:	6979      	ldr	r1, [r7, #20]
 800a61e:	4401      	add	r1, r0
 800a620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a624:	4313      	orrs	r3, r2
 800a626:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d10d      	bne.n	800a64a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d009      	beq.n	800a64a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6919      	ldr	r1, [r3, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a646:	460a      	mov	r2, r1
 800a648:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	0151      	lsls	r1, r2, #5
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	440a      	add	r2, r1
 800a660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	371c      	adds	r7, #28
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d14a      	bne.n	800a72c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6ae:	f040 8086 	bne.w	800a7be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	7812      	ldrb	r2, [r2, #0]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f242 7210 	movw	r2, #10000	; 0x2710
 800a706:	4293      	cmp	r3, r2
 800a708:	d902      	bls.n	800a710 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	75fb      	strb	r3, [r7, #23]
          break;
 800a70e:	e056      	b.n	800a7be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a728:	d0e7      	beq.n	800a6fa <USB_EPStopXfer+0x82>
 800a72a:	e048      	b.n	800a7be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a744:	d13b      	bne.n	800a7be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	7812      	ldrb	r2, [r2, #0]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a768:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a78c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f242 7210 	movw	r2, #10000	; 0x2710
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d902      	bls.n	800a7a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7a2:	e00c      	b.n	800a7be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7bc:	d0e7      	beq.n	800a78e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b089      	sub	sp, #36	; 0x24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	461a      	mov	r2, r3
 800a7da:	460b      	mov	r3, r1
 800a7dc:	71fb      	strb	r3, [r7, #7]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d123      	bne.n	800a83a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7f2:	88bb      	ldrh	r3, [r7, #4]
 800a7f4:	3303      	adds	r3, #3
 800a7f6:	089b      	lsrs	r3, r3, #2
 800a7f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61bb      	str	r3, [r7, #24]
 800a7fe:	e018      	b.n	800a832 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	031a      	lsls	r2, r3, #12
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	4413      	add	r3, r2
 800a808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80c:	461a      	mov	r2, r3
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3301      	adds	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3301      	adds	r3, #1
 800a81e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	3301      	adds	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	3301      	adds	r3, #1
 800a82a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	3301      	adds	r3, #1
 800a830:	61bb      	str	r3, [r7, #24]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	d3e2      	bcc.n	800a800 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3724      	adds	r7, #36	; 0x24
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a848:	b480      	push	{r7}
 800a84a:	b08b      	sub	sp, #44	; 0x2c
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	089b      	lsrs	r3, r3, #2
 800a862:	b29b      	uxth	r3, r3
 800a864:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a86e:	2300      	movs	r3, #0
 800a870:	623b      	str	r3, [r7, #32]
 800a872:	e014      	b.n	800a89e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	3301      	adds	r3, #1
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	3301      	adds	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	3301      	adds	r3, #1
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	3301      	adds	r3, #1
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	3301      	adds	r3, #1
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	6a3a      	ldr	r2, [r7, #32]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d3e6      	bcc.n	800a874 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8a6:	8bfb      	ldrh	r3, [r7, #30]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01e      	beq.n	800a8ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f107 0310 	add.w	r3, r7, #16
 800a8bc:	6812      	ldr	r2, [r2, #0]
 800a8be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	701a      	strb	r2, [r3, #0]
      i++;
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	3301      	adds	r3, #1
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a8de:	8bfb      	ldrh	r3, [r7, #30]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8e4:	8bfb      	ldrh	r3, [r7, #30]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1ea      	bne.n	800a8c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	372c      	adds	r7, #44	; 0x2c
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d12c      	bne.n	800a96e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	db12      	blt.n	800a94c <USB_EPSetStall+0x54>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00f      	beq.n	800a94c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	440a      	add	r2, r1
 800a942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a94a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	e02b      	b.n	800a9c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	db12      	blt.n	800a9a6 <USB_EPSetStall+0xae>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00f      	beq.n	800a9a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	0151      	lsls	r1, r2, #5
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	440a      	add	r2, r1
 800a99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d128      	bne.n	800aa42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	791b      	ldrb	r3, [r3, #4]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d003      	beq.n	800aa20 <USB_EPClearStall+0x4c>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d138      	bne.n	800aa92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	0151      	lsls	r1, r2, #5
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	440a      	add	r2, r1
 800aa36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e027      	b.n	800aa92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	0151      	lsls	r1, r2, #5
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	440a      	add	r2, r1
 800aa58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	791b      	ldrb	r3, [r3, #4]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d003      	beq.n	800aa72 <USB_EPClearStall+0x9e>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d10f      	bne.n	800aa92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aabe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aac2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aad4:	68f9      	ldr	r1, [r7, #12]
 800aad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aada:	4313      	orrs	r3, r2
 800aadc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1a:	f023 0302 	bic.w	r3, r3, #2
 800ab1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b085      	sub	sp, #20
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab48:	f023 0303 	bic.w	r3, r3, #3
 800ab4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4013      	ands	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab88:	68fb      	ldr	r3, [r7, #12]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	4013      	ands	r3, r2
 800abb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	0c1b      	lsrs	r3, r3, #16
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	4013      	ands	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	b29b      	uxth	r3, r3
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b085      	sub	sp, #20
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	460b      	mov	r3, r1
 800ac08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b087      	sub	sp, #28
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	f003 030f 	and.w	r3, r3, #15
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6a:	01db      	lsls	r3, r3, #7
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4013      	ands	r3, r2
 800ac86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac88:	68bb      	ldr	r3, [r7, #8]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	f003 0301 	and.w	r3, r3, #1
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800accc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800acd0:	f023 0307 	bic.w	r3, r3, #7
 800acd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ace4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	460b      	mov	r3, r1
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	333c      	adds	r3, #60	; 0x3c
 800ad0e:	3304      	adds	r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	4a26      	ldr	r2, [pc, #152]	; (800adb0 <USB_EP0_OutStart+0xb8>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d90a      	bls.n	800ad32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad2c:	d101      	bne.n	800ad32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e037      	b.n	800ada2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad38:	461a      	mov	r2, r3
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad60:	f043 0318 	orr.w	r3, r3, #24
 800ad64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad7a:	7afb      	ldrb	r3, [r7, #11]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d10f      	bne.n	800ada0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad86:	461a      	mov	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ad9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	4f54300a 	.word	0x4f54300a

0800adb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3301      	adds	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	4a13      	ldr	r2, [pc, #76]	; (800ae18 <USB_CoreReset+0x64>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d901      	bls.n	800add2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e01b      	b.n	800ae0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	daf2      	bge.n	800adc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f043 0201 	orr.w	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3301      	adds	r3, #1
 800adee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a09      	ldr	r2, [pc, #36]	; (800ae18 <USB_CoreReset+0x64>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d901      	bls.n	800adfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e006      	b.n	800ae0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d0f0      	beq.n	800adea <USB_CoreReset+0x36>

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	00030d40 	.word	0x00030d40

0800ae1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae2c:	f002 fc9e 	bl	800d76c <USBD_static_malloc>
 800ae30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d109      	bne.n	800ae4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	32b0      	adds	r2, #176	; 0xb0
 800ae42:	2100      	movs	r1, #0
 800ae44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e0d4      	b.n	800aff6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae50:	2100      	movs	r1, #0
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f002 fcf8 	bl	800d848 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	32b0      	adds	r2, #176	; 0xb0
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	32b0      	adds	r2, #176	; 0xb0
 800ae72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7c1b      	ldrb	r3, [r3, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d138      	bne.n	800aef6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae84:	4b5e      	ldr	r3, [pc, #376]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800ae86:	7819      	ldrb	r1, [r3, #0]
 800ae88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f002 fb49 	bl	800d526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae94:	4b5a      	ldr	r3, [pc, #360]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 020f 	and.w	r2, r3, #15
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	440b      	add	r3, r1
 800aea8:	3324      	adds	r3, #36	; 0x24
 800aeaa:	2201      	movs	r2, #1
 800aeac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aeae:	4b55      	ldr	r3, [pc, #340]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800aeb0:	7819      	ldrb	r1, [r3, #0]
 800aeb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f002 fb34 	bl	800d526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aebe:	4b51      	ldr	r3, [pc, #324]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f003 020f 	and.w	r2, r3, #15
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	440b      	add	r3, r1
 800aed2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aed6:	2201      	movs	r2, #1
 800aed8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aeda:	4b4b      	ldr	r3, [pc, #300]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 020f 	and.w	r2, r3, #15
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	4613      	mov	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	3326      	adds	r3, #38	; 0x26
 800aef0:	2210      	movs	r2, #16
 800aef2:	801a      	strh	r2, [r3, #0]
 800aef4:	e035      	b.n	800af62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aef6:	4b42      	ldr	r3, [pc, #264]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800aef8:	7819      	ldrb	r1, [r3, #0]
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	2202      	movs	r2, #2
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f002 fb11 	bl	800d526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af04:	4b3e      	ldr	r3, [pc, #248]	; (800b000 <USBD_CDC_Init+0x1e4>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	2201      	movs	r2, #1
 800af1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af1e:	4b39      	ldr	r3, [pc, #228]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	2202      	movs	r2, #2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f002 fafd 	bl	800d526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af2c:	4b35      	ldr	r3, [pc, #212]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 020f 	and.w	r2, r3, #15
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	440b      	add	r3, r1
 800af40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af44:	2201      	movs	r2, #1
 800af46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af48:	4b2f      	ldr	r3, [pc, #188]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	f003 020f 	and.w	r2, r3, #15
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	4613      	mov	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	440b      	add	r3, r1
 800af5c:	3326      	adds	r3, #38	; 0x26
 800af5e:	2210      	movs	r2, #16
 800af60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af62:	4b29      	ldr	r3, [pc, #164]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af64:	7819      	ldrb	r1, [r3, #0]
 800af66:	2308      	movs	r3, #8
 800af68:	2203      	movs	r2, #3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f002 fadb 	bl	800d526 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af70:	4b25      	ldr	r3, [pc, #148]	; (800b008 <USBD_CDC_Init+0x1ec>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	f003 020f 	and.w	r2, r3, #15
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	440b      	add	r3, r1
 800af84:	3324      	adds	r3, #36	; 0x24
 800af86:	2201      	movs	r2, #1
 800af88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	33b0      	adds	r3, #176	; 0xb0
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afc0:	2302      	movs	r3, #2
 800afc2:	e018      	b.n	800aff6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7c1b      	ldrb	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afcc:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800afce:	7819      	ldrb	r1, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f002 fb92 	bl	800d704 <USBD_LL_PrepareReceive>
 800afe0:	e008      	b.n	800aff4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afe2:	4b08      	ldr	r3, [pc, #32]	; (800b004 <USBD_CDC_Init+0x1e8>)
 800afe4:	7819      	ldrb	r1, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afec:	2340      	movs	r3, #64	; 0x40
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f002 fb88 	bl	800d704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000123 	.word	0x20000123
 800b004:	20000124 	.word	0x20000124
 800b008:	20000125 	.word	0x20000125

0800b00c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b018:	4b3a      	ldr	r3, [pc, #232]	; (800b104 <USBD_CDC_DeInit+0xf8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f002 faa7 	bl	800d572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b024:	4b37      	ldr	r3, [pc, #220]	; (800b104 <USBD_CDC_DeInit+0xf8>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 020f 	and.w	r2, r3, #15
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	3324      	adds	r3, #36	; 0x24
 800b03a:	2200      	movs	r2, #0
 800b03c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b03e:	4b32      	ldr	r3, [pc, #200]	; (800b108 <USBD_CDC_DeInit+0xfc>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f002 fa94 	bl	800d572 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <USBD_CDC_DeInit+0xfc>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	f003 020f 	and.w	r2, r3, #15
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b062:	2200      	movs	r2, #0
 800b064:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b066:	4b29      	ldr	r3, [pc, #164]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f002 fa80 	bl	800d572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b072:	4b26      	ldr	r3, [pc, #152]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3324      	adds	r3, #36	; 0x24
 800b088:	2200      	movs	r2, #0
 800b08a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b08c:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <USBD_CDC_DeInit+0x100>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3326      	adds	r3, #38	; 0x26
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	32b0      	adds	r2, #176	; 0xb0
 800b0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01f      	beq.n	800b0f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	33b0      	adds	r3, #176	; 0xb0
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	32b0      	adds	r2, #176	; 0xb0
 800b0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f002 fb54 	bl	800d788 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32b0      	adds	r2, #176	; 0xb0
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000123 	.word	0x20000123
 800b108:	20000124 	.word	0x20000124
 800b10c:	20000125 	.word	0x20000125

0800b110 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32b0      	adds	r2, #176	; 0xb0
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e0bf      	b.n	800b2c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d050      	beq.n	800b1ee <USBD_CDC_Setup+0xde>
 800b14c:	2b20      	cmp	r3, #32
 800b14e:	f040 80af 	bne.w	800b2b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	88db      	ldrh	r3, [r3, #6]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d03a      	beq.n	800b1d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	da1b      	bge.n	800b19c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	33b0      	adds	r3, #176	; 0xb0
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b17a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	88d2      	ldrh	r2, [r2, #6]
 800b180:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	88db      	ldrh	r3, [r3, #6]
 800b186:	2b07      	cmp	r3, #7
 800b188:	bf28      	it	cs
 800b18a:	2307      	movcs	r3, #7
 800b18c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	89fa      	ldrh	r2, [r7, #14]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 fd89 	bl	800ccac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b19a:	e090      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	785a      	ldrb	r2, [r3, #1]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b3f      	cmp	r3, #63	; 0x3f
 800b1ac:	d803      	bhi.n	800b1b6 <USBD_CDC_Setup+0xa6>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88db      	ldrh	r3, [r3, #6]
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	e000      	b.n	800b1b8 <USBD_CDC_Setup+0xa8>
 800b1b6:	2240      	movs	r2, #64	; 0x40
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1be:	6939      	ldr	r1, [r7, #16]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fd9b 	bl	800cd04 <USBD_CtlPrepareRx>
      break;
 800b1ce:	e076      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	33b0      	adds	r3, #176	; 0xb0
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	7850      	ldrb	r0, [r2, #1]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	4798      	blx	r3
      break;
 800b1ec:	e067      	b.n	800b2be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	2b0b      	cmp	r3, #11
 800b1f4:	d851      	bhi.n	800b29a <USBD_CDC_Setup+0x18a>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <USBD_CDC_Setup+0xec>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b22d 	.word	0x0800b22d
 800b200:	0800b2a9 	.word	0x0800b2a9
 800b204:	0800b29b 	.word	0x0800b29b
 800b208:	0800b29b 	.word	0x0800b29b
 800b20c:	0800b29b 	.word	0x0800b29b
 800b210:	0800b29b 	.word	0x0800b29b
 800b214:	0800b29b 	.word	0x0800b29b
 800b218:	0800b29b 	.word	0x0800b29b
 800b21c:	0800b29b 	.word	0x0800b29b
 800b220:	0800b29b 	.word	0x0800b29b
 800b224:	0800b257 	.word	0x0800b257
 800b228:	0800b281 	.word	0x0800b281
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b03      	cmp	r3, #3
 800b236:	d107      	bne.n	800b248 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b238:	f107 030a 	add.w	r3, r7, #10
 800b23c:	2202      	movs	r2, #2
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fd33 	bl	800ccac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b246:	e032      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 fcbd 	bl	800cbca <USBD_CtlError>
            ret = USBD_FAIL;
 800b250:	2303      	movs	r3, #3
 800b252:	75fb      	strb	r3, [r7, #23]
          break;
 800b254:	e02b      	b.n	800b2ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d107      	bne.n	800b272 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b262:	f107 030d 	add.w	r3, r7, #13
 800b266:	2201      	movs	r2, #1
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fd1e 	bl	800ccac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b270:	e01d      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fca8 	bl	800cbca <USBD_CtlError>
            ret = USBD_FAIL;
 800b27a:	2303      	movs	r3, #3
 800b27c:	75fb      	strb	r3, [r7, #23]
          break;
 800b27e:	e016      	b.n	800b2ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d00f      	beq.n	800b2ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 fc9b 	bl	800cbca <USBD_CtlError>
            ret = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b298:	e008      	b.n	800b2ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fc94 	bl	800cbca <USBD_CtlError>
          ret = USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a6:	e002      	b.n	800b2ae <USBD_CDC_Setup+0x19e>
          break;
 800b2a8:	bf00      	nop
 800b2aa:	e008      	b.n	800b2be <USBD_CDC_Setup+0x1ae>
          break;
 800b2ac:	bf00      	nop
      }
      break;
 800b2ae:	e006      	b.n	800b2be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fc89 	bl	800cbca <USBD_CtlError>
      ret = USBD_FAIL;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b2bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	32b0      	adds	r2, #176	; 0xb0
 800b2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e065      	b.n	800b3be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	32b0      	adds	r2, #176	; 0xb0
 800b2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b300:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	f003 020f 	and.w	r2, r3, #15
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	4613      	mov	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	440b      	add	r3, r1
 800b314:	3318      	adds	r3, #24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d02f      	beq.n	800b37c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	f003 020f 	and.w	r2, r3, #15
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	440b      	add	r3, r1
 800b32e:	3318      	adds	r3, #24
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	f003 010f 	and.w	r1, r3, #15
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	460b      	mov	r3, r1
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	440b      	add	r3, r1
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4403      	add	r3, r0
 800b344:	3348      	adds	r3, #72	; 0x48
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	fbb2 f1f3 	udiv	r1, r2, r3
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b352:	2b00      	cmp	r3, #0
 800b354:	d112      	bne.n	800b37c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b356:	78fb      	ldrb	r3, [r7, #3]
 800b358:	f003 020f 	and.w	r2, r3, #15
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	3318      	adds	r3, #24
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b36e:	78f9      	ldrb	r1, [r7, #3]
 800b370:	2300      	movs	r3, #0
 800b372:	2200      	movs	r2, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f002 f9a4 	bl	800d6c2 <USBD_LL_Transmit>
 800b37a:	e01f      	b.n	800b3bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	; 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d010      	beq.n	800b3bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	33b0      	adds	r3, #176	; 0xb0
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b3b8:	78fa      	ldrb	r2, [r7, #3]
 800b3ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	32b0      	adds	r2, #176	; 0xb0
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	32b0      	adds	r2, #176	; 0xb0
 800b3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e01a      	b.n	800b42e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f002 f9a2 	bl	800d746 <USBD_LL_GetRxDataSize>
 800b402:	4602      	mov	r2, r0
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	33b0      	adds	r3, #176	; 0xb0
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b428:	4611      	mov	r1, r2
 800b42a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	; 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b454:	2303      	movs	r3, #3
 800b456:	e025      	b.n	800b4a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	33b0      	adds	r3, #176	; 0xb0
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01a      	beq.n	800b4a2 <USBD_CDC_EP0_RxReady+0x6c>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d015      	beq.n	800b4a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	33b0      	adds	r3, #176	; 0xb0
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b48e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b496:	b292      	uxth	r2, r2
 800b498:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	22ff      	movs	r2, #255	; 0xff
 800b49e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4b4:	2182      	movs	r1, #130	; 0x82
 800b4b6:	4818      	ldr	r0, [pc, #96]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4b8:	f000 fd4f 	bl	800bf5a <USBD_GetEpDesc>
 800b4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4815      	ldr	r0, [pc, #84]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4c2:	f000 fd4a 	bl	800bf5a <USBD_GetEpDesc>
 800b4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4c8:	2181      	movs	r1, #129	; 0x81
 800b4ca:	4813      	ldr	r0, [pc, #76]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4cc:	f000 fd45 	bl	800bf5a <USBD_GetEpDesc>
 800b4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2210      	movs	r2, #16
 800b4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d006      	beq.n	800b4f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ec:	711a      	strb	r2, [r3, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b500:	711a      	strb	r2, [r3, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2243      	movs	r2, #67	; 0x43
 800b50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b50c:	4b02      	ldr	r3, [pc, #8]	; (800b518 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	200000e0 	.word	0x200000e0

0800b51c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b524:	2182      	movs	r1, #130	; 0x82
 800b526:	4818      	ldr	r0, [pc, #96]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b528:	f000 fd17 	bl	800bf5a <USBD_GetEpDesc>
 800b52c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b52e:	2101      	movs	r1, #1
 800b530:	4815      	ldr	r0, [pc, #84]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b532:	f000 fd12 	bl	800bf5a <USBD_GetEpDesc>
 800b536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b538:	2181      	movs	r1, #129	; 0x81
 800b53a:	4813      	ldr	r0, [pc, #76]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b53c:	f000 fd0d 	bl	800bf5a <USBD_GetEpDesc>
 800b540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2210      	movs	r2, #16
 800b54c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2200      	movs	r2, #0
 800b558:	711a      	strb	r2, [r3, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f042 0202 	orr.w	r2, r2, #2
 800b560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d006      	beq.n	800b576 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	711a      	strb	r2, [r3, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f042 0202 	orr.w	r2, r2, #2
 800b574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2243      	movs	r2, #67	; 0x43
 800b57a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200000e0 	.word	0x200000e0

0800b58c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b594:	2182      	movs	r1, #130	; 0x82
 800b596:	4818      	ldr	r0, [pc, #96]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b598:	f000 fcdf 	bl	800bf5a <USBD_GetEpDesc>
 800b59c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b59e:	2101      	movs	r1, #1
 800b5a0:	4815      	ldr	r0, [pc, #84]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5a2:	f000 fcda 	bl	800bf5a <USBD_GetEpDesc>
 800b5a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5a8:	2181      	movs	r1, #129	; 0x81
 800b5aa:	4813      	ldr	r0, [pc, #76]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5ac:	f000 fcd5 	bl	800bf5a <USBD_GetEpDesc>
 800b5b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2210      	movs	r2, #16
 800b5bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5cc:	711a      	strb	r2, [r3, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d006      	beq.n	800b5e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5e0:	711a      	strb	r2, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2243      	movs	r2, #67	; 0x43
 800b5ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200000e0 	.word	0x200000e0

0800b5fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	220a      	movs	r2, #10
 800b608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b60a:	4b03      	ldr	r3, [pc, #12]	; (800b618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	2000009c 	.word	0x2000009c

0800b61c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e009      	b.n	800b644 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	33b0      	adds	r3, #176	; 0xb0
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	32b0      	adds	r2, #176	; 0xb0
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	e008      	b.n	800b688 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	; 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e004      	b.n	800b6c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	; 0xb0
 800b6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	32b0      	adds	r2, #176	; 0xb0
 800b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e025      	b.n	800b74e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d11f      	bne.n	800b74c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2201      	movs	r2, #1
 800b710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b714:	4b10      	ldr	r3, [pc, #64]	; (800b758 <USBD_CDC_TransmitPacket+0x88>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	f003 020f 	and.w	r2, r3, #15
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	4613      	mov	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4403      	add	r3, r0
 800b72e:	3318      	adds	r3, #24
 800b730:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <USBD_CDC_TransmitPacket+0x88>)
 800b734:	7819      	ldrb	r1, [r3, #0]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f001 ffbd 	bl	800d6c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000123 	.word	0x20000123

0800b75c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	32b0      	adds	r2, #176	; 0xb0
 800b76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b772:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	32b0      	adds	r2, #176	; 0xb0
 800b77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b786:	2303      	movs	r3, #3
 800b788:	e018      	b.n	800b7bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7c1b      	ldrb	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <USBD_CDC_ReceivePacket+0x68>)
 800b794:	7819      	ldrb	r1, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 ffaf 	bl	800d704 <USBD_LL_PrepareReceive>
 800b7a6:	e008      	b.n	800b7ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7a8:	4b06      	ldr	r3, [pc, #24]	; (800b7c4 <USBD_CDC_ReceivePacket+0x68>)
 800b7aa:	7819      	ldrb	r1, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7b2:	2340      	movs	r3, #64	; 0x40
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f001 ffa5 	bl	800d704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000124 	.word	0x20000124

0800b7c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e01f      	b.n	800b820 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	79fa      	ldrb	r2, [r7, #7]
 800b812:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f001 fe1f 	bl	800d458 <USBD_LL_Init>
 800b81a:	4603      	mov	r3, r0
 800b81c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e025      	b.n	800b88c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	32ae      	adds	r2, #174	; 0xae
 800b852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00f      	beq.n	800b87c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	32ae      	adds	r2, #174	; 0xae
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	f107 020e 	add.w	r2, r7, #14
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	4602      	mov	r2, r0
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 fe27 	bl	800d4f0 <USBD_LL_Start>
 800b8a2:	4603      	mov	r3, r0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d009      	beq.n	800b8f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	4798      	blx	r3
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	78fa      	ldrb	r2, [r7, #3]
 800b914:	4611      	mov	r1, r2
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b920:	2303      	movs	r3, #3
 800b922:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b924:	7bfb      	ldrb	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	4618      	mov	r0, r3
 800b942:	f001 f908 	bl	800cb56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b954:	461a      	mov	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b962:	f003 031f 	and.w	r3, r3, #31
 800b966:	2b02      	cmp	r3, #2
 800b968:	d01a      	beq.n	800b9a0 <USBD_LL_SetupStage+0x72>
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d822      	bhi.n	800b9b4 <USBD_LL_SetupStage+0x86>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <USBD_LL_SetupStage+0x4a>
 800b972:	2b01      	cmp	r3, #1
 800b974:	d00a      	beq.n	800b98c <USBD_LL_SetupStage+0x5e>
 800b976:	e01d      	b.n	800b9b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fb5f 	bl	800c044 <USBD_StdDevReq>
 800b986:	4603      	mov	r3, r0
 800b988:	73fb      	strb	r3, [r7, #15]
      break;
 800b98a:	e020      	b.n	800b9ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fbc7 	bl	800c128 <USBD_StdItfReq>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73fb      	strb	r3, [r7, #15]
      break;
 800b99e:	e016      	b.n	800b9ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fc29 	bl	800c200 <USBD_StdEPReq>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b2:	e00c      	b.n	800b9ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 fdf4 	bl	800d5b0 <USBD_LL_StallEP>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b9cc:	bf00      	nop
  }

  return ret;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d16e      	bne.n	800bace <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	f040 8098 	bne.w	800bb34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d913      	bls.n	800ba38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	1ad2      	subs	r2, r2, r3
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	4293      	cmp	r3, r2
 800ba28:	bf28      	it	cs
 800ba2a:	4613      	movcs	r3, r2
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f001 f984 	bl	800cd3e <USBD_CtlContinueRx>
 800ba36:	e07d      	b.n	800bb34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba3e:	f003 031f 	and.w	r3, r3, #31
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d014      	beq.n	800ba70 <USBD_LL_DataOutStage+0x98>
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d81d      	bhi.n	800ba86 <USBD_LL_DataOutStage+0xae>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <USBD_LL_DataOutStage+0x7c>
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d003      	beq.n	800ba5a <USBD_LL_DataOutStage+0x82>
 800ba52:	e018      	b.n	800ba86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	75bb      	strb	r3, [r7, #22]
            break;
 800ba58:	e018      	b.n	800ba8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	4619      	mov	r1, r3
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 fa5e 	bl	800bf26 <USBD_CoreFindIF>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	75bb      	strb	r3, [r7, #22]
            break;
 800ba6e:	e00d      	b.n	800ba8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 fa60 	bl	800bf40 <USBD_CoreFindEP>
 800ba80:	4603      	mov	r3, r0
 800ba82:	75bb      	strb	r3, [r7, #22]
            break;
 800ba84:	e002      	b.n	800ba8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75bb      	strb	r3, [r7, #22]
            break;
 800ba8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d119      	bne.n	800bac6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d113      	bne.n	800bac6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba9e:	7dba      	ldrb	r2, [r7, #22]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	32ae      	adds	r2, #174	; 0xae
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00b      	beq.n	800bac6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800baae:	7dba      	ldrb	r2, [r7, #22]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bab6:	7dba      	ldrb	r2, [r7, #22]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	32ae      	adds	r2, #174	; 0xae
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f001 f94a 	bl	800cd60 <USBD_CtlSendStatus>
 800bacc:	e032      	b.n	800bb34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bace:	7afb      	ldrb	r3, [r7, #11]
 800bad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 fa31 	bl	800bf40 <USBD_CoreFindEP>
 800bade:	4603      	mov	r3, r0
 800bae0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bae2:	7dbb      	ldrb	r3, [r7, #22]
 800bae4:	2bff      	cmp	r3, #255	; 0xff
 800bae6:	d025      	beq.n	800bb34 <USBD_LL_DataOutStage+0x15c>
 800bae8:	7dbb      	ldrb	r3, [r7, #22]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d122      	bne.n	800bb34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d117      	bne.n	800bb2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bafa:	7dba      	ldrb	r2, [r7, #22]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	32ae      	adds	r2, #174	; 0xae
 800bb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00f      	beq.n	800bb2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb0a:	7dba      	ldrb	r2, [r7, #22]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb12:	7dba      	ldrb	r2, [r7, #22]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	32ae      	adds	r2, #174	; 0xae
 800bb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	7afa      	ldrb	r2, [r7, #11]
 800bb20:	4611      	mov	r1, r2
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	4798      	blx	r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
 800bb32:	e000      	b.n	800bb36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b086      	sub	sp, #24
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	460b      	mov	r3, r1
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb4c:	7afb      	ldrb	r3, [r7, #11]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d16f      	bne.n	800bc32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3314      	adds	r3, #20
 800bb56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d15a      	bne.n	800bc18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	689a      	ldr	r2, [r3, #8]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d914      	bls.n	800bb98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	1ad2      	subs	r2, r2, r3
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	461a      	mov	r2, r3
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f001 f8ac 	bl	800cce2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f001 fdb7 	bl	800d704 <USBD_LL_PrepareReceive>
 800bb96:	e03f      	b.n	800bc18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d11c      	bne.n	800bbde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d316      	bcc.n	800bbde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d20f      	bcs.n	800bbde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f001 f88d 	bl	800cce2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f001 fd94 	bl	800d704 <USBD_LL_PrepareReceive>
 800bbdc:	e01c      	b.n	800bc18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d10f      	bne.n	800bc0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc0a:	2180      	movs	r1, #128	; 0x80
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f001 fccf 	bl	800d5b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f001 f8b7 	bl	800cd86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d03a      	beq.n	800bc98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff fe42 	bl	800b8ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc30:	e032      	b.n	800bc98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc32:	7afb      	ldrb	r3, [r7, #11]
 800bc34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f97f 	bl	800bf40 <USBD_CoreFindEP>
 800bc42:	4603      	mov	r3, r0
 800bc44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	2bff      	cmp	r3, #255	; 0xff
 800bc4a:	d025      	beq.n	800bc98 <USBD_LL_DataInStage+0x15a>
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d122      	bne.n	800bc98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d11c      	bne.n	800bc98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc5e:	7dfa      	ldrb	r2, [r7, #23]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	32ae      	adds	r2, #174	; 0xae
 800bc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d014      	beq.n	800bc98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc6e:	7dfa      	ldrb	r2, [r7, #23]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc76:	7dfa      	ldrb	r2, [r7, #23]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	32ae      	adds	r2, #174	; 0xae
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	7afa      	ldrb	r2, [r7, #11]
 800bc84:	4611      	mov	r1, r2
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	4798      	blx	r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc8e:	7dbb      	ldrb	r3, [r7, #22]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
 800bc96:	e000      	b.n	800bc9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d014      	beq.n	800bd08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00e      	beq.n	800bd08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6852      	ldr	r2, [r2, #4]
 800bcf6:	b2d2      	uxtb	r2, r2
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd08:	2340      	movs	r3, #64	; 0x40
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 fc09 	bl	800d526 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2240      	movs	r2, #64	; 0x40
 800bd20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd24:	2340      	movs	r3, #64	; 0x40
 800bd26:	2200      	movs	r2, #0
 800bd28:	2180      	movs	r1, #128	; 0x80
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f001 fbfb 	bl	800d526 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2240      	movs	r2, #64	; 0x40
 800bd3a:	621a      	str	r2, [r3, #32]

  return ret;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	78fa      	ldrb	r2, [r7, #3]
 800bd56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d106      	bne.n	800bdb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d110      	bne.n	800bdf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf2:	69db      	ldr	r3, [r3, #28]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32ae      	adds	r2, #174	; 0xae
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be20:	2303      	movs	r3, #3
 800be22:	e01c      	b.n	800be5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d115      	bne.n	800be5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	32ae      	adds	r2, #174	; 0xae
 800be3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00b      	beq.n	800be5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	32ae      	adds	r2, #174	; 0xae
 800be4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	78fa      	ldrb	r2, [r7, #3]
 800be56:	4611      	mov	r1, r2
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	32ae      	adds	r2, #174	; 0xae
 800be7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be84:	2303      	movs	r3, #3
 800be86:	e01c      	b.n	800bec2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b03      	cmp	r3, #3
 800be92:	d115      	bne.n	800bec0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	32ae      	adds	r2, #174	; 0xae
 800be9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32ae      	adds	r2, #174	; 0xae
 800beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	4611      	mov	r1, r2
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00e      	beq.n	800bf1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	6852      	ldr	r2, [r2, #4]
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	460b      	mov	r3, r1
 800bf30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b086      	sub	sp, #24
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	460b      	mov	r3, r1
 800bf64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	885b      	ldrh	r3, [r3, #2]
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d920      	bls.n	800bfc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf8a:	e013      	b.n	800bfb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf8c:	f107 030a 	add.w	r3, r7, #10
 800bf90:	4619      	mov	r1, r3
 800bf92:	6978      	ldr	r0, [r7, #20]
 800bf94:	f000 f81b 	bl	800bfce <USBD_GetNextDesc>
 800bf98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	785b      	ldrb	r3, [r3, #1]
 800bf9e:	2b05      	cmp	r3, #5
 800bfa0:	d108      	bne.n	800bfb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	789b      	ldrb	r3, [r3, #2]
 800bfaa:	78fa      	ldrb	r2, [r7, #3]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d008      	beq.n	800bfc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	885b      	ldrh	r3, [r3, #2]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	897b      	ldrh	r3, [r7, #10]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d8e5      	bhi.n	800bf8c <USBD_GetEpDesc+0x32>
 800bfc0:	e000      	b.n	800bfc4 <USBD_GetEpDesc+0x6a>
          break;
 800bfc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bfc4:	693b      	ldr	r3, [r7, #16]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	881a      	ldrh	r2, [r3, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	4413      	add	r3, r2
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4413      	add	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bffa:	68fb      	ldr	r3, [r7, #12]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	3301      	adds	r3, #1
 800c01e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c026:	8a3b      	ldrh	r3, [r7, #16]
 800c028:	021b      	lsls	r3, r3, #8
 800c02a:	b21a      	sxth	r2, r3
 800c02c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c030:	4313      	orrs	r3, r2
 800c032:	b21b      	sxth	r3, r3
 800c034:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c036:	89fb      	ldrh	r3, [r7, #14]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	371c      	adds	r7, #28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c05a:	2b40      	cmp	r3, #64	; 0x40
 800c05c:	d005      	beq.n	800c06a <USBD_StdDevReq+0x26>
 800c05e:	2b40      	cmp	r3, #64	; 0x40
 800c060:	d857      	bhi.n	800c112 <USBD_StdDevReq+0xce>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00f      	beq.n	800c086 <USBD_StdDevReq+0x42>
 800c066:	2b20      	cmp	r3, #32
 800c068:	d153      	bne.n	800c112 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	32ae      	adds	r2, #174	; 0xae
 800c074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]
      break;
 800c084:	e04a      	b.n	800c11c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	785b      	ldrb	r3, [r3, #1]
 800c08a:	2b09      	cmp	r3, #9
 800c08c:	d83b      	bhi.n	800c106 <USBD_StdDevReq+0xc2>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <USBD_StdDevReq+0x50>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0e9 	.word	0x0800c0e9
 800c098:	0800c0fd 	.word	0x0800c0fd
 800c09c:	0800c107 	.word	0x0800c107
 800c0a0:	0800c0f3 	.word	0x0800c0f3
 800c0a4:	0800c107 	.word	0x0800c107
 800c0a8:	0800c0c7 	.word	0x0800c0c7
 800c0ac:	0800c0bd 	.word	0x0800c0bd
 800c0b0:	0800c107 	.word	0x0800c107
 800c0b4:	0800c0df 	.word	0x0800c0df
 800c0b8:	0800c0d1 	.word	0x0800c0d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fa3c 	bl	800c53c <USBD_GetDescriptor>
          break;
 800c0c4:	e024      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fba1 	bl	800c810 <USBD_SetAddress>
          break;
 800c0ce:	e01f      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fbe0 	bl	800c898 <USBD_SetConfig>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
          break;
 800c0dc:	e018      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc83 	bl	800c9ec <USBD_GetConfig>
          break;
 800c0e6:	e013      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fcb4 	bl	800ca58 <USBD_GetStatus>
          break;
 800c0f0:	e00e      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fce3 	bl	800cac0 <USBD_SetFeature>
          break;
 800c0fa:	e009      	b.n	800c110 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fd07 	bl	800cb12 <USBD_ClrFeature>
          break;
 800c104:	e004      	b.n	800c110 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fd5e 	bl	800cbca <USBD_CtlError>
          break;
 800c10e:	bf00      	nop
      }
      break;
 800c110:	e004      	b.n	800c11c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fd58 	bl	800cbca <USBD_CtlError>
      break;
 800c11a:	bf00      	nop
  }

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop

0800c128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c13e:	2b40      	cmp	r3, #64	; 0x40
 800c140:	d005      	beq.n	800c14e <USBD_StdItfReq+0x26>
 800c142:	2b40      	cmp	r3, #64	; 0x40
 800c144:	d852      	bhi.n	800c1ec <USBD_StdItfReq+0xc4>
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <USBD_StdItfReq+0x26>
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	d14e      	bne.n	800c1ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c154:	b2db      	uxtb	r3, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d840      	bhi.n	800c1de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	889b      	ldrh	r3, [r3, #4]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b01      	cmp	r3, #1
 800c164:	d836      	bhi.n	800c1d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	889b      	ldrh	r3, [r3, #4]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fed9 	bl	800bf26 <USBD_CoreFindIF>
 800c174:	4603      	mov	r3, r0
 800c176:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2bff      	cmp	r3, #255	; 0xff
 800c17c:	d01d      	beq.n	800c1ba <USBD_StdItfReq+0x92>
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d11a      	bne.n	800c1ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c184:	7bba      	ldrb	r2, [r7, #14]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32ae      	adds	r2, #174	; 0xae
 800c18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00f      	beq.n	800c1b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c194:	7bba      	ldrb	r2, [r7, #14]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c19c:	7bba      	ldrb	r2, [r7, #14]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	32ae      	adds	r2, #174	; 0xae
 800c1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	4798      	blx	r3
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1b2:	e004      	b.n	800c1be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1b8:	e001      	b.n	800c1be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	88db      	ldrh	r3, [r3, #6]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d110      	bne.n	800c1e8 <USBD_StdItfReq+0xc0>
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10d      	bne.n	800c1e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fdc7 	bl	800cd60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c1d2:	e009      	b.n	800c1e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fcf7 	bl	800cbca <USBD_CtlError>
          break;
 800c1dc:	e004      	b.n	800c1e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fcf2 	bl	800cbca <USBD_CtlError>
          break;
 800c1e6:	e000      	b.n	800c1ea <USBD_StdItfReq+0xc2>
          break;
 800c1e8:	bf00      	nop
      }
      break;
 800c1ea:	e004      	b.n	800c1f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fceb 	bl	800cbca <USBD_CtlError>
      break;
 800c1f4:	bf00      	nop
  }

  return ret;
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	889b      	ldrh	r3, [r3, #4]
 800c212:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c21c:	2b40      	cmp	r3, #64	; 0x40
 800c21e:	d007      	beq.n	800c230 <USBD_StdEPReq+0x30>
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	f200 817f 	bhi.w	800c524 <USBD_StdEPReq+0x324>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02a      	beq.n	800c280 <USBD_StdEPReq+0x80>
 800c22a:	2b20      	cmp	r3, #32
 800c22c:	f040 817a 	bne.w	800c524 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff fe83 	bl	800bf40 <USBD_CoreFindEP>
 800c23a:	4603      	mov	r3, r0
 800c23c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c23e:	7b7b      	ldrb	r3, [r7, #13]
 800c240:	2bff      	cmp	r3, #255	; 0xff
 800c242:	f000 8174 	beq.w	800c52e <USBD_StdEPReq+0x32e>
 800c246:	7b7b      	ldrb	r3, [r7, #13]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 8170 	bne.w	800c52e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c24e:	7b7a      	ldrb	r2, [r7, #13]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c256:	7b7a      	ldrb	r2, [r7, #13]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32ae      	adds	r2, #174	; 0xae
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 8163 	beq.w	800c52e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c268:	7b7a      	ldrb	r2, [r7, #13]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	32ae      	adds	r2, #174	; 0xae
 800c26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c27e:	e156      	b.n	800c52e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	785b      	ldrb	r3, [r3, #1]
 800c284:	2b03      	cmp	r3, #3
 800c286:	d008      	beq.n	800c29a <USBD_StdEPReq+0x9a>
 800c288:	2b03      	cmp	r3, #3
 800c28a:	f300 8145 	bgt.w	800c518 <USBD_StdEPReq+0x318>
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 809b 	beq.w	800c3ca <USBD_StdEPReq+0x1ca>
 800c294:	2b01      	cmp	r3, #1
 800c296:	d03c      	beq.n	800c312 <USBD_StdEPReq+0x112>
 800c298:	e13e      	b.n	800c518 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d002      	beq.n	800c2ac <USBD_StdEPReq+0xac>
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d016      	beq.n	800c2d8 <USBD_StdEPReq+0xd8>
 800c2aa:	e02c      	b.n	800c306 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <USBD_StdEPReq+0xce>
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b80      	cmp	r3, #128	; 0x80
 800c2b6:	d00a      	beq.n	800c2ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f977 	bl	800d5b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c2:	2180      	movs	r1, #128	; 0x80
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f001 f973 	bl	800d5b0 <USBD_LL_StallEP>
 800c2ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2cc:	e020      	b.n	800c310 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc7a 	bl	800cbca <USBD_CtlError>
              break;
 800c2d6:	e01b      	b.n	800c310 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	885b      	ldrh	r3, [r3, #2]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10e      	bne.n	800c2fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <USBD_StdEPReq+0xfe>
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	2b80      	cmp	r3, #128	; 0x80
 800c2ea:	d008      	beq.n	800c2fe <USBD_StdEPReq+0xfe>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	88db      	ldrh	r3, [r3, #6]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f001 f959 	bl	800d5b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fd2e 	bl	800cd60 <USBD_CtlSendStatus>

              break;
 800c304:	e004      	b.n	800c310 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fc5e 	bl	800cbca <USBD_CtlError>
              break;
 800c30e:	bf00      	nop
          }
          break;
 800c310:	e107      	b.n	800c522 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d002      	beq.n	800c324 <USBD_StdEPReq+0x124>
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d016      	beq.n	800c350 <USBD_StdEPReq+0x150>
 800c322:	e04b      	b.n	800c3bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c324:	7bbb      	ldrb	r3, [r7, #14]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00d      	beq.n	800c346 <USBD_StdEPReq+0x146>
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2b80      	cmp	r3, #128	; 0x80
 800c32e:	d00a      	beq.n	800c346 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 f93b 	bl	800d5b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c33a:	2180      	movs	r1, #128	; 0x80
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f001 f937 	bl	800d5b0 <USBD_LL_StallEP>
 800c342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c344:	e040      	b.n	800c3c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fc3e 	bl	800cbca <USBD_CtlError>
              break;
 800c34e:	e03b      	b.n	800c3c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	885b      	ldrh	r3, [r3, #2]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d136      	bne.n	800c3c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f001 f941 	bl	800d5ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fcf7 	bl	800cd60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fde2 	bl	800bf40 <USBD_CoreFindEP>
 800c37c:	4603      	mov	r3, r0
 800c37e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c380:	7b7b      	ldrb	r3, [r7, #13]
 800c382:	2bff      	cmp	r3, #255	; 0xff
 800c384:	d01f      	beq.n	800c3c6 <USBD_StdEPReq+0x1c6>
 800c386:	7b7b      	ldrb	r3, [r7, #13]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d11c      	bne.n	800c3c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c38c:	7b7a      	ldrb	r2, [r7, #13]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c394:	7b7a      	ldrb	r2, [r7, #13]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	32ae      	adds	r2, #174	; 0xae
 800c39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d010      	beq.n	800c3c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3a4:	7b7a      	ldrb	r2, [r7, #13]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	32ae      	adds	r2, #174	; 0xae
 800c3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	4798      	blx	r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c3ba:	e004      	b.n	800c3c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fc03 	bl	800cbca <USBD_CtlError>
              break;
 800c3c4:	e000      	b.n	800c3c8 <USBD_StdEPReq+0x1c8>
              break;
 800c3c6:	bf00      	nop
          }
          break;
 800c3c8:	e0ab      	b.n	800c522 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d002      	beq.n	800c3dc <USBD_StdEPReq+0x1dc>
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d032      	beq.n	800c440 <USBD_StdEPReq+0x240>
 800c3da:	e097      	b.n	800c50c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d007      	beq.n	800c3f2 <USBD_StdEPReq+0x1f2>
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
 800c3e4:	2b80      	cmp	r3, #128	; 0x80
 800c3e6:	d004      	beq.n	800c3f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fbed 	bl	800cbca <USBD_CtlError>
                break;
 800c3f0:	e091      	b.n	800c516 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	da0b      	bge.n	800c412 <USBD_StdEPReq+0x212>
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	3310      	adds	r3, #16
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4413      	add	r3, r2
 800c40e:	3304      	adds	r3, #4
 800c410:	e00b      	b.n	800c42a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c418:	4613      	mov	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4413      	add	r3, r2
 800c428:	3304      	adds	r3, #4
 800c42a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2202      	movs	r2, #2
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fc37 	bl	800ccac <USBD_CtlSendData>
              break;
 800c43e:	e06a      	b.n	800c516 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	da11      	bge.n	800c46c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	f003 020f 	and.w	r2, r3, #15
 800c44e:	6879      	ldr	r1, [r7, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	440b      	add	r3, r1
 800c45a:	3324      	adds	r3, #36	; 0x24
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d117      	bne.n	800c492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fbb0 	bl	800cbca <USBD_CtlError>
                  break;
 800c46a:	e054      	b.n	800c516 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	f003 020f 	and.w	r2, r3, #15
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d104      	bne.n	800c492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fb9d 	bl	800cbca <USBD_CtlError>
                  break;
 800c490:	e041      	b.n	800c516 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	da0b      	bge.n	800c4b2 <USBD_StdEPReq+0x2b2>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	3310      	adds	r3, #16
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	e00b      	b.n	800c4ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <USBD_StdEPReq+0x2d8>
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	2b80      	cmp	r3, #128	; 0x80
 800c4d6:	d103      	bne.n	800c4e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	e00e      	b.n	800c4fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 f8a1 	bl	800d62c <USBD_LL_IsStallEP>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e002      	b.n	800c4fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2202      	movs	r2, #2
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fbd1 	bl	800ccac <USBD_CtlSendData>
              break;
 800c50a:	e004      	b.n	800c516 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fb5b 	bl	800cbca <USBD_CtlError>
              break;
 800c514:	bf00      	nop
          }
          break;
 800c516:	e004      	b.n	800c522 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb55 	bl	800cbca <USBD_CtlError>
          break;
 800c520:	bf00      	nop
      }
      break;
 800c522:	e005      	b.n	800c530 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fb4f 	bl	800cbca <USBD_CtlError>
      break;
 800c52c:	e000      	b.n	800c530 <USBD_StdEPReq+0x330>
      break;
 800c52e:	bf00      	nop
  }

  return ret;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
	...

0800c53c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c546:	2300      	movs	r3, #0
 800c548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	885b      	ldrh	r3, [r3, #2]
 800c556:	0a1b      	lsrs	r3, r3, #8
 800c558:	b29b      	uxth	r3, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	2b06      	cmp	r3, #6
 800c55e:	f200 8128 	bhi.w	800c7b2 <USBD_GetDescriptor+0x276>
 800c562:	a201      	add	r2, pc, #4	; (adr r2, 800c568 <USBD_GetDescriptor+0x2c>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c585 	.word	0x0800c585
 800c56c:	0800c59d 	.word	0x0800c59d
 800c570:	0800c5dd 	.word	0x0800c5dd
 800c574:	0800c7b3 	.word	0x0800c7b3
 800c578:	0800c7b3 	.word	0x0800c7b3
 800c57c:	0800c753 	.word	0x0800c753
 800c580:	0800c77f 	.word	0x0800c77f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	7c12      	ldrb	r2, [r2, #16]
 800c590:	f107 0108 	add.w	r1, r7, #8
 800c594:	4610      	mov	r0, r2
 800c596:	4798      	blx	r3
 800c598:	60f8      	str	r0, [r7, #12]
      break;
 800c59a:	e112      	b.n	800c7c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7c1b      	ldrb	r3, [r3, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10d      	bne.n	800c5c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ac:	f107 0208 	add.w	r2, r7, #8
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4798      	blx	r3
 800c5b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c5be:	e100      	b.n	800c7c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c8:	f107 0208 	add.w	r2, r7, #8
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	4798      	blx	r3
 800c5d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	701a      	strb	r2, [r3, #0]
      break;
 800c5da:	e0f2      	b.n	800c7c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	885b      	ldrh	r3, [r3, #2]
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	f200 80ac 	bhi.w	800c740 <USBD_GetDescriptor+0x204>
 800c5e8:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <USBD_GetDescriptor+0xb4>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c609 	.word	0x0800c609
 800c5f4:	0800c63d 	.word	0x0800c63d
 800c5f8:	0800c671 	.word	0x0800c671
 800c5fc:	0800c6a5 	.word	0x0800c6a5
 800c600:	0800c6d9 	.word	0x0800c6d9
 800c604:	0800c70d 	.word	0x0800c70d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	7c12      	ldrb	r2, [r2, #16]
 800c620:	f107 0108 	add.w	r1, r7, #8
 800c624:	4610      	mov	r0, r2
 800c626:	4798      	blx	r3
 800c628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c62a:	e091      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 facb 	bl	800cbca <USBD_CtlError>
            err++;
 800c634:	7afb      	ldrb	r3, [r7, #11]
 800c636:	3301      	adds	r3, #1
 800c638:	72fb      	strb	r3, [r7, #11]
          break;
 800c63a:	e089      	b.n	800c750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00b      	beq.n	800c660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	7c12      	ldrb	r2, [r2, #16]
 800c654:	f107 0108 	add.w	r1, r7, #8
 800c658:	4610      	mov	r0, r2
 800c65a:	4798      	blx	r3
 800c65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c65e:	e077      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fab1 	bl	800cbca <USBD_CtlError>
            err++;
 800c668:	7afb      	ldrb	r3, [r7, #11]
 800c66a:	3301      	adds	r3, #1
 800c66c:	72fb      	strb	r3, [r7, #11]
          break;
 800c66e:	e06f      	b.n	800c750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	7c12      	ldrb	r2, [r2, #16]
 800c688:	f107 0108 	add.w	r1, r7, #8
 800c68c:	4610      	mov	r0, r2
 800c68e:	4798      	blx	r3
 800c690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c692:	e05d      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fa97 	bl	800cbca <USBD_CtlError>
            err++;
 800c69c:	7afb      	ldrb	r3, [r7, #11]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6a2:	e055      	b.n	800c750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	7c12      	ldrb	r2, [r2, #16]
 800c6bc:	f107 0108 	add.w	r1, r7, #8
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4798      	blx	r3
 800c6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6c6:	e043      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fa7d 	bl	800cbca <USBD_CtlError>
            err++;
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6d6:	e03b      	b.n	800c750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 0108 	add.w	r1, r7, #8
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6fa:	e029      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fa63 	bl	800cbca <USBD_CtlError>
            err++;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	3301      	adds	r3, #1
 800c708:	72fb      	strb	r3, [r7, #11]
          break;
 800c70a:	e021      	b.n	800c750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	7c12      	ldrb	r2, [r2, #16]
 800c724:	f107 0108 	add.w	r1, r7, #8
 800c728:	4610      	mov	r0, r2
 800c72a:	4798      	blx	r3
 800c72c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c72e:	e00f      	b.n	800c750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fa49 	bl	800cbca <USBD_CtlError>
            err++;
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	3301      	adds	r3, #1
 800c73c:	72fb      	strb	r3, [r7, #11]
          break;
 800c73e:	e007      	b.n	800c750 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa41 	bl	800cbca <USBD_CtlError>
          err++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c74e:	bf00      	nop
      }
      break;
 800c750:	e037      	b.n	800c7c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	7c1b      	ldrb	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d109      	bne.n	800c76e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c762:	f107 0208 	add.w	r2, r7, #8
 800c766:	4610      	mov	r0, r2
 800c768:	4798      	blx	r3
 800c76a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c76c:	e029      	b.n	800c7c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fa2a 	bl	800cbca <USBD_CtlError>
        err++;
 800c776:	7afb      	ldrb	r3, [r7, #11]
 800c778:	3301      	adds	r3, #1
 800c77a:	72fb      	strb	r3, [r7, #11]
      break;
 800c77c:	e021      	b.n	800c7c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7c1b      	ldrb	r3, [r3, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10d      	bne.n	800c7a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78e:	f107 0208 	add.w	r2, r7, #8
 800c792:	4610      	mov	r0, r2
 800c794:	4798      	blx	r3
 800c796:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3301      	adds	r3, #1
 800c79c:	2207      	movs	r2, #7
 800c79e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7a0:	e00f      	b.n	800c7c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fa10 	bl	800cbca <USBD_CtlError>
        err++;
 800c7aa:	7afb      	ldrb	r3, [r7, #11]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	72fb      	strb	r3, [r7, #11]
      break;
 800c7b0:	e007      	b.n	800c7c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fa08 	bl	800cbca <USBD_CtlError>
      err++;
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	72fb      	strb	r3, [r7, #11]
      break;
 800c7c0:	bf00      	nop
  }

  if (err != 0U)
 800c7c2:	7afb      	ldrb	r3, [r7, #11]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d11e      	bne.n	800c806 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	88db      	ldrh	r3, [r3, #6]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d016      	beq.n	800c7fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c7d0:	893b      	ldrh	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00e      	beq.n	800c7f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	88da      	ldrh	r2, [r3, #6]
 800c7da:	893b      	ldrh	r3, [r7, #8]
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	bf28      	it	cs
 800c7e0:	4613      	movcs	r3, r2
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7e6:	893b      	ldrh	r3, [r7, #8]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	68f9      	ldr	r1, [r7, #12]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fa5d 	bl	800ccac <USBD_CtlSendData>
 800c7f2:	e009      	b.n	800c808 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9e7 	bl	800cbca <USBD_CtlError>
 800c7fc:	e004      	b.n	800c808 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 faae 	bl	800cd60 <USBD_CtlSendStatus>
 800c804:	e000      	b.n	800c808 <USBD_GetDescriptor+0x2cc>
    return;
 800c806:	bf00      	nop
  }
}
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop

0800c810 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	889b      	ldrh	r3, [r3, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d131      	bne.n	800c886 <USBD_SetAddress+0x76>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	88db      	ldrh	r3, [r3, #6]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d12d      	bne.n	800c886 <USBD_SetAddress+0x76>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	2b7f      	cmp	r3, #127	; 0x7f
 800c830:	d829      	bhi.n	800c886 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c83c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b03      	cmp	r3, #3
 800c848:	d104      	bne.n	800c854 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f9bc 	bl	800cbca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c852:	e01d      	b.n	800c890 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	7bfa      	ldrb	r2, [r7, #15]
 800c858:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 ff0f 	bl	800d684 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa7a 	bl	800cd60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87a:	e009      	b.n	800c890 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c884:	e004      	b.n	800c890 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f99e 	bl	800cbca <USBD_CtlError>
  }
}
 800c88e:	bf00      	nop
 800c890:	bf00      	nop
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	4b4e      	ldr	r3, [pc, #312]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c8ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8b0:	4b4d      	ldr	r3, [pc, #308]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d905      	bls.n	800c8c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f985 	bl	800cbca <USBD_CtlError>
    return USBD_FAIL;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e08c      	b.n	800c9de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d002      	beq.n	800c8d6 <USBD_SetConfig+0x3e>
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d029      	beq.n	800c928 <USBD_SetConfig+0x90>
 800c8d4:	e075      	b.n	800c9c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c8d6:	4b44      	ldr	r3, [pc, #272]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d020      	beq.n	800c920 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c8de:	4b42      	ldr	r3, [pc, #264]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8e8:	4b3f      	ldr	r3, [pc, #252]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7fe ffe7 	bl	800b8c2 <USBD_SetClassConfig>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 f962 	bl	800cbca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2202      	movs	r2, #2
 800c90a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c90e:	e065      	b.n	800c9dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fa25 	bl	800cd60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2203      	movs	r2, #3
 800c91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c91e:	e05d      	b.n	800c9dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fa1d 	bl	800cd60 <USBD_CtlSendStatus>
      break;
 800c926:	e059      	b.n	800c9dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c928:	4b2f      	ldr	r3, [pc, #188]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d112      	bne.n	800c956 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c938:	4b2b      	ldr	r3, [pc, #172]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c942:	4b29      	ldr	r3, [pc, #164]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7fe ffd6 	bl	800b8fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fa06 	bl	800cd60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c954:	e042      	b.n	800c9dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c956:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	429a      	cmp	r2, r3
 800c962:	d02a      	beq.n	800c9ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7fe ffc4 	bl	800b8fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c972:	4b1d      	ldr	r3, [pc, #116]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c97c:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7fe ff9d 	bl	800b8c2 <USBD_SetClassConfig>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00f      	beq.n	800c9b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f918 	bl	800cbca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7fe ffa9 	bl	800b8fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c9b0:	e014      	b.n	800c9dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f9d4 	bl	800cd60 <USBD_CtlSendStatus>
      break;
 800c9b8:	e010      	b.n	800c9dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f9d0 	bl	800cd60 <USBD_CtlSendStatus>
      break;
 800c9c0:	e00c      	b.n	800c9dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f900 	bl	800cbca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <USBD_SetConfig+0x150>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7fe ff92 	bl	800b8fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9da:	bf00      	nop
  }

  return ret;
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20000670 	.word	0x20000670

0800c9ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	88db      	ldrh	r3, [r3, #6]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d004      	beq.n	800ca08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f8e2 	bl	800cbca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca06:	e023      	b.n	800ca50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	dc02      	bgt.n	800ca1a <USBD_GetConfig+0x2e>
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	dc03      	bgt.n	800ca20 <USBD_GetConfig+0x34>
 800ca18:	e015      	b.n	800ca46 <USBD_GetConfig+0x5a>
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d00b      	beq.n	800ca36 <USBD_GetConfig+0x4a>
 800ca1e:	e012      	b.n	800ca46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f93c 	bl	800ccac <USBD_CtlSendData>
        break;
 800ca34:	e00c      	b.n	800ca50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f934 	bl	800ccac <USBD_CtlSendData>
        break;
 800ca44:	e004      	b.n	800ca50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 f8be 	bl	800cbca <USBD_CtlError>
        break;
 800ca4e:	bf00      	nop
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d81e      	bhi.n	800caae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	88db      	ldrh	r3, [r3, #6]
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d004      	beq.n	800ca82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f8a5 	bl	800cbca <USBD_CtlError>
        break;
 800ca80:	e01a      	b.n	800cab8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	f043 0202 	orr.w	r2, r3, #2
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	330c      	adds	r3, #12
 800caa2:	2202      	movs	r2, #2
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f900 	bl	800ccac <USBD_CtlSendData>
      break;
 800caac:	e004      	b.n	800cab8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f88a 	bl	800cbca <USBD_CtlError>
      break;
 800cab6:	bf00      	nop
  }
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d107      	bne.n	800cae2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f940 	bl	800cd60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cae0:	e013      	b.n	800cb0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d10b      	bne.n	800cb02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	889b      	ldrh	r3, [r3, #4]
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f930 	bl	800cd60 <USBD_CtlSendStatus>
}
 800cb00:	e003      	b.n	800cb0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f860 	bl	800cbca <USBD_CtlError>
}
 800cb0a:	bf00      	nop
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	3b01      	subs	r3, #1
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d80b      	bhi.n	800cb42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d10c      	bne.n	800cb4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f910 	bl	800cd60 <USBD_CtlSendStatus>
      }
      break;
 800cb40:	e004      	b.n	800cb4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f840 	bl	800cbca <USBD_CtlError>
      break;
 800cb4a:	e000      	b.n	800cb4e <USBD_ClrFeature+0x3c>
      break;
 800cb4c:	bf00      	nop
  }
}
 800cb4e:	bf00      	nop
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	781a      	ldrb	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff fa41 	bl	800c008 <SWAPBYTE>
 800cb86:	4603      	mov	r3, r0
 800cb88:	461a      	mov	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3301      	adds	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff fa34 	bl	800c008 <SWAPBYTE>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7ff fa27 	bl	800c008 <SWAPBYTE>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	80da      	strh	r2, [r3, #6]
}
 800cbc2:	bf00      	nop
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbd4:	2180      	movs	r1, #128	; 0x80
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fcea 	bl	800d5b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbdc:	2100      	movs	r1, #0
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fce6 	bl	800d5b0 <USBD_LL_StallEP>
}
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d036      	beq.n	800cc70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc06:	6938      	ldr	r0, [r7, #16]
 800cc08:	f000 f836 	bl	800cc78 <USBD_GetLen>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	3301      	adds	r3, #1
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	4413      	add	r3, r2
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	7812      	ldrb	r2, [r2, #0]
 800cc24:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	4413      	add	r3, r2
 800cc32:	2203      	movs	r2, #3
 800cc34:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc3c:	e013      	b.n	800cc66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	4413      	add	r3, r2
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	7812      	ldrb	r2, [r2, #0]
 800cc48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	613b      	str	r3, [r7, #16]
    idx++;
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	3301      	adds	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	3301      	adds	r3, #1
 800cc64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1e7      	bne.n	800cc3e <USBD_GetString+0x52>
 800cc6e:	e000      	b.n	800cc72 <USBD_GetString+0x86>
    return;
 800cc70:	bf00      	nop
  }
}
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc88:	e005      	b.n	800cc96 <USBD_GetLen+0x1e>
  {
    len++;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	3301      	adds	r3, #1
 800cc94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f5      	bne.n	800cc8a <USBD_GetLen+0x12>
  }

  return len;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f000 fcf5 	bl	800d6c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 fce4 	bl	800d6c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2203      	movs	r2, #3
 800cd14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 fce8 	bl	800d704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	60b9      	str	r1, [r7, #8]
 800cd48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	2100      	movs	r1, #0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 fcd7 	bl	800d704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2204      	movs	r2, #4
 800cd6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd70:	2300      	movs	r3, #0
 800cd72:	2200      	movs	r2, #0
 800cd74:	2100      	movs	r1, #0
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fca3 	bl	800d6c2 <USBD_LL_Transmit>

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2205      	movs	r2, #5
 800cd92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd96:	2300      	movs	r3, #0
 800cd98:	2200      	movs	r2, #0
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fcb1 	bl	800d704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4912      	ldr	r1, [pc, #72]	; (800cdfc <MX_USB_DEVICE_Init+0x50>)
 800cdb4:	4812      	ldr	r0, [pc, #72]	; (800ce00 <MX_USB_DEVICE_Init+0x54>)
 800cdb6:	f7fe fd07 	bl	800b7c8 <USBD_Init>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdc0:	f7f6 fba2 	bl	8003508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdc4:	490f      	ldr	r1, [pc, #60]	; (800ce04 <MX_USB_DEVICE_Init+0x58>)
 800cdc6:	480e      	ldr	r0, [pc, #56]	; (800ce00 <MX_USB_DEVICE_Init+0x54>)
 800cdc8:	f7fe fd2e 	bl	800b828 <USBD_RegisterClass>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdd2:	f7f6 fb99 	bl	8003508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdd6:	490c      	ldr	r1, [pc, #48]	; (800ce08 <MX_USB_DEVICE_Init+0x5c>)
 800cdd8:	4809      	ldr	r0, [pc, #36]	; (800ce00 <MX_USB_DEVICE_Init+0x54>)
 800cdda:	f7fe fc1f 	bl	800b61c <USBD_CDC_RegisterInterface>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cde4:	f7f6 fb90 	bl	8003508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cde8:	4805      	ldr	r0, [pc, #20]	; (800ce00 <MX_USB_DEVICE_Init+0x54>)
 800cdea:	f7fe fd53 	bl	800b894 <USBD_Start>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdf4:	f7f6 fb88 	bl	8003508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdf8:	bf00      	nop
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20000144 	.word	0x20000144
 800ce00:	20000674 	.word	0x20000674
 800ce04:	200000a8 	.word	0x200000a8
 800ce08:	20000130 	.word	0x20000130

0800ce0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce10:	2200      	movs	r2, #0
 800ce12:	4905      	ldr	r1, [pc, #20]	; (800ce28 <CDC_Init_FS+0x1c>)
 800ce14:	4805      	ldr	r0, [pc, #20]	; (800ce2c <CDC_Init_FS+0x20>)
 800ce16:	f7fe fc1b 	bl	800b650 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce1a:	4905      	ldr	r1, [pc, #20]	; (800ce30 <CDC_Init_FS+0x24>)
 800ce1c:	4803      	ldr	r0, [pc, #12]	; (800ce2c <CDC_Init_FS+0x20>)
 800ce1e:	f7fe fc39 	bl	800b694 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20001150 	.word	0x20001150
 800ce2c:	20000674 	.word	0x20000674
 800ce30:	20000950 	.word	0x20000950

0800ce34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce34:	b480      	push	{r7}
 800ce36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
 800ce50:	4613      	mov	r3, r2
 800ce52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce54:	79fb      	ldrb	r3, [r7, #7]
 800ce56:	2b23      	cmp	r3, #35	; 0x23
 800ce58:	d85c      	bhi.n	800cf14 <CDC_Control_FS+0xd0>
 800ce5a:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <CDC_Control_FS+0x1c>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800cf15 	.word	0x0800cf15
 800ce64:	0800cf15 	.word	0x0800cf15
 800ce68:	0800cf15 	.word	0x0800cf15
 800ce6c:	0800cf15 	.word	0x0800cf15
 800ce70:	0800cf15 	.word	0x0800cf15
 800ce74:	0800cf15 	.word	0x0800cf15
 800ce78:	0800cf15 	.word	0x0800cf15
 800ce7c:	0800cf15 	.word	0x0800cf15
 800ce80:	0800cf15 	.word	0x0800cf15
 800ce84:	0800cf15 	.word	0x0800cf15
 800ce88:	0800cf15 	.word	0x0800cf15
 800ce8c:	0800cf15 	.word	0x0800cf15
 800ce90:	0800cf15 	.word	0x0800cf15
 800ce94:	0800cf15 	.word	0x0800cf15
 800ce98:	0800cf15 	.word	0x0800cf15
 800ce9c:	0800cf15 	.word	0x0800cf15
 800cea0:	0800cf15 	.word	0x0800cf15
 800cea4:	0800cf15 	.word	0x0800cf15
 800cea8:	0800cf15 	.word	0x0800cf15
 800ceac:	0800cf15 	.word	0x0800cf15
 800ceb0:	0800cf15 	.word	0x0800cf15
 800ceb4:	0800cf15 	.word	0x0800cf15
 800ceb8:	0800cf15 	.word	0x0800cf15
 800cebc:	0800cf15 	.word	0x0800cf15
 800cec0:	0800cf15 	.word	0x0800cf15
 800cec4:	0800cf15 	.word	0x0800cf15
 800cec8:	0800cf15 	.word	0x0800cf15
 800cecc:	0800cf15 	.word	0x0800cf15
 800ced0:	0800cf15 	.word	0x0800cf15
 800ced4:	0800cf15 	.word	0x0800cf15
 800ced8:	0800cf15 	.word	0x0800cf15
 800cedc:	0800cf15 	.word	0x0800cf15
 800cee0:	0800cef1 	.word	0x0800cef1
 800cee4:	0800cf03 	.word	0x0800cf03
 800cee8:	0800cf15 	.word	0x0800cf15
 800ceec:	0800cf15 	.word	0x0800cf15
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cef0:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <CDC_Control_FS+0xe0>)
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	6810      	ldr	r0, [r2, #0]
 800cef6:	6018      	str	r0, [r3, #0]
 800cef8:	8891      	ldrh	r1, [r2, #4]
 800cefa:	7992      	ldrb	r2, [r2, #6]
 800cefc:	8099      	strh	r1, [r3, #4]
 800cefe:	719a      	strb	r2, [r3, #6]
    break;
 800cf00:	e009      	b.n	800cf16 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	4a07      	ldr	r2, [pc, #28]	; (800cf24 <CDC_Control_FS+0xe0>)
 800cf06:	6810      	ldr	r0, [r2, #0]
 800cf08:	6018      	str	r0, [r3, #0]
 800cf0a:	8891      	ldrh	r1, [r2, #4]
 800cf0c:	7992      	ldrb	r2, [r2, #6]
 800cf0e:	8099      	strh	r1, [r3, #4]
 800cf10:	719a      	strb	r2, [r3, #6]
    break;
 800cf12:	e000      	b.n	800cf16 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf14:	bf00      	nop
  }

  return (USBD_OK);
 800cf16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	20000128 	.word	0x20000128

0800cf28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf32:	6879      	ldr	r1, [r7, #4]
 800cf34:	4805      	ldr	r0, [pc, #20]	; (800cf4c <CDC_Receive_FS+0x24>)
 800cf36:	f7fe fbad 	bl	800b694 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf3a:	4804      	ldr	r0, [pc, #16]	; (800cf4c <CDC_Receive_FS+0x24>)
 800cf3c:	f7fe fc0e 	bl	800b75c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000674 	.word	0x20000674

0800cf50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf60:	4b0d      	ldr	r3, [pc, #52]	; (800cf98 <CDC_Transmit_FS+0x48>)
 800cf62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e00b      	b.n	800cf8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf76:	887b      	ldrh	r3, [r7, #2]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	4806      	ldr	r0, [pc, #24]	; (800cf98 <CDC_Transmit_FS+0x48>)
 800cf7e:	f7fe fb67 	bl	800b650 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf82:	4805      	ldr	r0, [pc, #20]	; (800cf98 <CDC_Transmit_FS+0x48>)
 800cf84:	f7fe fba4 	bl	800b6d0 <USBD_CDC_TransmitPacket>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20000674 	.word	0x20000674

0800cf9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cfae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	6039      	str	r1, [r7, #0]
 800cfca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2212      	movs	r2, #18
 800cfd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfd2:	4b03      	ldr	r3, [pc, #12]	; (800cfe0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	20000160 	.word	0x20000160

0800cfe4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	6039      	str	r1, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2204      	movs	r2, #4
 800cff4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cff6:	4b03      	ldr	r3, [pc, #12]	; (800d004 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	20000174 	.word	0x20000174

0800d008 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	6039      	str	r1, [r7, #0]
 800d012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d105      	bne.n	800d026 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	4907      	ldr	r1, [pc, #28]	; (800d03c <USBD_FS_ProductStrDescriptor+0x34>)
 800d01e:	4808      	ldr	r0, [pc, #32]	; (800d040 <USBD_FS_ProductStrDescriptor+0x38>)
 800d020:	f7ff fde4 	bl	800cbec <USBD_GetString>
 800d024:	e004      	b.n	800d030 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	4904      	ldr	r1, [pc, #16]	; (800d03c <USBD_FS_ProductStrDescriptor+0x34>)
 800d02a:	4805      	ldr	r0, [pc, #20]	; (800d040 <USBD_FS_ProductStrDescriptor+0x38>)
 800d02c:	f7ff fdde 	bl	800cbec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d030:	4b02      	ldr	r3, [pc, #8]	; (800d03c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20001950 	.word	0x20001950
 800d040:	080112e0 	.word	0x080112e0

0800d044 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4603      	mov	r3, r0
 800d04c:	6039      	str	r1, [r7, #0]
 800d04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	4904      	ldr	r1, [pc, #16]	; (800d064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d054:	4804      	ldr	r0, [pc, #16]	; (800d068 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d056:	f7ff fdc9 	bl	800cbec <USBD_GetString>
  return USBD_StrDesc;
 800d05a:	4b02      	ldr	r3, [pc, #8]	; (800d064 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20001950 	.word	0x20001950
 800d068:	080112f8 	.word	0x080112f8

0800d06c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	6039      	str	r1, [r7, #0]
 800d076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	221a      	movs	r2, #26
 800d07c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d07e:	f000 f843 	bl	800d108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d082:	4b02      	ldr	r3, [pc, #8]	; (800d08c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d084:	4618      	mov	r0, r3
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	20000178 	.word	0x20000178

0800d090 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	6039      	str	r1, [r7, #0]
 800d09a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d105      	bne.n	800d0ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	4907      	ldr	r1, [pc, #28]	; (800d0c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d0a6:	4808      	ldr	r0, [pc, #32]	; (800d0c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0a8:	f7ff fda0 	bl	800cbec <USBD_GetString>
 800d0ac:	e004      	b.n	800d0b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4904      	ldr	r1, [pc, #16]	; (800d0c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d0b2:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0b4:	f7ff fd9a 	bl	800cbec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b8:	4b02      	ldr	r3, [pc, #8]	; (800d0c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20001950 	.word	0x20001950
 800d0c8:	0801130c 	.word	0x0801130c

0800d0cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	6039      	str	r1, [r7, #0]
 800d0d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	4907      	ldr	r1, [pc, #28]	; (800d100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0e2:	4808      	ldr	r0, [pc, #32]	; (800d104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0e4:	f7ff fd82 	bl	800cbec <USBD_GetString>
 800d0e8:	e004      	b.n	800d0f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	4904      	ldr	r1, [pc, #16]	; (800d100 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ee:	4805      	ldr	r0, [pc, #20]	; (800d104 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0f0:	f7ff fd7c 	bl	800cbec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0f4:	4b02      	ldr	r3, [pc, #8]	; (800d100 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20001950 	.word	0x20001950
 800d104:	08011318 	.word	0x08011318

0800d108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d10e:	4b0f      	ldr	r3, [pc, #60]	; (800d14c <Get_SerialNum+0x44>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d114:	4b0e      	ldr	r3, [pc, #56]	; (800d150 <Get_SerialNum+0x48>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <Get_SerialNum+0x4c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4413      	add	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d12e:	2208      	movs	r2, #8
 800d130:	4909      	ldr	r1, [pc, #36]	; (800d158 <Get_SerialNum+0x50>)
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f000 f814 	bl	800d160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d138:	2204      	movs	r2, #4
 800d13a:	4908      	ldr	r1, [pc, #32]	; (800d15c <Get_SerialNum+0x54>)
 800d13c:	68b8      	ldr	r0, [r7, #8]
 800d13e:	f000 f80f 	bl	800d160 <IntToUnicode>
  }
}
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	1fff7a10 	.word	0x1fff7a10
 800d150:	1fff7a14 	.word	0x1fff7a14
 800d154:	1fff7a18 	.word	0x1fff7a18
 800d158:	2000017a 	.word	0x2000017a
 800d15c:	2000018a 	.word	0x2000018a

0800d160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d160:	b480      	push	{r7}
 800d162:	b087      	sub	sp, #28
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d172:	2300      	movs	r3, #0
 800d174:	75fb      	strb	r3, [r7, #23]
 800d176:	e027      	b.n	800d1c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	0f1b      	lsrs	r3, r3, #28
 800d17c:	2b09      	cmp	r3, #9
 800d17e:	d80b      	bhi.n	800d198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	0f1b      	lsrs	r3, r3, #28
 800d184:	b2da      	uxtb	r2, r3
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	4619      	mov	r1, r3
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	440b      	add	r3, r1
 800d190:	3230      	adds	r2, #48	; 0x30
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	e00a      	b.n	800d1ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	0f1b      	lsrs	r3, r3, #28
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	7dfb      	ldrb	r3, [r7, #23]
 800d1a0:	005b      	lsls	r3, r3, #1
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3237      	adds	r2, #55	; 0x37
 800d1aa:	b2d2      	uxtb	r2, r2
 800d1ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	011b      	lsls	r3, r3, #4
 800d1b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	4413      	add	r3, r2
 800d1be:	2200      	movs	r2, #0
 800d1c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	75fb      	strb	r3, [r7, #23]
 800d1c8:	7dfa      	ldrb	r2, [r7, #23]
 800d1ca:	79fb      	ldrb	r3, [r7, #7]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d3d3      	bcc.n	800d178 <IntToUnicode+0x18>
  }
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	371c      	adds	r7, #28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08a      	sub	sp, #40	; 0x28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1e8:	f107 0314 	add.w	r3, r7, #20
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	605a      	str	r2, [r3, #4]
 800d1f2:	609a      	str	r2, [r3, #8]
 800d1f4:	60da      	str	r2, [r3, #12]
 800d1f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d200:	d13a      	bne.n	800d278 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d202:	2300      	movs	r3, #0
 800d204:	613b      	str	r3, [r7, #16]
 800d206:	4b1e      	ldr	r3, [pc, #120]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20a:	4a1d      	ldr	r2, [pc, #116]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d20c:	f043 0301 	orr.w	r3, r3, #1
 800d210:	6313      	str	r3, [r2, #48]	; 0x30
 800d212:	4b1b      	ldr	r3, [pc, #108]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d216:	f003 0301 	and.w	r3, r3, #1
 800d21a:	613b      	str	r3, [r7, #16]
 800d21c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d21e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d224:	2302      	movs	r3, #2
 800d226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d228:	2300      	movs	r3, #0
 800d22a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d22c:	2303      	movs	r3, #3
 800d22e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d230:	230a      	movs	r3, #10
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d234:	f107 0314 	add.w	r3, r7, #20
 800d238:	4619      	mov	r1, r3
 800d23a:	4812      	ldr	r0, [pc, #72]	; (800d284 <HAL_PCD_MspInit+0xa4>)
 800d23c:	f7f7 fa1e 	bl	800467c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d240:	4b0f      	ldr	r3, [pc, #60]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d244:	4a0e      	ldr	r2, [pc, #56]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d24a:	6353      	str	r3, [r2, #52]	; 0x34
 800d24c:	2300      	movs	r3, #0
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	4b0b      	ldr	r3, [pc, #44]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d254:	4a0a      	ldr	r2, [pc, #40]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d25a:	6453      	str	r3, [r2, #68]	; 0x44
 800d25c:	4b08      	ldr	r3, [pc, #32]	; (800d280 <HAL_PCD_MspInit+0xa0>)
 800d25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d268:	2200      	movs	r2, #0
 800d26a:	2100      	movs	r1, #0
 800d26c:	2043      	movs	r0, #67	; 0x43
 800d26e:	f7f6 fdcc 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d272:	2043      	movs	r0, #67	; 0x43
 800d274:	f7f6 fde5 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d278:	bf00      	nop
 800d27a:	3728      	adds	r7, #40	; 0x28
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	40023800 	.word	0x40023800
 800d284:	40020000 	.word	0x40020000

0800d288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7fe fb45 	bl	800b92e <USBD_LL_SetupStage>
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d2be:	78fa      	ldrb	r2, [r7, #3]
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	440b      	add	r3, r1
 800d2cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	78fb      	ldrb	r3, [r7, #3]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f7fe fb7f 	bl	800b9d8 <USBD_LL_DataOutStage>
}
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d2f4:	78fa      	ldrb	r2, [r7, #3]
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	334c      	adds	r3, #76	; 0x4c
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	78fb      	ldrb	r3, [r7, #3]
 800d308:	4619      	mov	r1, r3
 800d30a:	f7fe fc18 	bl	800bb3e <USBD_LL_DataInStage>
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d324:	4618      	mov	r0, r3
 800d326:	f7fe fd4c 	bl	800bdc2 <USBD_LL_SOF>
}
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d33a:	2301      	movs	r3, #1
 800d33c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d001      	beq.n	800d34a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d346:	f7f6 f8df 	bl	8003508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d350:	7bfa      	ldrb	r2, [r7, #15]
 800d352:	4611      	mov	r1, r2
 800d354:	4618      	mov	r0, r3
 800d356:	f7fe fcf6 	bl	800bd46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d360:	4618      	mov	r0, r3
 800d362:	f7fe fc9e 	bl	800bca2 <USBD_LL_Reset>
}
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fcf1 	bl	800bd66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	6812      	ldr	r2, [r2, #0]
 800d392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d396:	f043 0301 	orr.w	r3, r3, #1
 800d39a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d005      	beq.n	800d3b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3a4:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <HAL_PCD_SuspendCallback+0x48>)
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	4a03      	ldr	r2, [pc, #12]	; (800d3b8 <HAL_PCD_SuspendCallback+0x48>)
 800d3aa:	f043 0306 	orr.w	r3, r3, #6
 800d3ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	e000ed00 	.word	0xe000ed00

0800d3bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fce1 	bl	800bd92 <USBD_LL_Resume>
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3ea:	78fa      	ldrb	r2, [r7, #3]
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fe fd39 	bl	800be66 <USBD_LL_IsoOUTIncomplete>
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d40e:	78fa      	ldrb	r2, [r7, #3]
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f7fe fcf5 	bl	800be02 <USBD_LL_IsoINIncomplete>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fd4b 	bl	800beca <USBD_LL_DevConnected>
}
 800d434:	bf00      	nop
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fd48 	bl	800bee0 <USBD_LL_DevDisconnected>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d13c      	bne.n	800d4e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d468:	4a20      	ldr	r2, [pc, #128]	; (800d4ec <USBD_LL_Init+0x94>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <USBD_LL_Init+0x94>)
 800d474:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d478:	4b1c      	ldr	r3, [pc, #112]	; (800d4ec <USBD_LL_Init+0x94>)
 800d47a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d47e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d480:	4b1a      	ldr	r3, [pc, #104]	; (800d4ec <USBD_LL_Init+0x94>)
 800d482:	2204      	movs	r2, #4
 800d484:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d486:	4b19      	ldr	r3, [pc, #100]	; (800d4ec <USBD_LL_Init+0x94>)
 800d488:	2202      	movs	r2, #2
 800d48a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d48c:	4b17      	ldr	r3, [pc, #92]	; (800d4ec <USBD_LL_Init+0x94>)
 800d48e:	2200      	movs	r2, #0
 800d490:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d492:	4b16      	ldr	r3, [pc, #88]	; (800d4ec <USBD_LL_Init+0x94>)
 800d494:	2202      	movs	r2, #2
 800d496:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d498:	4b14      	ldr	r3, [pc, #80]	; (800d4ec <USBD_LL_Init+0x94>)
 800d49a:	2200      	movs	r2, #0
 800d49c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4a4:	4b11      	ldr	r3, [pc, #68]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4aa:	4b10      	ldr	r3, [pc, #64]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4b0:	4b0e      	ldr	r3, [pc, #56]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4b6:	480d      	ldr	r0, [pc, #52]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4b8:	f7f8 fa61 	bl	800597e <HAL_PCD_Init>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d4c2:	f7f6 f821 	bl	8003508 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d4c6:	2180      	movs	r1, #128	; 0x80
 800d4c8:	4808      	ldr	r0, [pc, #32]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4ca:	f7f9 fcb8 	bl	8006e3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d4ce:	2240      	movs	r2, #64	; 0x40
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4806      	ldr	r0, [pc, #24]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4d4:	f7f9 fc6c 	bl	8006db0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d4d8:	2280      	movs	r2, #128	; 0x80
 800d4da:	2101      	movs	r1, #1
 800d4dc:	4803      	ldr	r0, [pc, #12]	; (800d4ec <USBD_LL_Init+0x94>)
 800d4de:	f7f9 fc67 	bl	8006db0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20001b50 	.word	0x20001b50

0800d4f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d506:	4618      	mov	r0, r3
 800d508:	f7f8 fb56 	bl	8005bb8 <HAL_PCD_Start>
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 f942 	bl	800d79c <USBD_Get_USB_Status>
 800d518:	4603      	mov	r3, r0
 800d51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	4608      	mov	r0, r1
 800d530:	4611      	mov	r1, r2
 800d532:	461a      	mov	r2, r3
 800d534:	4603      	mov	r3, r0
 800d536:	70fb      	strb	r3, [r7, #3]
 800d538:	460b      	mov	r3, r1
 800d53a:	70bb      	strb	r3, [r7, #2]
 800d53c:	4613      	mov	r3, r2
 800d53e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d54e:	78bb      	ldrb	r3, [r7, #2]
 800d550:	883a      	ldrh	r2, [r7, #0]
 800d552:	78f9      	ldrb	r1, [r7, #3]
 800d554:	f7f9 f827 	bl	80065a6 <HAL_PCD_EP_Open>
 800d558:	4603      	mov	r3, r0
 800d55a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	4618      	mov	r0, r3
 800d560:	f000 f91c 	bl	800d79c <USBD_Get_USB_Status>
 800d564:	4603      	mov	r3, r0
 800d566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d568:	7bbb      	ldrb	r3, [r7, #14]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	460b      	mov	r3, r1
 800d57c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d58c:	78fa      	ldrb	r2, [r7, #3]
 800d58e:	4611      	mov	r1, r2
 800d590:	4618      	mov	r0, r3
 800d592:	f7f9 f870 	bl	8006676 <HAL_PCD_EP_Close>
 800d596:	4603      	mov	r3, r0
 800d598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 f8fd 	bl	800d79c <USBD_Get_USB_Status>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5ca:	78fa      	ldrb	r2, [r7, #3]
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f9 f948 	bl	8006864 <HAL_PCD_EP_SetStall>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 f8de 	bl	800d79c <USBD_Get_USB_Status>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d608:	78fa      	ldrb	r2, [r7, #3]
 800d60a:	4611      	mov	r1, r2
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f9 f98d 	bl	800692c <HAL_PCD_EP_ClrStall>
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 f8bf 	bl	800d79c <USBD_Get_USB_Status>
 800d61e:	4603      	mov	r3, r0
 800d620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d622:	7bbb      	ldrb	r3, [r7, #14]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d63e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d644:	2b00      	cmp	r3, #0
 800d646:	da0b      	bge.n	800d660 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d648:	78fb      	ldrb	r3, [r7, #3]
 800d64a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d64e:	68f9      	ldr	r1, [r7, #12]
 800d650:	4613      	mov	r3, r2
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	4413      	add	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	440b      	add	r3, r1
 800d65a:	333e      	adds	r3, #62	; 0x3e
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	e00b      	b.n	800d678 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d666:	68f9      	ldr	r1, [r7, #12]
 800d668:	4613      	mov	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4413      	add	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	440b      	add	r3, r1
 800d672:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d676:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	460b      	mov	r3, r1
 800d68e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d69e:	78fa      	ldrb	r2, [r7, #3]
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7f8 ff5a 	bl	800655c <HAL_PCD_SetAddress>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 f874 	bl	800d79c <USBD_Get_USB_Status>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b086      	sub	sp, #24
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	603b      	str	r3, [r7, #0]
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d6e0:	7af9      	ldrb	r1, [r7, #11]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	f7f9 f873 	bl	80067d0 <HAL_PCD_EP_Transmit>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f853 	bl	800d79c <USBD_Get_USB_Status>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d6fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	460b      	mov	r3, r1
 800d712:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d722:	7af9      	ldrb	r1, [r7, #11]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	f7f8 ffef 	bl	800670a <HAL_PCD_EP_Receive>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	4618      	mov	r0, r3
 800d734:	f000 f832 	bl	800d79c <USBD_Get_USB_Status>
 800d738:	4603      	mov	r3, r0
 800d73a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d73c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b082      	sub	sp, #8
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	460b      	mov	r3, r1
 800d750:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d758:	78fa      	ldrb	r2, [r7, #3]
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f9 f81f 	bl	80067a0 <HAL_PCD_EP_GetRxCount>
 800d762:	4603      	mov	r3, r0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d774:	4b03      	ldr	r3, [pc, #12]	; (800d784 <USBD_static_malloc+0x18>)
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000205c 	.word	0x2000205c

0800d788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]

}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d817      	bhi.n	800d7e0 <USBD_Get_USB_Status+0x44>
 800d7b0:	a201      	add	r2, pc, #4	; (adr r2, 800d7b8 <USBD_Get_USB_Status+0x1c>)
 800d7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b6:	bf00      	nop
 800d7b8:	0800d7c9 	.word	0x0800d7c9
 800d7bc:	0800d7cf 	.word	0x0800d7cf
 800d7c0:	0800d7d5 	.word	0x0800d7d5
 800d7c4:	0800d7db 	.word	0x0800d7db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d7cc:	e00b      	b.n	800d7e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d2:	e008      	b.n	800d7e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d8:	e005      	b.n	800d7e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7da:	2303      	movs	r3, #3
 800d7dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7de:	e002      	b.n	800d7e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e4:	bf00      	nop
  }
  return usb_status;
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <__errno>:
 800d7f4:	4b01      	ldr	r3, [pc, #4]	; (800d7fc <__errno+0x8>)
 800d7f6:	6818      	ldr	r0, [r3, #0]
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20000194 	.word	0x20000194

0800d800 <__libc_init_array>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4d0d      	ldr	r5, [pc, #52]	; (800d838 <__libc_init_array+0x38>)
 800d804:	4c0d      	ldr	r4, [pc, #52]	; (800d83c <__libc_init_array+0x3c>)
 800d806:	1b64      	subs	r4, r4, r5
 800d808:	10a4      	asrs	r4, r4, #2
 800d80a:	2600      	movs	r6, #0
 800d80c:	42a6      	cmp	r6, r4
 800d80e:	d109      	bne.n	800d824 <__libc_init_array+0x24>
 800d810:	4d0b      	ldr	r5, [pc, #44]	; (800d840 <__libc_init_array+0x40>)
 800d812:	4c0c      	ldr	r4, [pc, #48]	; (800d844 <__libc_init_array+0x44>)
 800d814:	f003 fce8 	bl	80111e8 <_init>
 800d818:	1b64      	subs	r4, r4, r5
 800d81a:	10a4      	asrs	r4, r4, #2
 800d81c:	2600      	movs	r6, #0
 800d81e:	42a6      	cmp	r6, r4
 800d820:	d105      	bne.n	800d82e <__libc_init_array+0x2e>
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	f855 3b04 	ldr.w	r3, [r5], #4
 800d828:	4798      	blx	r3
 800d82a:	3601      	adds	r6, #1
 800d82c:	e7ee      	b.n	800d80c <__libc_init_array+0xc>
 800d82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d832:	4798      	blx	r3
 800d834:	3601      	adds	r6, #1
 800d836:	e7f2      	b.n	800d81e <__libc_init_array+0x1e>
 800d838:	080117a0 	.word	0x080117a0
 800d83c:	080117a0 	.word	0x080117a0
 800d840:	080117a0 	.word	0x080117a0
 800d844:	080117a4 	.word	0x080117a4

0800d848 <memset>:
 800d848:	4402      	add	r2, r0
 800d84a:	4603      	mov	r3, r0
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d100      	bne.n	800d852 <memset+0xa>
 800d850:	4770      	bx	lr
 800d852:	f803 1b01 	strb.w	r1, [r3], #1
 800d856:	e7f9      	b.n	800d84c <memset+0x4>

0800d858 <__cvt>:
 800d858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d85c:	ec55 4b10 	vmov	r4, r5, d0
 800d860:	2d00      	cmp	r5, #0
 800d862:	460e      	mov	r6, r1
 800d864:	4619      	mov	r1, r3
 800d866:	462b      	mov	r3, r5
 800d868:	bfbb      	ittet	lt
 800d86a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d86e:	461d      	movlt	r5, r3
 800d870:	2300      	movge	r3, #0
 800d872:	232d      	movlt	r3, #45	; 0x2d
 800d874:	700b      	strb	r3, [r1, #0]
 800d876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d878:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d87c:	4691      	mov	r9, r2
 800d87e:	f023 0820 	bic.w	r8, r3, #32
 800d882:	bfbc      	itt	lt
 800d884:	4622      	movlt	r2, r4
 800d886:	4614      	movlt	r4, r2
 800d888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d88c:	d005      	beq.n	800d89a <__cvt+0x42>
 800d88e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d892:	d100      	bne.n	800d896 <__cvt+0x3e>
 800d894:	3601      	adds	r6, #1
 800d896:	2102      	movs	r1, #2
 800d898:	e000      	b.n	800d89c <__cvt+0x44>
 800d89a:	2103      	movs	r1, #3
 800d89c:	ab03      	add	r3, sp, #12
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	ab02      	add	r3, sp, #8
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	ec45 4b10 	vmov	d0, r4, r5
 800d8a8:	4653      	mov	r3, sl
 800d8aa:	4632      	mov	r2, r6
 800d8ac:	f000 fe38 	bl	800e520 <_dtoa_r>
 800d8b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	d102      	bne.n	800d8be <__cvt+0x66>
 800d8b8:	f019 0f01 	tst.w	r9, #1
 800d8bc:	d022      	beq.n	800d904 <__cvt+0xac>
 800d8be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8c2:	eb07 0906 	add.w	r9, r7, r6
 800d8c6:	d110      	bne.n	800d8ea <__cvt+0x92>
 800d8c8:	783b      	ldrb	r3, [r7, #0]
 800d8ca:	2b30      	cmp	r3, #48	; 0x30
 800d8cc:	d10a      	bne.n	800d8e4 <__cvt+0x8c>
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f3 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8da:	b918      	cbnz	r0, 800d8e4 <__cvt+0x8c>
 800d8dc:	f1c6 0601 	rsb	r6, r6, #1
 800d8e0:	f8ca 6000 	str.w	r6, [sl]
 800d8e4:	f8da 3000 	ldr.w	r3, [sl]
 800d8e8:	4499      	add	r9, r3
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f3 f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8f6:	b108      	cbz	r0, 800d8fc <__cvt+0xa4>
 800d8f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8fc:	2230      	movs	r2, #48	; 0x30
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	454b      	cmp	r3, r9
 800d902:	d307      	bcc.n	800d914 <__cvt+0xbc>
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d908:	1bdb      	subs	r3, r3, r7
 800d90a:	4638      	mov	r0, r7
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	b004      	add	sp, #16
 800d910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d914:	1c59      	adds	r1, r3, #1
 800d916:	9103      	str	r1, [sp, #12]
 800d918:	701a      	strb	r2, [r3, #0]
 800d91a:	e7f0      	b.n	800d8fe <__cvt+0xa6>

0800d91c <__exponent>:
 800d91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d91e:	4603      	mov	r3, r0
 800d920:	2900      	cmp	r1, #0
 800d922:	bfb8      	it	lt
 800d924:	4249      	neglt	r1, r1
 800d926:	f803 2b02 	strb.w	r2, [r3], #2
 800d92a:	bfb4      	ite	lt
 800d92c:	222d      	movlt	r2, #45	; 0x2d
 800d92e:	222b      	movge	r2, #43	; 0x2b
 800d930:	2909      	cmp	r1, #9
 800d932:	7042      	strb	r2, [r0, #1]
 800d934:	dd2a      	ble.n	800d98c <__exponent+0x70>
 800d936:	f10d 0407 	add.w	r4, sp, #7
 800d93a:	46a4      	mov	ip, r4
 800d93c:	270a      	movs	r7, #10
 800d93e:	46a6      	mov	lr, r4
 800d940:	460a      	mov	r2, r1
 800d942:	fb91 f6f7 	sdiv	r6, r1, r7
 800d946:	fb07 1516 	mls	r5, r7, r6, r1
 800d94a:	3530      	adds	r5, #48	; 0x30
 800d94c:	2a63      	cmp	r2, #99	; 0x63
 800d94e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d952:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d956:	4631      	mov	r1, r6
 800d958:	dcf1      	bgt.n	800d93e <__exponent+0x22>
 800d95a:	3130      	adds	r1, #48	; 0x30
 800d95c:	f1ae 0502 	sub.w	r5, lr, #2
 800d960:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d964:	1c44      	adds	r4, r0, #1
 800d966:	4629      	mov	r1, r5
 800d968:	4561      	cmp	r1, ip
 800d96a:	d30a      	bcc.n	800d982 <__exponent+0x66>
 800d96c:	f10d 0209 	add.w	r2, sp, #9
 800d970:	eba2 020e 	sub.w	r2, r2, lr
 800d974:	4565      	cmp	r5, ip
 800d976:	bf88      	it	hi
 800d978:	2200      	movhi	r2, #0
 800d97a:	4413      	add	r3, r2
 800d97c:	1a18      	subs	r0, r3, r0
 800d97e:	b003      	add	sp, #12
 800d980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d986:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d98a:	e7ed      	b.n	800d968 <__exponent+0x4c>
 800d98c:	2330      	movs	r3, #48	; 0x30
 800d98e:	3130      	adds	r1, #48	; 0x30
 800d990:	7083      	strb	r3, [r0, #2]
 800d992:	70c1      	strb	r1, [r0, #3]
 800d994:	1d03      	adds	r3, r0, #4
 800d996:	e7f1      	b.n	800d97c <__exponent+0x60>

0800d998 <_printf_float>:
 800d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	ed2d 8b02 	vpush	{d8}
 800d9a0:	b08d      	sub	sp, #52	; 0x34
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d9a8:	4616      	mov	r6, r2
 800d9aa:	461f      	mov	r7, r3
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	f001 fd5d 	bl	800f46c <_localeconv_r>
 800d9b2:	f8d0 a000 	ldr.w	sl, [r0]
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	f7f2 fc12 	bl	80001e0 <strlen>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	930a      	str	r3, [sp, #40]	; 0x28
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d9c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9cc:	3307      	adds	r3, #7
 800d9ce:	f023 0307 	bic.w	r3, r3, #7
 800d9d2:	f103 0208 	add.w	r2, r3, #8
 800d9d6:	f8c8 2000 	str.w	r2, [r8]
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d9e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d9e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9ea:	9307      	str	r3, [sp, #28]
 800d9ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9f0:	ee08 0a10 	vmov	s16, r0
 800d9f4:	4b9f      	ldr	r3, [pc, #636]	; (800dc74 <_printf_float+0x2dc>)
 800d9f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	f7f3 f89d 	bl	8000b3c <__aeabi_dcmpun>
 800da02:	bb88      	cbnz	r0, 800da68 <_printf_float+0xd0>
 800da04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da08:	4b9a      	ldr	r3, [pc, #616]	; (800dc74 <_printf_float+0x2dc>)
 800da0a:	f04f 32ff 	mov.w	r2, #4294967295
 800da0e:	f7f3 f877 	bl	8000b00 <__aeabi_dcmple>
 800da12:	bb48      	cbnz	r0, 800da68 <_printf_float+0xd0>
 800da14:	2200      	movs	r2, #0
 800da16:	2300      	movs	r3, #0
 800da18:	4640      	mov	r0, r8
 800da1a:	4649      	mov	r1, r9
 800da1c:	f7f3 f866 	bl	8000aec <__aeabi_dcmplt>
 800da20:	b110      	cbz	r0, 800da28 <_printf_float+0x90>
 800da22:	232d      	movs	r3, #45	; 0x2d
 800da24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da28:	4b93      	ldr	r3, [pc, #588]	; (800dc78 <_printf_float+0x2e0>)
 800da2a:	4894      	ldr	r0, [pc, #592]	; (800dc7c <_printf_float+0x2e4>)
 800da2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da30:	bf94      	ite	ls
 800da32:	4698      	movls	r8, r3
 800da34:	4680      	movhi	r8, r0
 800da36:	2303      	movs	r3, #3
 800da38:	6123      	str	r3, [r4, #16]
 800da3a:	9b05      	ldr	r3, [sp, #20]
 800da3c:	f023 0204 	bic.w	r2, r3, #4
 800da40:	6022      	str	r2, [r4, #0]
 800da42:	f04f 0900 	mov.w	r9, #0
 800da46:	9700      	str	r7, [sp, #0]
 800da48:	4633      	mov	r3, r6
 800da4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800da4c:	4621      	mov	r1, r4
 800da4e:	4628      	mov	r0, r5
 800da50:	f000 f9d8 	bl	800de04 <_printf_common>
 800da54:	3001      	adds	r0, #1
 800da56:	f040 8090 	bne.w	800db7a <_printf_float+0x1e2>
 800da5a:	f04f 30ff 	mov.w	r0, #4294967295
 800da5e:	b00d      	add	sp, #52	; 0x34
 800da60:	ecbd 8b02 	vpop	{d8}
 800da64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da68:	4642      	mov	r2, r8
 800da6a:	464b      	mov	r3, r9
 800da6c:	4640      	mov	r0, r8
 800da6e:	4649      	mov	r1, r9
 800da70:	f7f3 f864 	bl	8000b3c <__aeabi_dcmpun>
 800da74:	b140      	cbz	r0, 800da88 <_printf_float+0xf0>
 800da76:	464b      	mov	r3, r9
 800da78:	2b00      	cmp	r3, #0
 800da7a:	bfbc      	itt	lt
 800da7c:	232d      	movlt	r3, #45	; 0x2d
 800da7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da82:	487f      	ldr	r0, [pc, #508]	; (800dc80 <_printf_float+0x2e8>)
 800da84:	4b7f      	ldr	r3, [pc, #508]	; (800dc84 <_printf_float+0x2ec>)
 800da86:	e7d1      	b.n	800da2c <_printf_float+0x94>
 800da88:	6863      	ldr	r3, [r4, #4]
 800da8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da8e:	9206      	str	r2, [sp, #24]
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	d13f      	bne.n	800db14 <_printf_float+0x17c>
 800da94:	2306      	movs	r3, #6
 800da96:	6063      	str	r3, [r4, #4]
 800da98:	9b05      	ldr	r3, [sp, #20]
 800da9a:	6861      	ldr	r1, [r4, #4]
 800da9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800daa0:	2300      	movs	r3, #0
 800daa2:	9303      	str	r3, [sp, #12]
 800daa4:	ab0a      	add	r3, sp, #40	; 0x28
 800daa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800daaa:	ab09      	add	r3, sp, #36	; 0x24
 800daac:	ec49 8b10 	vmov	d0, r8, r9
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	6022      	str	r2, [r4, #0]
 800dab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dab8:	4628      	mov	r0, r5
 800daba:	f7ff fecd 	bl	800d858 <__cvt>
 800dabe:	9b06      	ldr	r3, [sp, #24]
 800dac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dac2:	2b47      	cmp	r3, #71	; 0x47
 800dac4:	4680      	mov	r8, r0
 800dac6:	d108      	bne.n	800dada <_printf_float+0x142>
 800dac8:	1cc8      	adds	r0, r1, #3
 800daca:	db02      	blt.n	800dad2 <_printf_float+0x13a>
 800dacc:	6863      	ldr	r3, [r4, #4]
 800dace:	4299      	cmp	r1, r3
 800dad0:	dd41      	ble.n	800db56 <_printf_float+0x1be>
 800dad2:	f1ab 0b02 	sub.w	fp, fp, #2
 800dad6:	fa5f fb8b 	uxtb.w	fp, fp
 800dada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dade:	d820      	bhi.n	800db22 <_printf_float+0x18a>
 800dae0:	3901      	subs	r1, #1
 800dae2:	465a      	mov	r2, fp
 800dae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dae8:	9109      	str	r1, [sp, #36]	; 0x24
 800daea:	f7ff ff17 	bl	800d91c <__exponent>
 800daee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daf0:	1813      	adds	r3, r2, r0
 800daf2:	2a01      	cmp	r2, #1
 800daf4:	4681      	mov	r9, r0
 800daf6:	6123      	str	r3, [r4, #16]
 800daf8:	dc02      	bgt.n	800db00 <_printf_float+0x168>
 800dafa:	6822      	ldr	r2, [r4, #0]
 800dafc:	07d2      	lsls	r2, r2, #31
 800dafe:	d501      	bpl.n	800db04 <_printf_float+0x16c>
 800db00:	3301      	adds	r3, #1
 800db02:	6123      	str	r3, [r4, #16]
 800db04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d09c      	beq.n	800da46 <_printf_float+0xae>
 800db0c:	232d      	movs	r3, #45	; 0x2d
 800db0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db12:	e798      	b.n	800da46 <_printf_float+0xae>
 800db14:	9a06      	ldr	r2, [sp, #24]
 800db16:	2a47      	cmp	r2, #71	; 0x47
 800db18:	d1be      	bne.n	800da98 <_printf_float+0x100>
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1bc      	bne.n	800da98 <_printf_float+0x100>
 800db1e:	2301      	movs	r3, #1
 800db20:	e7b9      	b.n	800da96 <_printf_float+0xfe>
 800db22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db26:	d118      	bne.n	800db5a <_printf_float+0x1c2>
 800db28:	2900      	cmp	r1, #0
 800db2a:	6863      	ldr	r3, [r4, #4]
 800db2c:	dd0b      	ble.n	800db46 <_printf_float+0x1ae>
 800db2e:	6121      	str	r1, [r4, #16]
 800db30:	b913      	cbnz	r3, 800db38 <_printf_float+0x1a0>
 800db32:	6822      	ldr	r2, [r4, #0]
 800db34:	07d0      	lsls	r0, r2, #31
 800db36:	d502      	bpl.n	800db3e <_printf_float+0x1a6>
 800db38:	3301      	adds	r3, #1
 800db3a:	440b      	add	r3, r1
 800db3c:	6123      	str	r3, [r4, #16]
 800db3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800db40:	f04f 0900 	mov.w	r9, #0
 800db44:	e7de      	b.n	800db04 <_printf_float+0x16c>
 800db46:	b913      	cbnz	r3, 800db4e <_printf_float+0x1b6>
 800db48:	6822      	ldr	r2, [r4, #0]
 800db4a:	07d2      	lsls	r2, r2, #31
 800db4c:	d501      	bpl.n	800db52 <_printf_float+0x1ba>
 800db4e:	3302      	adds	r3, #2
 800db50:	e7f4      	b.n	800db3c <_printf_float+0x1a4>
 800db52:	2301      	movs	r3, #1
 800db54:	e7f2      	b.n	800db3c <_printf_float+0x1a4>
 800db56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5c:	4299      	cmp	r1, r3
 800db5e:	db05      	blt.n	800db6c <_printf_float+0x1d4>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	6121      	str	r1, [r4, #16]
 800db64:	07d8      	lsls	r0, r3, #31
 800db66:	d5ea      	bpl.n	800db3e <_printf_float+0x1a6>
 800db68:	1c4b      	adds	r3, r1, #1
 800db6a:	e7e7      	b.n	800db3c <_printf_float+0x1a4>
 800db6c:	2900      	cmp	r1, #0
 800db6e:	bfd4      	ite	le
 800db70:	f1c1 0202 	rsble	r2, r1, #2
 800db74:	2201      	movgt	r2, #1
 800db76:	4413      	add	r3, r2
 800db78:	e7e0      	b.n	800db3c <_printf_float+0x1a4>
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	055a      	lsls	r2, r3, #21
 800db7e:	d407      	bmi.n	800db90 <_printf_float+0x1f8>
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	4642      	mov	r2, r8
 800db84:	4631      	mov	r1, r6
 800db86:	4628      	mov	r0, r5
 800db88:	47b8      	blx	r7
 800db8a:	3001      	adds	r0, #1
 800db8c:	d12c      	bne.n	800dbe8 <_printf_float+0x250>
 800db8e:	e764      	b.n	800da5a <_printf_float+0xc2>
 800db90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db94:	f240 80e0 	bls.w	800dd58 <_printf_float+0x3c0>
 800db98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db9c:	2200      	movs	r2, #0
 800db9e:	2300      	movs	r3, #0
 800dba0:	f7f2 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d034      	beq.n	800dc12 <_printf_float+0x27a>
 800dba8:	4a37      	ldr	r2, [pc, #220]	; (800dc88 <_printf_float+0x2f0>)
 800dbaa:	2301      	movs	r3, #1
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f43f af51 	beq.w	800da5a <_printf_float+0xc2>
 800dbb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	db02      	blt.n	800dbc6 <_printf_float+0x22e>
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	07d8      	lsls	r0, r3, #31
 800dbc4:	d510      	bpl.n	800dbe8 <_printf_float+0x250>
 800dbc6:	ee18 3a10 	vmov	r3, s16
 800dbca:	4652      	mov	r2, sl
 800dbcc:	4631      	mov	r1, r6
 800dbce:	4628      	mov	r0, r5
 800dbd0:	47b8      	blx	r7
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	f43f af41 	beq.w	800da5a <_printf_float+0xc2>
 800dbd8:	f04f 0800 	mov.w	r8, #0
 800dbdc:	f104 091a 	add.w	r9, r4, #26
 800dbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	4543      	cmp	r3, r8
 800dbe6:	dc09      	bgt.n	800dbfc <_printf_float+0x264>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	079b      	lsls	r3, r3, #30
 800dbec:	f100 8105 	bmi.w	800ddfa <_printf_float+0x462>
 800dbf0:	68e0      	ldr	r0, [r4, #12]
 800dbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbf4:	4298      	cmp	r0, r3
 800dbf6:	bfb8      	it	lt
 800dbf8:	4618      	movlt	r0, r3
 800dbfa:	e730      	b.n	800da5e <_printf_float+0xc6>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	464a      	mov	r2, r9
 800dc00:	4631      	mov	r1, r6
 800dc02:	4628      	mov	r0, r5
 800dc04:	47b8      	blx	r7
 800dc06:	3001      	adds	r0, #1
 800dc08:	f43f af27 	beq.w	800da5a <_printf_float+0xc2>
 800dc0c:	f108 0801 	add.w	r8, r8, #1
 800dc10:	e7e6      	b.n	800dbe0 <_printf_float+0x248>
 800dc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	dc39      	bgt.n	800dc8c <_printf_float+0x2f4>
 800dc18:	4a1b      	ldr	r2, [pc, #108]	; (800dc88 <_printf_float+0x2f0>)
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b8      	blx	r7
 800dc22:	3001      	adds	r0, #1
 800dc24:	f43f af19 	beq.w	800da5a <_printf_float+0xc2>
 800dc28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	d102      	bne.n	800dc36 <_printf_float+0x29e>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d5d8      	bpl.n	800dbe8 <_printf_float+0x250>
 800dc36:	ee18 3a10 	vmov	r3, s16
 800dc3a:	4652      	mov	r2, sl
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b8      	blx	r7
 800dc42:	3001      	adds	r0, #1
 800dc44:	f43f af09 	beq.w	800da5a <_printf_float+0xc2>
 800dc48:	f04f 0900 	mov.w	r9, #0
 800dc4c:	f104 0a1a 	add.w	sl, r4, #26
 800dc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc52:	425b      	negs	r3, r3
 800dc54:	454b      	cmp	r3, r9
 800dc56:	dc01      	bgt.n	800dc5c <_printf_float+0x2c4>
 800dc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc5a:	e792      	b.n	800db82 <_printf_float+0x1ea>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	4652      	mov	r2, sl
 800dc60:	4631      	mov	r1, r6
 800dc62:	4628      	mov	r0, r5
 800dc64:	47b8      	blx	r7
 800dc66:	3001      	adds	r0, #1
 800dc68:	f43f aef7 	beq.w	800da5a <_printf_float+0xc2>
 800dc6c:	f109 0901 	add.w	r9, r9, #1
 800dc70:	e7ee      	b.n	800dc50 <_printf_float+0x2b8>
 800dc72:	bf00      	nop
 800dc74:	7fefffff 	.word	0x7fefffff
 800dc78:	0801134c 	.word	0x0801134c
 800dc7c:	08011350 	.word	0x08011350
 800dc80:	08011358 	.word	0x08011358
 800dc84:	08011354 	.word	0x08011354
 800dc88:	0801135c 	.word	0x0801135c
 800dc8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc90:	429a      	cmp	r2, r3
 800dc92:	bfa8      	it	ge
 800dc94:	461a      	movge	r2, r3
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	4691      	mov	r9, r2
 800dc9a:	dc37      	bgt.n	800dd0c <_printf_float+0x374>
 800dc9c:	f04f 0b00 	mov.w	fp, #0
 800dca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dca4:	f104 021a 	add.w	r2, r4, #26
 800dca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcaa:	9305      	str	r3, [sp, #20]
 800dcac:	eba3 0309 	sub.w	r3, r3, r9
 800dcb0:	455b      	cmp	r3, fp
 800dcb2:	dc33      	bgt.n	800dd1c <_printf_float+0x384>
 800dcb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	db3b      	blt.n	800dd34 <_printf_float+0x39c>
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	07da      	lsls	r2, r3, #31
 800dcc0:	d438      	bmi.n	800dd34 <_printf_float+0x39c>
 800dcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc4:	9a05      	ldr	r2, [sp, #20]
 800dcc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcc8:	1a9a      	subs	r2, r3, r2
 800dcca:	eba3 0901 	sub.w	r9, r3, r1
 800dcce:	4591      	cmp	r9, r2
 800dcd0:	bfa8      	it	ge
 800dcd2:	4691      	movge	r9, r2
 800dcd4:	f1b9 0f00 	cmp.w	r9, #0
 800dcd8:	dc35      	bgt.n	800dd46 <_printf_float+0x3ae>
 800dcda:	f04f 0800 	mov.w	r8, #0
 800dcde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dce2:	f104 0a1a 	add.w	sl, r4, #26
 800dce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcea:	1a9b      	subs	r3, r3, r2
 800dcec:	eba3 0309 	sub.w	r3, r3, r9
 800dcf0:	4543      	cmp	r3, r8
 800dcf2:	f77f af79 	ble.w	800dbe8 <_printf_float+0x250>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	4652      	mov	r2, sl
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	f43f aeaa 	beq.w	800da5a <_printf_float+0xc2>
 800dd06:	f108 0801 	add.w	r8, r8, #1
 800dd0a:	e7ec      	b.n	800dce6 <_printf_float+0x34e>
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4642      	mov	r2, r8
 800dd12:	4628      	mov	r0, r5
 800dd14:	47b8      	blx	r7
 800dd16:	3001      	adds	r0, #1
 800dd18:	d1c0      	bne.n	800dc9c <_printf_float+0x304>
 800dd1a:	e69e      	b.n	800da5a <_printf_float+0xc2>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	4631      	mov	r1, r6
 800dd20:	4628      	mov	r0, r5
 800dd22:	9205      	str	r2, [sp, #20]
 800dd24:	47b8      	blx	r7
 800dd26:	3001      	adds	r0, #1
 800dd28:	f43f ae97 	beq.w	800da5a <_printf_float+0xc2>
 800dd2c:	9a05      	ldr	r2, [sp, #20]
 800dd2e:	f10b 0b01 	add.w	fp, fp, #1
 800dd32:	e7b9      	b.n	800dca8 <_printf_float+0x310>
 800dd34:	ee18 3a10 	vmov	r3, s16
 800dd38:	4652      	mov	r2, sl
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	47b8      	blx	r7
 800dd40:	3001      	adds	r0, #1
 800dd42:	d1be      	bne.n	800dcc2 <_printf_float+0x32a>
 800dd44:	e689      	b.n	800da5a <_printf_float+0xc2>
 800dd46:	9a05      	ldr	r2, [sp, #20]
 800dd48:	464b      	mov	r3, r9
 800dd4a:	4442      	add	r2, r8
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4628      	mov	r0, r5
 800dd50:	47b8      	blx	r7
 800dd52:	3001      	adds	r0, #1
 800dd54:	d1c1      	bne.n	800dcda <_printf_float+0x342>
 800dd56:	e680      	b.n	800da5a <_printf_float+0xc2>
 800dd58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd5a:	2a01      	cmp	r2, #1
 800dd5c:	dc01      	bgt.n	800dd62 <_printf_float+0x3ca>
 800dd5e:	07db      	lsls	r3, r3, #31
 800dd60:	d538      	bpl.n	800ddd4 <_printf_float+0x43c>
 800dd62:	2301      	movs	r3, #1
 800dd64:	4642      	mov	r2, r8
 800dd66:	4631      	mov	r1, r6
 800dd68:	4628      	mov	r0, r5
 800dd6a:	47b8      	blx	r7
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	f43f ae74 	beq.w	800da5a <_printf_float+0xc2>
 800dd72:	ee18 3a10 	vmov	r3, s16
 800dd76:	4652      	mov	r2, sl
 800dd78:	4631      	mov	r1, r6
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	47b8      	blx	r7
 800dd7e:	3001      	adds	r0, #1
 800dd80:	f43f ae6b 	beq.w	800da5a <_printf_float+0xc2>
 800dd84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	f7f2 fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd90:	b9d8      	cbnz	r0, 800ddca <_printf_float+0x432>
 800dd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd94:	f108 0201 	add.w	r2, r8, #1
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	47b8      	blx	r7
 800dda0:	3001      	adds	r0, #1
 800dda2:	d10e      	bne.n	800ddc2 <_printf_float+0x42a>
 800dda4:	e659      	b.n	800da5a <_printf_float+0xc2>
 800dda6:	2301      	movs	r3, #1
 800dda8:	4652      	mov	r2, sl
 800ddaa:	4631      	mov	r1, r6
 800ddac:	4628      	mov	r0, r5
 800ddae:	47b8      	blx	r7
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	f43f ae52 	beq.w	800da5a <_printf_float+0xc2>
 800ddb6:	f108 0801 	add.w	r8, r8, #1
 800ddba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4543      	cmp	r3, r8
 800ddc0:	dcf1      	bgt.n	800dda6 <_printf_float+0x40e>
 800ddc2:	464b      	mov	r3, r9
 800ddc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddc8:	e6dc      	b.n	800db84 <_printf_float+0x1ec>
 800ddca:	f04f 0800 	mov.w	r8, #0
 800ddce:	f104 0a1a 	add.w	sl, r4, #26
 800ddd2:	e7f2      	b.n	800ddba <_printf_float+0x422>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	4642      	mov	r2, r8
 800ddd8:	e7df      	b.n	800dd9a <_printf_float+0x402>
 800ddda:	2301      	movs	r3, #1
 800dddc:	464a      	mov	r2, r9
 800ddde:	4631      	mov	r1, r6
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b8      	blx	r7
 800dde4:	3001      	adds	r0, #1
 800dde6:	f43f ae38 	beq.w	800da5a <_printf_float+0xc2>
 800ddea:	f108 0801 	add.w	r8, r8, #1
 800ddee:	68e3      	ldr	r3, [r4, #12]
 800ddf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddf2:	1a5b      	subs	r3, r3, r1
 800ddf4:	4543      	cmp	r3, r8
 800ddf6:	dcf0      	bgt.n	800ddda <_printf_float+0x442>
 800ddf8:	e6fa      	b.n	800dbf0 <_printf_float+0x258>
 800ddfa:	f04f 0800 	mov.w	r8, #0
 800ddfe:	f104 0919 	add.w	r9, r4, #25
 800de02:	e7f4      	b.n	800ddee <_printf_float+0x456>

0800de04 <_printf_common>:
 800de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de08:	4616      	mov	r6, r2
 800de0a:	4699      	mov	r9, r3
 800de0c:	688a      	ldr	r2, [r1, #8]
 800de0e:	690b      	ldr	r3, [r1, #16]
 800de10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de14:	4293      	cmp	r3, r2
 800de16:	bfb8      	it	lt
 800de18:	4613      	movlt	r3, r2
 800de1a:	6033      	str	r3, [r6, #0]
 800de1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de20:	4607      	mov	r7, r0
 800de22:	460c      	mov	r4, r1
 800de24:	b10a      	cbz	r2, 800de2a <_printf_common+0x26>
 800de26:	3301      	adds	r3, #1
 800de28:	6033      	str	r3, [r6, #0]
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	0699      	lsls	r1, r3, #26
 800de2e:	bf42      	ittt	mi
 800de30:	6833      	ldrmi	r3, [r6, #0]
 800de32:	3302      	addmi	r3, #2
 800de34:	6033      	strmi	r3, [r6, #0]
 800de36:	6825      	ldr	r5, [r4, #0]
 800de38:	f015 0506 	ands.w	r5, r5, #6
 800de3c:	d106      	bne.n	800de4c <_printf_common+0x48>
 800de3e:	f104 0a19 	add.w	sl, r4, #25
 800de42:	68e3      	ldr	r3, [r4, #12]
 800de44:	6832      	ldr	r2, [r6, #0]
 800de46:	1a9b      	subs	r3, r3, r2
 800de48:	42ab      	cmp	r3, r5
 800de4a:	dc26      	bgt.n	800de9a <_printf_common+0x96>
 800de4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de50:	1e13      	subs	r3, r2, #0
 800de52:	6822      	ldr	r2, [r4, #0]
 800de54:	bf18      	it	ne
 800de56:	2301      	movne	r3, #1
 800de58:	0692      	lsls	r2, r2, #26
 800de5a:	d42b      	bmi.n	800deb4 <_printf_common+0xb0>
 800de5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de60:	4649      	mov	r1, r9
 800de62:	4638      	mov	r0, r7
 800de64:	47c0      	blx	r8
 800de66:	3001      	adds	r0, #1
 800de68:	d01e      	beq.n	800dea8 <_printf_common+0xa4>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	68e5      	ldr	r5, [r4, #12]
 800de6e:	6832      	ldr	r2, [r6, #0]
 800de70:	f003 0306 	and.w	r3, r3, #6
 800de74:	2b04      	cmp	r3, #4
 800de76:	bf08      	it	eq
 800de78:	1aad      	subeq	r5, r5, r2
 800de7a:	68a3      	ldr	r3, [r4, #8]
 800de7c:	6922      	ldr	r2, [r4, #16]
 800de7e:	bf0c      	ite	eq
 800de80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de84:	2500      	movne	r5, #0
 800de86:	4293      	cmp	r3, r2
 800de88:	bfc4      	itt	gt
 800de8a:	1a9b      	subgt	r3, r3, r2
 800de8c:	18ed      	addgt	r5, r5, r3
 800de8e:	2600      	movs	r6, #0
 800de90:	341a      	adds	r4, #26
 800de92:	42b5      	cmp	r5, r6
 800de94:	d11a      	bne.n	800decc <_printf_common+0xc8>
 800de96:	2000      	movs	r0, #0
 800de98:	e008      	b.n	800deac <_printf_common+0xa8>
 800de9a:	2301      	movs	r3, #1
 800de9c:	4652      	mov	r2, sl
 800de9e:	4649      	mov	r1, r9
 800dea0:	4638      	mov	r0, r7
 800dea2:	47c0      	blx	r8
 800dea4:	3001      	adds	r0, #1
 800dea6:	d103      	bne.n	800deb0 <_printf_common+0xac>
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb0:	3501      	adds	r5, #1
 800deb2:	e7c6      	b.n	800de42 <_printf_common+0x3e>
 800deb4:	18e1      	adds	r1, r4, r3
 800deb6:	1c5a      	adds	r2, r3, #1
 800deb8:	2030      	movs	r0, #48	; 0x30
 800deba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800debe:	4422      	add	r2, r4
 800dec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dec8:	3302      	adds	r3, #2
 800deca:	e7c7      	b.n	800de5c <_printf_common+0x58>
 800decc:	2301      	movs	r3, #1
 800dece:	4622      	mov	r2, r4
 800ded0:	4649      	mov	r1, r9
 800ded2:	4638      	mov	r0, r7
 800ded4:	47c0      	blx	r8
 800ded6:	3001      	adds	r0, #1
 800ded8:	d0e6      	beq.n	800dea8 <_printf_common+0xa4>
 800deda:	3601      	adds	r6, #1
 800dedc:	e7d9      	b.n	800de92 <_printf_common+0x8e>
	...

0800dee0 <_printf_i>:
 800dee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dee4:	7e0f      	ldrb	r7, [r1, #24]
 800dee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dee8:	2f78      	cmp	r7, #120	; 0x78
 800deea:	4691      	mov	r9, r2
 800deec:	4680      	mov	r8, r0
 800deee:	460c      	mov	r4, r1
 800def0:	469a      	mov	sl, r3
 800def2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800def6:	d807      	bhi.n	800df08 <_printf_i+0x28>
 800def8:	2f62      	cmp	r7, #98	; 0x62
 800defa:	d80a      	bhi.n	800df12 <_printf_i+0x32>
 800defc:	2f00      	cmp	r7, #0
 800defe:	f000 80d8 	beq.w	800e0b2 <_printf_i+0x1d2>
 800df02:	2f58      	cmp	r7, #88	; 0x58
 800df04:	f000 80a3 	beq.w	800e04e <_printf_i+0x16e>
 800df08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df10:	e03a      	b.n	800df88 <_printf_i+0xa8>
 800df12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df16:	2b15      	cmp	r3, #21
 800df18:	d8f6      	bhi.n	800df08 <_printf_i+0x28>
 800df1a:	a101      	add	r1, pc, #4	; (adr r1, 800df20 <_printf_i+0x40>)
 800df1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df20:	0800df79 	.word	0x0800df79
 800df24:	0800df8d 	.word	0x0800df8d
 800df28:	0800df09 	.word	0x0800df09
 800df2c:	0800df09 	.word	0x0800df09
 800df30:	0800df09 	.word	0x0800df09
 800df34:	0800df09 	.word	0x0800df09
 800df38:	0800df8d 	.word	0x0800df8d
 800df3c:	0800df09 	.word	0x0800df09
 800df40:	0800df09 	.word	0x0800df09
 800df44:	0800df09 	.word	0x0800df09
 800df48:	0800df09 	.word	0x0800df09
 800df4c:	0800e099 	.word	0x0800e099
 800df50:	0800dfbd 	.word	0x0800dfbd
 800df54:	0800e07b 	.word	0x0800e07b
 800df58:	0800df09 	.word	0x0800df09
 800df5c:	0800df09 	.word	0x0800df09
 800df60:	0800e0bb 	.word	0x0800e0bb
 800df64:	0800df09 	.word	0x0800df09
 800df68:	0800dfbd 	.word	0x0800dfbd
 800df6c:	0800df09 	.word	0x0800df09
 800df70:	0800df09 	.word	0x0800df09
 800df74:	0800e083 	.word	0x0800e083
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	1d1a      	adds	r2, r3, #4
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	602a      	str	r2, [r5, #0]
 800df80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df88:	2301      	movs	r3, #1
 800df8a:	e0a3      	b.n	800e0d4 <_printf_i+0x1f4>
 800df8c:	6820      	ldr	r0, [r4, #0]
 800df8e:	6829      	ldr	r1, [r5, #0]
 800df90:	0606      	lsls	r6, r0, #24
 800df92:	f101 0304 	add.w	r3, r1, #4
 800df96:	d50a      	bpl.n	800dfae <_printf_i+0xce>
 800df98:	680e      	ldr	r6, [r1, #0]
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	2e00      	cmp	r6, #0
 800df9e:	da03      	bge.n	800dfa8 <_printf_i+0xc8>
 800dfa0:	232d      	movs	r3, #45	; 0x2d
 800dfa2:	4276      	negs	r6, r6
 800dfa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfa8:	485e      	ldr	r0, [pc, #376]	; (800e124 <_printf_i+0x244>)
 800dfaa:	230a      	movs	r3, #10
 800dfac:	e019      	b.n	800dfe2 <_printf_i+0x102>
 800dfae:	680e      	ldr	r6, [r1, #0]
 800dfb0:	602b      	str	r3, [r5, #0]
 800dfb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dfb6:	bf18      	it	ne
 800dfb8:	b236      	sxthne	r6, r6
 800dfba:	e7ef      	b.n	800df9c <_printf_i+0xbc>
 800dfbc:	682b      	ldr	r3, [r5, #0]
 800dfbe:	6820      	ldr	r0, [r4, #0]
 800dfc0:	1d19      	adds	r1, r3, #4
 800dfc2:	6029      	str	r1, [r5, #0]
 800dfc4:	0601      	lsls	r1, r0, #24
 800dfc6:	d501      	bpl.n	800dfcc <_printf_i+0xec>
 800dfc8:	681e      	ldr	r6, [r3, #0]
 800dfca:	e002      	b.n	800dfd2 <_printf_i+0xf2>
 800dfcc:	0646      	lsls	r6, r0, #25
 800dfce:	d5fb      	bpl.n	800dfc8 <_printf_i+0xe8>
 800dfd0:	881e      	ldrh	r6, [r3, #0]
 800dfd2:	4854      	ldr	r0, [pc, #336]	; (800e124 <_printf_i+0x244>)
 800dfd4:	2f6f      	cmp	r7, #111	; 0x6f
 800dfd6:	bf0c      	ite	eq
 800dfd8:	2308      	moveq	r3, #8
 800dfda:	230a      	movne	r3, #10
 800dfdc:	2100      	movs	r1, #0
 800dfde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfe2:	6865      	ldr	r5, [r4, #4]
 800dfe4:	60a5      	str	r5, [r4, #8]
 800dfe6:	2d00      	cmp	r5, #0
 800dfe8:	bfa2      	ittt	ge
 800dfea:	6821      	ldrge	r1, [r4, #0]
 800dfec:	f021 0104 	bicge.w	r1, r1, #4
 800dff0:	6021      	strge	r1, [r4, #0]
 800dff2:	b90e      	cbnz	r6, 800dff8 <_printf_i+0x118>
 800dff4:	2d00      	cmp	r5, #0
 800dff6:	d04d      	beq.n	800e094 <_printf_i+0x1b4>
 800dff8:	4615      	mov	r5, r2
 800dffa:	fbb6 f1f3 	udiv	r1, r6, r3
 800dffe:	fb03 6711 	mls	r7, r3, r1, r6
 800e002:	5dc7      	ldrb	r7, [r0, r7]
 800e004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e008:	4637      	mov	r7, r6
 800e00a:	42bb      	cmp	r3, r7
 800e00c:	460e      	mov	r6, r1
 800e00e:	d9f4      	bls.n	800dffa <_printf_i+0x11a>
 800e010:	2b08      	cmp	r3, #8
 800e012:	d10b      	bne.n	800e02c <_printf_i+0x14c>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	07de      	lsls	r6, r3, #31
 800e018:	d508      	bpl.n	800e02c <_printf_i+0x14c>
 800e01a:	6923      	ldr	r3, [r4, #16]
 800e01c:	6861      	ldr	r1, [r4, #4]
 800e01e:	4299      	cmp	r1, r3
 800e020:	bfde      	ittt	le
 800e022:	2330      	movle	r3, #48	; 0x30
 800e024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e02c:	1b52      	subs	r2, r2, r5
 800e02e:	6122      	str	r2, [r4, #16]
 800e030:	f8cd a000 	str.w	sl, [sp]
 800e034:	464b      	mov	r3, r9
 800e036:	aa03      	add	r2, sp, #12
 800e038:	4621      	mov	r1, r4
 800e03a:	4640      	mov	r0, r8
 800e03c:	f7ff fee2 	bl	800de04 <_printf_common>
 800e040:	3001      	adds	r0, #1
 800e042:	d14c      	bne.n	800e0de <_printf_i+0x1fe>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	b004      	add	sp, #16
 800e04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04e:	4835      	ldr	r0, [pc, #212]	; (800e124 <_printf_i+0x244>)
 800e050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e054:	6829      	ldr	r1, [r5, #0]
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	f851 6b04 	ldr.w	r6, [r1], #4
 800e05c:	6029      	str	r1, [r5, #0]
 800e05e:	061d      	lsls	r5, r3, #24
 800e060:	d514      	bpl.n	800e08c <_printf_i+0x1ac>
 800e062:	07df      	lsls	r7, r3, #31
 800e064:	bf44      	itt	mi
 800e066:	f043 0320 	orrmi.w	r3, r3, #32
 800e06a:	6023      	strmi	r3, [r4, #0]
 800e06c:	b91e      	cbnz	r6, 800e076 <_printf_i+0x196>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	f023 0320 	bic.w	r3, r3, #32
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	2310      	movs	r3, #16
 800e078:	e7b0      	b.n	800dfdc <_printf_i+0xfc>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	f043 0320 	orr.w	r3, r3, #32
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	2378      	movs	r3, #120	; 0x78
 800e084:	4828      	ldr	r0, [pc, #160]	; (800e128 <_printf_i+0x248>)
 800e086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e08a:	e7e3      	b.n	800e054 <_printf_i+0x174>
 800e08c:	0659      	lsls	r1, r3, #25
 800e08e:	bf48      	it	mi
 800e090:	b2b6      	uxthmi	r6, r6
 800e092:	e7e6      	b.n	800e062 <_printf_i+0x182>
 800e094:	4615      	mov	r5, r2
 800e096:	e7bb      	b.n	800e010 <_printf_i+0x130>
 800e098:	682b      	ldr	r3, [r5, #0]
 800e09a:	6826      	ldr	r6, [r4, #0]
 800e09c:	6961      	ldr	r1, [r4, #20]
 800e09e:	1d18      	adds	r0, r3, #4
 800e0a0:	6028      	str	r0, [r5, #0]
 800e0a2:	0635      	lsls	r5, r6, #24
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	d501      	bpl.n	800e0ac <_printf_i+0x1cc>
 800e0a8:	6019      	str	r1, [r3, #0]
 800e0aa:	e002      	b.n	800e0b2 <_printf_i+0x1d2>
 800e0ac:	0670      	lsls	r0, r6, #25
 800e0ae:	d5fb      	bpl.n	800e0a8 <_printf_i+0x1c8>
 800e0b0:	8019      	strh	r1, [r3, #0]
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	6123      	str	r3, [r4, #16]
 800e0b6:	4615      	mov	r5, r2
 800e0b8:	e7ba      	b.n	800e030 <_printf_i+0x150>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	1d1a      	adds	r2, r3, #4
 800e0be:	602a      	str	r2, [r5, #0]
 800e0c0:	681d      	ldr	r5, [r3, #0]
 800e0c2:	6862      	ldr	r2, [r4, #4]
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7f2 f892 	bl	80001f0 <memchr>
 800e0cc:	b108      	cbz	r0, 800e0d2 <_printf_i+0x1f2>
 800e0ce:	1b40      	subs	r0, r0, r5
 800e0d0:	6060      	str	r0, [r4, #4]
 800e0d2:	6863      	ldr	r3, [r4, #4]
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0dc:	e7a8      	b.n	800e030 <_printf_i+0x150>
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	462a      	mov	r2, r5
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	47d0      	blx	sl
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	d0ab      	beq.n	800e044 <_printf_i+0x164>
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	079b      	lsls	r3, r3, #30
 800e0f0:	d413      	bmi.n	800e11a <_printf_i+0x23a>
 800e0f2:	68e0      	ldr	r0, [r4, #12]
 800e0f4:	9b03      	ldr	r3, [sp, #12]
 800e0f6:	4298      	cmp	r0, r3
 800e0f8:	bfb8      	it	lt
 800e0fa:	4618      	movlt	r0, r3
 800e0fc:	e7a4      	b.n	800e048 <_printf_i+0x168>
 800e0fe:	2301      	movs	r3, #1
 800e100:	4632      	mov	r2, r6
 800e102:	4649      	mov	r1, r9
 800e104:	4640      	mov	r0, r8
 800e106:	47d0      	blx	sl
 800e108:	3001      	adds	r0, #1
 800e10a:	d09b      	beq.n	800e044 <_printf_i+0x164>
 800e10c:	3501      	adds	r5, #1
 800e10e:	68e3      	ldr	r3, [r4, #12]
 800e110:	9903      	ldr	r1, [sp, #12]
 800e112:	1a5b      	subs	r3, r3, r1
 800e114:	42ab      	cmp	r3, r5
 800e116:	dcf2      	bgt.n	800e0fe <_printf_i+0x21e>
 800e118:	e7eb      	b.n	800e0f2 <_printf_i+0x212>
 800e11a:	2500      	movs	r5, #0
 800e11c:	f104 0619 	add.w	r6, r4, #25
 800e120:	e7f5      	b.n	800e10e <_printf_i+0x22e>
 800e122:	bf00      	nop
 800e124:	0801135e 	.word	0x0801135e
 800e128:	0801136f 	.word	0x0801136f

0800e12c <iprintf>:
 800e12c:	b40f      	push	{r0, r1, r2, r3}
 800e12e:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <iprintf+0x2c>)
 800e130:	b513      	push	{r0, r1, r4, lr}
 800e132:	681c      	ldr	r4, [r3, #0]
 800e134:	b124      	cbz	r4, 800e140 <iprintf+0x14>
 800e136:	69a3      	ldr	r3, [r4, #24]
 800e138:	b913      	cbnz	r3, 800e140 <iprintf+0x14>
 800e13a:	4620      	mov	r0, r4
 800e13c:	f001 f8f8 	bl	800f330 <__sinit>
 800e140:	ab05      	add	r3, sp, #20
 800e142:	9a04      	ldr	r2, [sp, #16]
 800e144:	68a1      	ldr	r1, [r4, #8]
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	4620      	mov	r0, r4
 800e14a:	f002 f811 	bl	8010170 <_vfiprintf_r>
 800e14e:	b002      	add	sp, #8
 800e150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e154:	b004      	add	sp, #16
 800e156:	4770      	bx	lr
 800e158:	20000194 	.word	0x20000194

0800e15c <_puts_r>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	460e      	mov	r6, r1
 800e160:	4605      	mov	r5, r0
 800e162:	b118      	cbz	r0, 800e16c <_puts_r+0x10>
 800e164:	6983      	ldr	r3, [r0, #24]
 800e166:	b90b      	cbnz	r3, 800e16c <_puts_r+0x10>
 800e168:	f001 f8e2 	bl	800f330 <__sinit>
 800e16c:	69ab      	ldr	r3, [r5, #24]
 800e16e:	68ac      	ldr	r4, [r5, #8]
 800e170:	b913      	cbnz	r3, 800e178 <_puts_r+0x1c>
 800e172:	4628      	mov	r0, r5
 800e174:	f001 f8dc 	bl	800f330 <__sinit>
 800e178:	4b2c      	ldr	r3, [pc, #176]	; (800e22c <_puts_r+0xd0>)
 800e17a:	429c      	cmp	r4, r3
 800e17c:	d120      	bne.n	800e1c0 <_puts_r+0x64>
 800e17e:	686c      	ldr	r4, [r5, #4]
 800e180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e182:	07db      	lsls	r3, r3, #31
 800e184:	d405      	bmi.n	800e192 <_puts_r+0x36>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	0598      	lsls	r0, r3, #22
 800e18a:	d402      	bmi.n	800e192 <_puts_r+0x36>
 800e18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e18e:	f001 f972 	bl	800f476 <__retarget_lock_acquire_recursive>
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	0719      	lsls	r1, r3, #28
 800e196:	d51d      	bpl.n	800e1d4 <_puts_r+0x78>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	b1db      	cbz	r3, 800e1d4 <_puts_r+0x78>
 800e19c:	3e01      	subs	r6, #1
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	60a3      	str	r3, [r4, #8]
 800e1a8:	bb39      	cbnz	r1, 800e1fa <_puts_r+0x9e>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	da38      	bge.n	800e220 <_puts_r+0xc4>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	210a      	movs	r1, #10
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f000 f868 	bl	800e288 <__swbuf_r>
 800e1b8:	3001      	adds	r0, #1
 800e1ba:	d011      	beq.n	800e1e0 <_puts_r+0x84>
 800e1bc:	250a      	movs	r5, #10
 800e1be:	e011      	b.n	800e1e4 <_puts_r+0x88>
 800e1c0:	4b1b      	ldr	r3, [pc, #108]	; (800e230 <_puts_r+0xd4>)
 800e1c2:	429c      	cmp	r4, r3
 800e1c4:	d101      	bne.n	800e1ca <_puts_r+0x6e>
 800e1c6:	68ac      	ldr	r4, [r5, #8]
 800e1c8:	e7da      	b.n	800e180 <_puts_r+0x24>
 800e1ca:	4b1a      	ldr	r3, [pc, #104]	; (800e234 <_puts_r+0xd8>)
 800e1cc:	429c      	cmp	r4, r3
 800e1ce:	bf08      	it	eq
 800e1d0:	68ec      	ldreq	r4, [r5, #12]
 800e1d2:	e7d5      	b.n	800e180 <_puts_r+0x24>
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f000 f8a8 	bl	800e32c <__swsetup_r>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d0dd      	beq.n	800e19c <_puts_r+0x40>
 800e1e0:	f04f 35ff 	mov.w	r5, #4294967295
 800e1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d405      	bmi.n	800e1f6 <_puts_r+0x9a>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_puts_r+0x9a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f001 f941 	bl	800f478 <__retarget_lock_release_recursive>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	bd70      	pop	{r4, r5, r6, pc}
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da04      	bge.n	800e208 <_puts_r+0xac>
 800e1fe:	69a2      	ldr	r2, [r4, #24]
 800e200:	429a      	cmp	r2, r3
 800e202:	dc06      	bgt.n	800e212 <_puts_r+0xb6>
 800e204:	290a      	cmp	r1, #10
 800e206:	d004      	beq.n	800e212 <_puts_r+0xb6>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	6022      	str	r2, [r4, #0]
 800e20e:	7019      	strb	r1, [r3, #0]
 800e210:	e7c5      	b.n	800e19e <_puts_r+0x42>
 800e212:	4622      	mov	r2, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f837 	bl	800e288 <__swbuf_r>
 800e21a:	3001      	adds	r0, #1
 800e21c:	d1bf      	bne.n	800e19e <_puts_r+0x42>
 800e21e:	e7df      	b.n	800e1e0 <_puts_r+0x84>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	250a      	movs	r5, #10
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	6022      	str	r2, [r4, #0]
 800e228:	701d      	strb	r5, [r3, #0]
 800e22a:	e7db      	b.n	800e1e4 <_puts_r+0x88>
 800e22c:	08011430 	.word	0x08011430
 800e230:	08011450 	.word	0x08011450
 800e234:	08011410 	.word	0x08011410

0800e238 <puts>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <puts+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f7ff bf8d 	b.w	800e15c <_puts_r>
 800e242:	bf00      	nop
 800e244:	20000194 	.word	0x20000194

0800e248 <siprintf>:
 800e248:	b40e      	push	{r1, r2, r3}
 800e24a:	b500      	push	{lr}
 800e24c:	b09c      	sub	sp, #112	; 0x70
 800e24e:	ab1d      	add	r3, sp, #116	; 0x74
 800e250:	9002      	str	r0, [sp, #8]
 800e252:	9006      	str	r0, [sp, #24]
 800e254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e258:	4809      	ldr	r0, [pc, #36]	; (800e280 <siprintf+0x38>)
 800e25a:	9107      	str	r1, [sp, #28]
 800e25c:	9104      	str	r1, [sp, #16]
 800e25e:	4909      	ldr	r1, [pc, #36]	; (800e284 <siprintf+0x3c>)
 800e260:	f853 2b04 	ldr.w	r2, [r3], #4
 800e264:	9105      	str	r1, [sp, #20]
 800e266:	6800      	ldr	r0, [r0, #0]
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	a902      	add	r1, sp, #8
 800e26c:	f001 fe56 	bl	800ff1c <_svfiprintf_r>
 800e270:	9b02      	ldr	r3, [sp, #8]
 800e272:	2200      	movs	r2, #0
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	b01c      	add	sp, #112	; 0x70
 800e278:	f85d eb04 	ldr.w	lr, [sp], #4
 800e27c:	b003      	add	sp, #12
 800e27e:	4770      	bx	lr
 800e280:	20000194 	.word	0x20000194
 800e284:	ffff0208 	.word	0xffff0208

0800e288 <__swbuf_r>:
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	460e      	mov	r6, r1
 800e28c:	4614      	mov	r4, r2
 800e28e:	4605      	mov	r5, r0
 800e290:	b118      	cbz	r0, 800e29a <__swbuf_r+0x12>
 800e292:	6983      	ldr	r3, [r0, #24]
 800e294:	b90b      	cbnz	r3, 800e29a <__swbuf_r+0x12>
 800e296:	f001 f84b 	bl	800f330 <__sinit>
 800e29a:	4b21      	ldr	r3, [pc, #132]	; (800e320 <__swbuf_r+0x98>)
 800e29c:	429c      	cmp	r4, r3
 800e29e:	d12b      	bne.n	800e2f8 <__swbuf_r+0x70>
 800e2a0:	686c      	ldr	r4, [r5, #4]
 800e2a2:	69a3      	ldr	r3, [r4, #24]
 800e2a4:	60a3      	str	r3, [r4, #8]
 800e2a6:	89a3      	ldrh	r3, [r4, #12]
 800e2a8:	071a      	lsls	r2, r3, #28
 800e2aa:	d52f      	bpl.n	800e30c <__swbuf_r+0x84>
 800e2ac:	6923      	ldr	r3, [r4, #16]
 800e2ae:	b36b      	cbz	r3, 800e30c <__swbuf_r+0x84>
 800e2b0:	6923      	ldr	r3, [r4, #16]
 800e2b2:	6820      	ldr	r0, [r4, #0]
 800e2b4:	1ac0      	subs	r0, r0, r3
 800e2b6:	6963      	ldr	r3, [r4, #20]
 800e2b8:	b2f6      	uxtb	r6, r6
 800e2ba:	4283      	cmp	r3, r0
 800e2bc:	4637      	mov	r7, r6
 800e2be:	dc04      	bgt.n	800e2ca <__swbuf_r+0x42>
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f000 ffa0 	bl	800f208 <_fflush_r>
 800e2c8:	bb30      	cbnz	r0, 800e318 <__swbuf_r+0x90>
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	60a3      	str	r3, [r4, #8]
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	1c5a      	adds	r2, r3, #1
 800e2d4:	6022      	str	r2, [r4, #0]
 800e2d6:	701e      	strb	r6, [r3, #0]
 800e2d8:	6963      	ldr	r3, [r4, #20]
 800e2da:	3001      	adds	r0, #1
 800e2dc:	4283      	cmp	r3, r0
 800e2de:	d004      	beq.n	800e2ea <__swbuf_r+0x62>
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	07db      	lsls	r3, r3, #31
 800e2e4:	d506      	bpl.n	800e2f4 <__swbuf_r+0x6c>
 800e2e6:	2e0a      	cmp	r6, #10
 800e2e8:	d104      	bne.n	800e2f4 <__swbuf_r+0x6c>
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	f000 ff8b 	bl	800f208 <_fflush_r>
 800e2f2:	b988      	cbnz	r0, 800e318 <__swbuf_r+0x90>
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f8:	4b0a      	ldr	r3, [pc, #40]	; (800e324 <__swbuf_r+0x9c>)
 800e2fa:	429c      	cmp	r4, r3
 800e2fc:	d101      	bne.n	800e302 <__swbuf_r+0x7a>
 800e2fe:	68ac      	ldr	r4, [r5, #8]
 800e300:	e7cf      	b.n	800e2a2 <__swbuf_r+0x1a>
 800e302:	4b09      	ldr	r3, [pc, #36]	; (800e328 <__swbuf_r+0xa0>)
 800e304:	429c      	cmp	r4, r3
 800e306:	bf08      	it	eq
 800e308:	68ec      	ldreq	r4, [r5, #12]
 800e30a:	e7ca      	b.n	800e2a2 <__swbuf_r+0x1a>
 800e30c:	4621      	mov	r1, r4
 800e30e:	4628      	mov	r0, r5
 800e310:	f000 f80c 	bl	800e32c <__swsetup_r>
 800e314:	2800      	cmp	r0, #0
 800e316:	d0cb      	beq.n	800e2b0 <__swbuf_r+0x28>
 800e318:	f04f 37ff 	mov.w	r7, #4294967295
 800e31c:	e7ea      	b.n	800e2f4 <__swbuf_r+0x6c>
 800e31e:	bf00      	nop
 800e320:	08011430 	.word	0x08011430
 800e324:	08011450 	.word	0x08011450
 800e328:	08011410 	.word	0x08011410

0800e32c <__swsetup_r>:
 800e32c:	4b32      	ldr	r3, [pc, #200]	; (800e3f8 <__swsetup_r+0xcc>)
 800e32e:	b570      	push	{r4, r5, r6, lr}
 800e330:	681d      	ldr	r5, [r3, #0]
 800e332:	4606      	mov	r6, r0
 800e334:	460c      	mov	r4, r1
 800e336:	b125      	cbz	r5, 800e342 <__swsetup_r+0x16>
 800e338:	69ab      	ldr	r3, [r5, #24]
 800e33a:	b913      	cbnz	r3, 800e342 <__swsetup_r+0x16>
 800e33c:	4628      	mov	r0, r5
 800e33e:	f000 fff7 	bl	800f330 <__sinit>
 800e342:	4b2e      	ldr	r3, [pc, #184]	; (800e3fc <__swsetup_r+0xd0>)
 800e344:	429c      	cmp	r4, r3
 800e346:	d10f      	bne.n	800e368 <__swsetup_r+0x3c>
 800e348:	686c      	ldr	r4, [r5, #4]
 800e34a:	89a3      	ldrh	r3, [r4, #12]
 800e34c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e350:	0719      	lsls	r1, r3, #28
 800e352:	d42c      	bmi.n	800e3ae <__swsetup_r+0x82>
 800e354:	06dd      	lsls	r5, r3, #27
 800e356:	d411      	bmi.n	800e37c <__swsetup_r+0x50>
 800e358:	2309      	movs	r3, #9
 800e35a:	6033      	str	r3, [r6, #0]
 800e35c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e360:	81a3      	strh	r3, [r4, #12]
 800e362:	f04f 30ff 	mov.w	r0, #4294967295
 800e366:	e03e      	b.n	800e3e6 <__swsetup_r+0xba>
 800e368:	4b25      	ldr	r3, [pc, #148]	; (800e400 <__swsetup_r+0xd4>)
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d101      	bne.n	800e372 <__swsetup_r+0x46>
 800e36e:	68ac      	ldr	r4, [r5, #8]
 800e370:	e7eb      	b.n	800e34a <__swsetup_r+0x1e>
 800e372:	4b24      	ldr	r3, [pc, #144]	; (800e404 <__swsetup_r+0xd8>)
 800e374:	429c      	cmp	r4, r3
 800e376:	bf08      	it	eq
 800e378:	68ec      	ldreq	r4, [r5, #12]
 800e37a:	e7e6      	b.n	800e34a <__swsetup_r+0x1e>
 800e37c:	0758      	lsls	r0, r3, #29
 800e37e:	d512      	bpl.n	800e3a6 <__swsetup_r+0x7a>
 800e380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e382:	b141      	cbz	r1, 800e396 <__swsetup_r+0x6a>
 800e384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e388:	4299      	cmp	r1, r3
 800e38a:	d002      	beq.n	800e392 <__swsetup_r+0x66>
 800e38c:	4630      	mov	r0, r6
 800e38e:	f001 fc89 	bl	800fca4 <_free_r>
 800e392:	2300      	movs	r3, #0
 800e394:	6363      	str	r3, [r4, #52]	; 0x34
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	2300      	movs	r3, #0
 800e3a0:	6063      	str	r3, [r4, #4]
 800e3a2:	6923      	ldr	r3, [r4, #16]
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	89a3      	ldrh	r3, [r4, #12]
 800e3a8:	f043 0308 	orr.w	r3, r3, #8
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	6923      	ldr	r3, [r4, #16]
 800e3b0:	b94b      	cbnz	r3, 800e3c6 <__swsetup_r+0x9a>
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3bc:	d003      	beq.n	800e3c6 <__swsetup_r+0x9a>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f001 f87f 	bl	800f4c4 <__smakebuf_r>
 800e3c6:	89a0      	ldrh	r0, [r4, #12]
 800e3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3cc:	f010 0301 	ands.w	r3, r0, #1
 800e3d0:	d00a      	beq.n	800e3e8 <__swsetup_r+0xbc>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60a3      	str	r3, [r4, #8]
 800e3d6:	6963      	ldr	r3, [r4, #20]
 800e3d8:	425b      	negs	r3, r3
 800e3da:	61a3      	str	r3, [r4, #24]
 800e3dc:	6923      	ldr	r3, [r4, #16]
 800e3de:	b943      	cbnz	r3, 800e3f2 <__swsetup_r+0xc6>
 800e3e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3e4:	d1ba      	bne.n	800e35c <__swsetup_r+0x30>
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	0781      	lsls	r1, r0, #30
 800e3ea:	bf58      	it	pl
 800e3ec:	6963      	ldrpl	r3, [r4, #20]
 800e3ee:	60a3      	str	r3, [r4, #8]
 800e3f0:	e7f4      	b.n	800e3dc <__swsetup_r+0xb0>
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	e7f7      	b.n	800e3e6 <__swsetup_r+0xba>
 800e3f6:	bf00      	nop
 800e3f8:	20000194 	.word	0x20000194
 800e3fc:	08011430 	.word	0x08011430
 800e400:	08011450 	.word	0x08011450
 800e404:	08011410 	.word	0x08011410

0800e408 <quorem>:
 800e408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	6903      	ldr	r3, [r0, #16]
 800e40e:	690c      	ldr	r4, [r1, #16]
 800e410:	42a3      	cmp	r3, r4
 800e412:	4607      	mov	r7, r0
 800e414:	f2c0 8081 	blt.w	800e51a <quorem+0x112>
 800e418:	3c01      	subs	r4, #1
 800e41a:	f101 0814 	add.w	r8, r1, #20
 800e41e:	f100 0514 	add.w	r5, r0, #20
 800e422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e426:	9301      	str	r3, [sp, #4]
 800e428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e42c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e430:	3301      	adds	r3, #1
 800e432:	429a      	cmp	r2, r3
 800e434:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e438:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e43c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e440:	d331      	bcc.n	800e4a6 <quorem+0x9e>
 800e442:	f04f 0e00 	mov.w	lr, #0
 800e446:	4640      	mov	r0, r8
 800e448:	46ac      	mov	ip, r5
 800e44a:	46f2      	mov	sl, lr
 800e44c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e450:	b293      	uxth	r3, r2
 800e452:	fb06 e303 	mla	r3, r6, r3, lr
 800e456:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	ebaa 0303 	sub.w	r3, sl, r3
 800e460:	f8dc a000 	ldr.w	sl, [ip]
 800e464:	0c12      	lsrs	r2, r2, #16
 800e466:	fa13 f38a 	uxtah	r3, r3, sl
 800e46a:	fb06 e202 	mla	r2, r6, r2, lr
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	9b00      	ldr	r3, [sp, #0]
 800e472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e476:	b292      	uxth	r2, r2
 800e478:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e47c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e480:	f8bd 3000 	ldrh.w	r3, [sp]
 800e484:	4581      	cmp	r9, r0
 800e486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e48a:	f84c 3b04 	str.w	r3, [ip], #4
 800e48e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e492:	d2db      	bcs.n	800e44c <quorem+0x44>
 800e494:	f855 300b 	ldr.w	r3, [r5, fp]
 800e498:	b92b      	cbnz	r3, 800e4a6 <quorem+0x9e>
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	3b04      	subs	r3, #4
 800e49e:	429d      	cmp	r5, r3
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	d32e      	bcc.n	800e502 <quorem+0xfa>
 800e4a4:	613c      	str	r4, [r7, #16]
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	f001 fae4 	bl	800fa74 <__mcmp>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	db24      	blt.n	800e4fa <quorem+0xf2>
 800e4b0:	3601      	adds	r6, #1
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	f04f 0c00 	mov.w	ip, #0
 800e4b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4bc:	f8d0 e000 	ldr.w	lr, [r0]
 800e4c0:	b293      	uxth	r3, r2
 800e4c2:	ebac 0303 	sub.w	r3, ip, r3
 800e4c6:	0c12      	lsrs	r2, r2, #16
 800e4c8:	fa13 f38e 	uxtah	r3, r3, lr
 800e4cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e4d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4da:	45c1      	cmp	r9, r8
 800e4dc:	f840 3b04 	str.w	r3, [r0], #4
 800e4e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e4e4:	d2e8      	bcs.n	800e4b8 <quorem+0xb0>
 800e4e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4ee:	b922      	cbnz	r2, 800e4fa <quorem+0xf2>
 800e4f0:	3b04      	subs	r3, #4
 800e4f2:	429d      	cmp	r5, r3
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	d30a      	bcc.n	800e50e <quorem+0x106>
 800e4f8:	613c      	str	r4, [r7, #16]
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	b003      	add	sp, #12
 800e4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e502:	6812      	ldr	r2, [r2, #0]
 800e504:	3b04      	subs	r3, #4
 800e506:	2a00      	cmp	r2, #0
 800e508:	d1cc      	bne.n	800e4a4 <quorem+0x9c>
 800e50a:	3c01      	subs	r4, #1
 800e50c:	e7c7      	b.n	800e49e <quorem+0x96>
 800e50e:	6812      	ldr	r2, [r2, #0]
 800e510:	3b04      	subs	r3, #4
 800e512:	2a00      	cmp	r2, #0
 800e514:	d1f0      	bne.n	800e4f8 <quorem+0xf0>
 800e516:	3c01      	subs	r4, #1
 800e518:	e7eb      	b.n	800e4f2 <quorem+0xea>
 800e51a:	2000      	movs	r0, #0
 800e51c:	e7ee      	b.n	800e4fc <quorem+0xf4>
	...

0800e520 <_dtoa_r>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	ed2d 8b04 	vpush	{d8-d9}
 800e528:	ec57 6b10 	vmov	r6, r7, d0
 800e52c:	b093      	sub	sp, #76	; 0x4c
 800e52e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e530:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e534:	9106      	str	r1, [sp, #24]
 800e536:	ee10 aa10 	vmov	sl, s0
 800e53a:	4604      	mov	r4, r0
 800e53c:	9209      	str	r2, [sp, #36]	; 0x24
 800e53e:	930c      	str	r3, [sp, #48]	; 0x30
 800e540:	46bb      	mov	fp, r7
 800e542:	b975      	cbnz	r5, 800e562 <_dtoa_r+0x42>
 800e544:	2010      	movs	r0, #16
 800e546:	f000 fffd 	bl	800f544 <malloc>
 800e54a:	4602      	mov	r2, r0
 800e54c:	6260      	str	r0, [r4, #36]	; 0x24
 800e54e:	b920      	cbnz	r0, 800e55a <_dtoa_r+0x3a>
 800e550:	4ba7      	ldr	r3, [pc, #668]	; (800e7f0 <_dtoa_r+0x2d0>)
 800e552:	21ea      	movs	r1, #234	; 0xea
 800e554:	48a7      	ldr	r0, [pc, #668]	; (800e7f4 <_dtoa_r+0x2d4>)
 800e556:	f001 ffa1 	bl	801049c <__assert_func>
 800e55a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e55e:	6005      	str	r5, [r0, #0]
 800e560:	60c5      	str	r5, [r0, #12]
 800e562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e564:	6819      	ldr	r1, [r3, #0]
 800e566:	b151      	cbz	r1, 800e57e <_dtoa_r+0x5e>
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	604a      	str	r2, [r1, #4]
 800e56c:	2301      	movs	r3, #1
 800e56e:	4093      	lsls	r3, r2
 800e570:	608b      	str	r3, [r1, #8]
 800e572:	4620      	mov	r0, r4
 800e574:	f001 f83c 	bl	800f5f0 <_Bfree>
 800e578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	1e3b      	subs	r3, r7, #0
 800e580:	bfaa      	itet	ge
 800e582:	2300      	movge	r3, #0
 800e584:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e588:	f8c8 3000 	strge.w	r3, [r8]
 800e58c:	4b9a      	ldr	r3, [pc, #616]	; (800e7f8 <_dtoa_r+0x2d8>)
 800e58e:	bfbc      	itt	lt
 800e590:	2201      	movlt	r2, #1
 800e592:	f8c8 2000 	strlt.w	r2, [r8]
 800e596:	ea33 030b 	bics.w	r3, r3, fp
 800e59a:	d11b      	bne.n	800e5d4 <_dtoa_r+0xb4>
 800e59c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e59e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5a8:	4333      	orrs	r3, r6
 800e5aa:	f000 8592 	beq.w	800f0d2 <_dtoa_r+0xbb2>
 800e5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5b0:	b963      	cbnz	r3, 800e5cc <_dtoa_r+0xac>
 800e5b2:	4b92      	ldr	r3, [pc, #584]	; (800e7fc <_dtoa_r+0x2dc>)
 800e5b4:	e022      	b.n	800e5fc <_dtoa_r+0xdc>
 800e5b6:	4b92      	ldr	r3, [pc, #584]	; (800e800 <_dtoa_r+0x2e0>)
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	9801      	ldr	r0, [sp, #4]
 800e5c2:	b013      	add	sp, #76	; 0x4c
 800e5c4:	ecbd 8b04 	vpop	{d8-d9}
 800e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	4b8b      	ldr	r3, [pc, #556]	; (800e7fc <_dtoa_r+0x2dc>)
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	3303      	adds	r3, #3
 800e5d2:	e7f3      	b.n	800e5bc <_dtoa_r+0x9c>
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	f7f2 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5e0:	ec4b ab19 	vmov	d9, sl, fp
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	b158      	cbz	r0, 800e600 <_dtoa_r+0xe0>
 800e5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 856b 	beq.w	800f0cc <_dtoa_r+0xbac>
 800e5f6:	4883      	ldr	r0, [pc, #524]	; (800e804 <_dtoa_r+0x2e4>)
 800e5f8:	6018      	str	r0, [r3, #0]
 800e5fa:	1e43      	subs	r3, r0, #1
 800e5fc:	9301      	str	r3, [sp, #4]
 800e5fe:	e7df      	b.n	800e5c0 <_dtoa_r+0xa0>
 800e600:	ec4b ab10 	vmov	d0, sl, fp
 800e604:	aa10      	add	r2, sp, #64	; 0x40
 800e606:	a911      	add	r1, sp, #68	; 0x44
 800e608:	4620      	mov	r0, r4
 800e60a:	f001 fad9 	bl	800fbc0 <__d2b>
 800e60e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e612:	ee08 0a10 	vmov	s16, r0
 800e616:	2d00      	cmp	r5, #0
 800e618:	f000 8084 	beq.w	800e724 <_dtoa_r+0x204>
 800e61c:	ee19 3a90 	vmov	r3, s19
 800e620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e624:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e628:	4656      	mov	r6, sl
 800e62a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e62e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e632:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e636:	4b74      	ldr	r3, [pc, #464]	; (800e808 <_dtoa_r+0x2e8>)
 800e638:	2200      	movs	r2, #0
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	f7f1 fe2b 	bl	8000298 <__aeabi_dsub>
 800e642:	a365      	add	r3, pc, #404	; (adr r3, 800e7d8 <_dtoa_r+0x2b8>)
 800e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e648:	f7f1 ffde 	bl	8000608 <__aeabi_dmul>
 800e64c:	a364      	add	r3, pc, #400	; (adr r3, 800e7e0 <_dtoa_r+0x2c0>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	f7f1 fe23 	bl	800029c <__adddf3>
 800e656:	4606      	mov	r6, r0
 800e658:	4628      	mov	r0, r5
 800e65a:	460f      	mov	r7, r1
 800e65c:	f7f1 ff6a 	bl	8000534 <__aeabi_i2d>
 800e660:	a361      	add	r3, pc, #388	; (adr r3, 800e7e8 <_dtoa_r+0x2c8>)
 800e662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e666:	f7f1 ffcf 	bl	8000608 <__aeabi_dmul>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4630      	mov	r0, r6
 800e670:	4639      	mov	r1, r7
 800e672:	f7f1 fe13 	bl	800029c <__adddf3>
 800e676:	4606      	mov	r6, r0
 800e678:	460f      	mov	r7, r1
 800e67a:	f7f2 fa75 	bl	8000b68 <__aeabi_d2iz>
 800e67e:	2200      	movs	r2, #0
 800e680:	9000      	str	r0, [sp, #0]
 800e682:	2300      	movs	r3, #0
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f2 fa30 	bl	8000aec <__aeabi_dcmplt>
 800e68c:	b150      	cbz	r0, 800e6a4 <_dtoa_r+0x184>
 800e68e:	9800      	ldr	r0, [sp, #0]
 800e690:	f7f1 ff50 	bl	8000534 <__aeabi_i2d>
 800e694:	4632      	mov	r2, r6
 800e696:	463b      	mov	r3, r7
 800e698:	f7f2 fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e69c:	b910      	cbnz	r0, 800e6a4 <_dtoa_r+0x184>
 800e69e:	9b00      	ldr	r3, [sp, #0]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	9b00      	ldr	r3, [sp, #0]
 800e6a6:	2b16      	cmp	r3, #22
 800e6a8:	d85a      	bhi.n	800e760 <_dtoa_r+0x240>
 800e6aa:	9a00      	ldr	r2, [sp, #0]
 800e6ac:	4b57      	ldr	r3, [pc, #348]	; (800e80c <_dtoa_r+0x2ec>)
 800e6ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	ec51 0b19 	vmov	r0, r1, d9
 800e6ba:	f7f2 fa17 	bl	8000aec <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d050      	beq.n	800e764 <_dtoa_r+0x244>
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6ce:	1b5d      	subs	r5, r3, r5
 800e6d0:	1e6b      	subs	r3, r5, #1
 800e6d2:	9305      	str	r3, [sp, #20]
 800e6d4:	bf45      	ittet	mi
 800e6d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e6da:	9304      	strmi	r3, [sp, #16]
 800e6dc:	2300      	movpl	r3, #0
 800e6de:	2300      	movmi	r3, #0
 800e6e0:	bf4c      	ite	mi
 800e6e2:	9305      	strmi	r3, [sp, #20]
 800e6e4:	9304      	strpl	r3, [sp, #16]
 800e6e6:	9b00      	ldr	r3, [sp, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	db3d      	blt.n	800e768 <_dtoa_r+0x248>
 800e6ec:	9b05      	ldr	r3, [sp, #20]
 800e6ee:	9a00      	ldr	r2, [sp, #0]
 800e6f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e6f2:	4413      	add	r3, r2
 800e6f4:	9305      	str	r3, [sp, #20]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	9307      	str	r3, [sp, #28]
 800e6fa:	9b06      	ldr	r3, [sp, #24]
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	f200 8089 	bhi.w	800e814 <_dtoa_r+0x2f4>
 800e702:	2b05      	cmp	r3, #5
 800e704:	bfc4      	itt	gt
 800e706:	3b04      	subgt	r3, #4
 800e708:	9306      	strgt	r3, [sp, #24]
 800e70a:	9b06      	ldr	r3, [sp, #24]
 800e70c:	f1a3 0302 	sub.w	r3, r3, #2
 800e710:	bfcc      	ite	gt
 800e712:	2500      	movgt	r5, #0
 800e714:	2501      	movle	r5, #1
 800e716:	2b03      	cmp	r3, #3
 800e718:	f200 8087 	bhi.w	800e82a <_dtoa_r+0x30a>
 800e71c:	e8df f003 	tbb	[pc, r3]
 800e720:	59383a2d 	.word	0x59383a2d
 800e724:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e728:	441d      	add	r5, r3
 800e72a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e72e:	2b20      	cmp	r3, #32
 800e730:	bfc1      	itttt	gt
 800e732:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e736:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e73a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e73e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e742:	bfda      	itte	le
 800e744:	f1c3 0320 	rsble	r3, r3, #32
 800e748:	fa06 f003 	lslle.w	r0, r6, r3
 800e74c:	4318      	orrgt	r0, r3
 800e74e:	f7f1 fee1 	bl	8000514 <__aeabi_ui2d>
 800e752:	2301      	movs	r3, #1
 800e754:	4606      	mov	r6, r0
 800e756:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e75a:	3d01      	subs	r5, #1
 800e75c:	930e      	str	r3, [sp, #56]	; 0x38
 800e75e:	e76a      	b.n	800e636 <_dtoa_r+0x116>
 800e760:	2301      	movs	r3, #1
 800e762:	e7b2      	b.n	800e6ca <_dtoa_r+0x1aa>
 800e764:	900b      	str	r0, [sp, #44]	; 0x2c
 800e766:	e7b1      	b.n	800e6cc <_dtoa_r+0x1ac>
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	9a00      	ldr	r2, [sp, #0]
 800e76c:	1a9b      	subs	r3, r3, r2
 800e76e:	9304      	str	r3, [sp, #16]
 800e770:	4253      	negs	r3, r2
 800e772:	9307      	str	r3, [sp, #28]
 800e774:	2300      	movs	r3, #0
 800e776:	930a      	str	r3, [sp, #40]	; 0x28
 800e778:	e7bf      	b.n	800e6fa <_dtoa_r+0x1da>
 800e77a:	2300      	movs	r3, #0
 800e77c:	9308      	str	r3, [sp, #32]
 800e77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e780:	2b00      	cmp	r3, #0
 800e782:	dc55      	bgt.n	800e830 <_dtoa_r+0x310>
 800e784:	2301      	movs	r3, #1
 800e786:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e78a:	461a      	mov	r2, r3
 800e78c:	9209      	str	r2, [sp, #36]	; 0x24
 800e78e:	e00c      	b.n	800e7aa <_dtoa_r+0x28a>
 800e790:	2301      	movs	r3, #1
 800e792:	e7f3      	b.n	800e77c <_dtoa_r+0x25c>
 800e794:	2300      	movs	r3, #0
 800e796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e798:	9308      	str	r3, [sp, #32]
 800e79a:	9b00      	ldr	r3, [sp, #0]
 800e79c:	4413      	add	r3, r2
 800e79e:	9302      	str	r3, [sp, #8]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	9303      	str	r3, [sp, #12]
 800e7a6:	bfb8      	it	lt
 800e7a8:	2301      	movlt	r3, #1
 800e7aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	6042      	str	r2, [r0, #4]
 800e7b0:	2204      	movs	r2, #4
 800e7b2:	f102 0614 	add.w	r6, r2, #20
 800e7b6:	429e      	cmp	r6, r3
 800e7b8:	6841      	ldr	r1, [r0, #4]
 800e7ba:	d93d      	bls.n	800e838 <_dtoa_r+0x318>
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f000 fed7 	bl	800f570 <_Balloc>
 800e7c2:	9001      	str	r0, [sp, #4]
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d13b      	bne.n	800e840 <_dtoa_r+0x320>
 800e7c8:	4b11      	ldr	r3, [pc, #68]	; (800e810 <_dtoa_r+0x2f0>)
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7d0:	e6c0      	b.n	800e554 <_dtoa_r+0x34>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e7df      	b.n	800e796 <_dtoa_r+0x276>
 800e7d6:	bf00      	nop
 800e7d8:	636f4361 	.word	0x636f4361
 800e7dc:	3fd287a7 	.word	0x3fd287a7
 800e7e0:	8b60c8b3 	.word	0x8b60c8b3
 800e7e4:	3fc68a28 	.word	0x3fc68a28
 800e7e8:	509f79fb 	.word	0x509f79fb
 800e7ec:	3fd34413 	.word	0x3fd34413
 800e7f0:	0801138d 	.word	0x0801138d
 800e7f4:	080113a4 	.word	0x080113a4
 800e7f8:	7ff00000 	.word	0x7ff00000
 800e7fc:	08011389 	.word	0x08011389
 800e800:	08011380 	.word	0x08011380
 800e804:	0801135d 	.word	0x0801135d
 800e808:	3ff80000 	.word	0x3ff80000
 800e80c:	080114f8 	.word	0x080114f8
 800e810:	080113ff 	.word	0x080113ff
 800e814:	2501      	movs	r5, #1
 800e816:	2300      	movs	r3, #0
 800e818:	9306      	str	r3, [sp, #24]
 800e81a:	9508      	str	r5, [sp, #32]
 800e81c:	f04f 33ff 	mov.w	r3, #4294967295
 800e820:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e824:	2200      	movs	r2, #0
 800e826:	2312      	movs	r3, #18
 800e828:	e7b0      	b.n	800e78c <_dtoa_r+0x26c>
 800e82a:	2301      	movs	r3, #1
 800e82c:	9308      	str	r3, [sp, #32]
 800e82e:	e7f5      	b.n	800e81c <_dtoa_r+0x2fc>
 800e830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e832:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e836:	e7b8      	b.n	800e7aa <_dtoa_r+0x28a>
 800e838:	3101      	adds	r1, #1
 800e83a:	6041      	str	r1, [r0, #4]
 800e83c:	0052      	lsls	r2, r2, #1
 800e83e:	e7b8      	b.n	800e7b2 <_dtoa_r+0x292>
 800e840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e842:	9a01      	ldr	r2, [sp, #4]
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	2b0e      	cmp	r3, #14
 800e84a:	f200 809d 	bhi.w	800e988 <_dtoa_r+0x468>
 800e84e:	2d00      	cmp	r5, #0
 800e850:	f000 809a 	beq.w	800e988 <_dtoa_r+0x468>
 800e854:	9b00      	ldr	r3, [sp, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	dd32      	ble.n	800e8c0 <_dtoa_r+0x3a0>
 800e85a:	4ab7      	ldr	r2, [pc, #732]	; (800eb38 <_dtoa_r+0x618>)
 800e85c:	f003 030f 	and.w	r3, r3, #15
 800e860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e864:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e868:	9b00      	ldr	r3, [sp, #0]
 800e86a:	05d8      	lsls	r0, r3, #23
 800e86c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e870:	d516      	bpl.n	800e8a0 <_dtoa_r+0x380>
 800e872:	4bb2      	ldr	r3, [pc, #712]	; (800eb3c <_dtoa_r+0x61c>)
 800e874:	ec51 0b19 	vmov	r0, r1, d9
 800e878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e87c:	f7f1 ffee 	bl	800085c <__aeabi_ddiv>
 800e880:	f007 070f 	and.w	r7, r7, #15
 800e884:	4682      	mov	sl, r0
 800e886:	468b      	mov	fp, r1
 800e888:	2503      	movs	r5, #3
 800e88a:	4eac      	ldr	r6, [pc, #688]	; (800eb3c <_dtoa_r+0x61c>)
 800e88c:	b957      	cbnz	r7, 800e8a4 <_dtoa_r+0x384>
 800e88e:	4642      	mov	r2, r8
 800e890:	464b      	mov	r3, r9
 800e892:	4650      	mov	r0, sl
 800e894:	4659      	mov	r1, fp
 800e896:	f7f1 ffe1 	bl	800085c <__aeabi_ddiv>
 800e89a:	4682      	mov	sl, r0
 800e89c:	468b      	mov	fp, r1
 800e89e:	e028      	b.n	800e8f2 <_dtoa_r+0x3d2>
 800e8a0:	2502      	movs	r5, #2
 800e8a2:	e7f2      	b.n	800e88a <_dtoa_r+0x36a>
 800e8a4:	07f9      	lsls	r1, r7, #31
 800e8a6:	d508      	bpl.n	800e8ba <_dtoa_r+0x39a>
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8b0:	f7f1 feaa 	bl	8000608 <__aeabi_dmul>
 800e8b4:	3501      	adds	r5, #1
 800e8b6:	4680      	mov	r8, r0
 800e8b8:	4689      	mov	r9, r1
 800e8ba:	107f      	asrs	r7, r7, #1
 800e8bc:	3608      	adds	r6, #8
 800e8be:	e7e5      	b.n	800e88c <_dtoa_r+0x36c>
 800e8c0:	f000 809b 	beq.w	800e9fa <_dtoa_r+0x4da>
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	4f9d      	ldr	r7, [pc, #628]	; (800eb3c <_dtoa_r+0x61c>)
 800e8c8:	425e      	negs	r6, r3
 800e8ca:	4b9b      	ldr	r3, [pc, #620]	; (800eb38 <_dtoa_r+0x618>)
 800e8cc:	f006 020f 	and.w	r2, r6, #15
 800e8d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	ec51 0b19 	vmov	r0, r1, d9
 800e8dc:	f7f1 fe94 	bl	8000608 <__aeabi_dmul>
 800e8e0:	1136      	asrs	r6, r6, #4
 800e8e2:	4682      	mov	sl, r0
 800e8e4:	468b      	mov	fp, r1
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2502      	movs	r5, #2
 800e8ea:	2e00      	cmp	r6, #0
 800e8ec:	d17a      	bne.n	800e9e4 <_dtoa_r+0x4c4>
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1d3      	bne.n	800e89a <_dtoa_r+0x37a>
 800e8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 8082 	beq.w	800e9fe <_dtoa_r+0x4de>
 800e8fa:	4b91      	ldr	r3, [pc, #580]	; (800eb40 <_dtoa_r+0x620>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4650      	mov	r0, sl
 800e900:	4659      	mov	r1, fp
 800e902:	f7f2 f8f3 	bl	8000aec <__aeabi_dcmplt>
 800e906:	2800      	cmp	r0, #0
 800e908:	d079      	beq.n	800e9fe <_dtoa_r+0x4de>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d076      	beq.n	800e9fe <_dtoa_r+0x4de>
 800e910:	9b02      	ldr	r3, [sp, #8]
 800e912:	2b00      	cmp	r3, #0
 800e914:	dd36      	ble.n	800e984 <_dtoa_r+0x464>
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	4650      	mov	r0, sl
 800e91a:	4659      	mov	r1, fp
 800e91c:	1e5f      	subs	r7, r3, #1
 800e91e:	2200      	movs	r2, #0
 800e920:	4b88      	ldr	r3, [pc, #544]	; (800eb44 <_dtoa_r+0x624>)
 800e922:	f7f1 fe71 	bl	8000608 <__aeabi_dmul>
 800e926:	9e02      	ldr	r6, [sp, #8]
 800e928:	4682      	mov	sl, r0
 800e92a:	468b      	mov	fp, r1
 800e92c:	3501      	adds	r5, #1
 800e92e:	4628      	mov	r0, r5
 800e930:	f7f1 fe00 	bl	8000534 <__aeabi_i2d>
 800e934:	4652      	mov	r2, sl
 800e936:	465b      	mov	r3, fp
 800e938:	f7f1 fe66 	bl	8000608 <__aeabi_dmul>
 800e93c:	4b82      	ldr	r3, [pc, #520]	; (800eb48 <_dtoa_r+0x628>)
 800e93e:	2200      	movs	r2, #0
 800e940:	f7f1 fcac 	bl	800029c <__adddf3>
 800e944:	46d0      	mov	r8, sl
 800e946:	46d9      	mov	r9, fp
 800e948:	4682      	mov	sl, r0
 800e94a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e94e:	2e00      	cmp	r6, #0
 800e950:	d158      	bne.n	800ea04 <_dtoa_r+0x4e4>
 800e952:	4b7e      	ldr	r3, [pc, #504]	; (800eb4c <_dtoa_r+0x62c>)
 800e954:	2200      	movs	r2, #0
 800e956:	4640      	mov	r0, r8
 800e958:	4649      	mov	r1, r9
 800e95a:	f7f1 fc9d 	bl	8000298 <__aeabi_dsub>
 800e95e:	4652      	mov	r2, sl
 800e960:	465b      	mov	r3, fp
 800e962:	4680      	mov	r8, r0
 800e964:	4689      	mov	r9, r1
 800e966:	f7f2 f8df 	bl	8000b28 <__aeabi_dcmpgt>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	f040 8295 	bne.w	800ee9a <_dtoa_r+0x97a>
 800e970:	4652      	mov	r2, sl
 800e972:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e976:	4640      	mov	r0, r8
 800e978:	4649      	mov	r1, r9
 800e97a:	f7f2 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800e97e:	2800      	cmp	r0, #0
 800e980:	f040 8289 	bne.w	800ee96 <_dtoa_r+0x976>
 800e984:	ec5b ab19 	vmov	sl, fp, d9
 800e988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f2c0 8148 	blt.w	800ec20 <_dtoa_r+0x700>
 800e990:	9a00      	ldr	r2, [sp, #0]
 800e992:	2a0e      	cmp	r2, #14
 800e994:	f300 8144 	bgt.w	800ec20 <_dtoa_r+0x700>
 800e998:	4b67      	ldr	r3, [pc, #412]	; (800eb38 <_dtoa_r+0x618>)
 800e99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e99e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f280 80d5 	bge.w	800eb54 <_dtoa_r+0x634>
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f300 80d1 	bgt.w	800eb54 <_dtoa_r+0x634>
 800e9b2:	f040 826f 	bne.w	800ee94 <_dtoa_r+0x974>
 800e9b6:	4b65      	ldr	r3, [pc, #404]	; (800eb4c <_dtoa_r+0x62c>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	4649      	mov	r1, r9
 800e9be:	f7f1 fe23 	bl	8000608 <__aeabi_dmul>
 800e9c2:	4652      	mov	r2, sl
 800e9c4:	465b      	mov	r3, fp
 800e9c6:	f7f2 f8a5 	bl	8000b14 <__aeabi_dcmpge>
 800e9ca:	9e03      	ldr	r6, [sp, #12]
 800e9cc:	4637      	mov	r7, r6
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	f040 8245 	bne.w	800ee5e <_dtoa_r+0x93e>
 800e9d4:	9d01      	ldr	r5, [sp, #4]
 800e9d6:	2331      	movs	r3, #49	; 0x31
 800e9d8:	f805 3b01 	strb.w	r3, [r5], #1
 800e9dc:	9b00      	ldr	r3, [sp, #0]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	e240      	b.n	800ee66 <_dtoa_r+0x946>
 800e9e4:	07f2      	lsls	r2, r6, #31
 800e9e6:	d505      	bpl.n	800e9f4 <_dtoa_r+0x4d4>
 800e9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9ec:	f7f1 fe0c 	bl	8000608 <__aeabi_dmul>
 800e9f0:	3501      	adds	r5, #1
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	1076      	asrs	r6, r6, #1
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	e777      	b.n	800e8ea <_dtoa_r+0x3ca>
 800e9fa:	2502      	movs	r5, #2
 800e9fc:	e779      	b.n	800e8f2 <_dtoa_r+0x3d2>
 800e9fe:	9f00      	ldr	r7, [sp, #0]
 800ea00:	9e03      	ldr	r6, [sp, #12]
 800ea02:	e794      	b.n	800e92e <_dtoa_r+0x40e>
 800ea04:	9901      	ldr	r1, [sp, #4]
 800ea06:	4b4c      	ldr	r3, [pc, #304]	; (800eb38 <_dtoa_r+0x618>)
 800ea08:	4431      	add	r1, r6
 800ea0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ea0c:	9908      	ldr	r1, [sp, #32]
 800ea0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea16:	2900      	cmp	r1, #0
 800ea18:	d043      	beq.n	800eaa2 <_dtoa_r+0x582>
 800ea1a:	494d      	ldr	r1, [pc, #308]	; (800eb50 <_dtoa_r+0x630>)
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	f7f1 ff1d 	bl	800085c <__aeabi_ddiv>
 800ea22:	4652      	mov	r2, sl
 800ea24:	465b      	mov	r3, fp
 800ea26:	f7f1 fc37 	bl	8000298 <__aeabi_dsub>
 800ea2a:	9d01      	ldr	r5, [sp, #4]
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	468b      	mov	fp, r1
 800ea30:	4649      	mov	r1, r9
 800ea32:	4640      	mov	r0, r8
 800ea34:	f7f2 f898 	bl	8000b68 <__aeabi_d2iz>
 800ea38:	4606      	mov	r6, r0
 800ea3a:	f7f1 fd7b 	bl	8000534 <__aeabi_i2d>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4640      	mov	r0, r8
 800ea44:	4649      	mov	r1, r9
 800ea46:	f7f1 fc27 	bl	8000298 <__aeabi_dsub>
 800ea4a:	3630      	adds	r6, #48	; 0x30
 800ea4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ea50:	4652      	mov	r2, sl
 800ea52:	465b      	mov	r3, fp
 800ea54:	4680      	mov	r8, r0
 800ea56:	4689      	mov	r9, r1
 800ea58:	f7f2 f848 	bl	8000aec <__aeabi_dcmplt>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d163      	bne.n	800eb28 <_dtoa_r+0x608>
 800ea60:	4642      	mov	r2, r8
 800ea62:	464b      	mov	r3, r9
 800ea64:	4936      	ldr	r1, [pc, #216]	; (800eb40 <_dtoa_r+0x620>)
 800ea66:	2000      	movs	r0, #0
 800ea68:	f7f1 fc16 	bl	8000298 <__aeabi_dsub>
 800ea6c:	4652      	mov	r2, sl
 800ea6e:	465b      	mov	r3, fp
 800ea70:	f7f2 f83c 	bl	8000aec <__aeabi_dcmplt>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f040 80b5 	bne.w	800ebe4 <_dtoa_r+0x6c4>
 800ea7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea7c:	429d      	cmp	r5, r3
 800ea7e:	d081      	beq.n	800e984 <_dtoa_r+0x464>
 800ea80:	4b30      	ldr	r3, [pc, #192]	; (800eb44 <_dtoa_r+0x624>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	4650      	mov	r0, sl
 800ea86:	4659      	mov	r1, fp
 800ea88:	f7f1 fdbe 	bl	8000608 <__aeabi_dmul>
 800ea8c:	4b2d      	ldr	r3, [pc, #180]	; (800eb44 <_dtoa_r+0x624>)
 800ea8e:	4682      	mov	sl, r0
 800ea90:	468b      	mov	fp, r1
 800ea92:	4640      	mov	r0, r8
 800ea94:	4649      	mov	r1, r9
 800ea96:	2200      	movs	r2, #0
 800ea98:	f7f1 fdb6 	bl	8000608 <__aeabi_dmul>
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	4689      	mov	r9, r1
 800eaa0:	e7c6      	b.n	800ea30 <_dtoa_r+0x510>
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	f7f1 fdaf 	bl	8000608 <__aeabi_dmul>
 800eaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaac:	9d01      	ldr	r5, [sp, #4]
 800eaae:	930f      	str	r3, [sp, #60]	; 0x3c
 800eab0:	4682      	mov	sl, r0
 800eab2:	468b      	mov	fp, r1
 800eab4:	4649      	mov	r1, r9
 800eab6:	4640      	mov	r0, r8
 800eab8:	f7f2 f856 	bl	8000b68 <__aeabi_d2iz>
 800eabc:	4606      	mov	r6, r0
 800eabe:	f7f1 fd39 	bl	8000534 <__aeabi_i2d>
 800eac2:	3630      	adds	r6, #48	; 0x30
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	4640      	mov	r0, r8
 800eaca:	4649      	mov	r1, r9
 800eacc:	f7f1 fbe4 	bl	8000298 <__aeabi_dsub>
 800ead0:	f805 6b01 	strb.w	r6, [r5], #1
 800ead4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ead6:	429d      	cmp	r5, r3
 800ead8:	4680      	mov	r8, r0
 800eada:	4689      	mov	r9, r1
 800eadc:	f04f 0200 	mov.w	r2, #0
 800eae0:	d124      	bne.n	800eb2c <_dtoa_r+0x60c>
 800eae2:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <_dtoa_r+0x630>)
 800eae4:	4650      	mov	r0, sl
 800eae6:	4659      	mov	r1, fp
 800eae8:	f7f1 fbd8 	bl	800029c <__adddf3>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	4649      	mov	r1, r9
 800eaf4:	f7f2 f818 	bl	8000b28 <__aeabi_dcmpgt>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d173      	bne.n	800ebe4 <_dtoa_r+0x6c4>
 800eafc:	4652      	mov	r2, sl
 800eafe:	465b      	mov	r3, fp
 800eb00:	4913      	ldr	r1, [pc, #76]	; (800eb50 <_dtoa_r+0x630>)
 800eb02:	2000      	movs	r0, #0
 800eb04:	f7f1 fbc8 	bl	8000298 <__aeabi_dsub>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4640      	mov	r0, r8
 800eb0e:	4649      	mov	r1, r9
 800eb10:	f7f1 ffec 	bl	8000aec <__aeabi_dcmplt>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f43f af35 	beq.w	800e984 <_dtoa_r+0x464>
 800eb1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb1c:	1e6b      	subs	r3, r5, #1
 800eb1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb24:	2b30      	cmp	r3, #48	; 0x30
 800eb26:	d0f8      	beq.n	800eb1a <_dtoa_r+0x5fa>
 800eb28:	9700      	str	r7, [sp, #0]
 800eb2a:	e049      	b.n	800ebc0 <_dtoa_r+0x6a0>
 800eb2c:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <_dtoa_r+0x624>)
 800eb2e:	f7f1 fd6b 	bl	8000608 <__aeabi_dmul>
 800eb32:	4680      	mov	r8, r0
 800eb34:	4689      	mov	r9, r1
 800eb36:	e7bd      	b.n	800eab4 <_dtoa_r+0x594>
 800eb38:	080114f8 	.word	0x080114f8
 800eb3c:	080114d0 	.word	0x080114d0
 800eb40:	3ff00000 	.word	0x3ff00000
 800eb44:	40240000 	.word	0x40240000
 800eb48:	401c0000 	.word	0x401c0000
 800eb4c:	40140000 	.word	0x40140000
 800eb50:	3fe00000 	.word	0x3fe00000
 800eb54:	9d01      	ldr	r5, [sp, #4]
 800eb56:	4656      	mov	r6, sl
 800eb58:	465f      	mov	r7, fp
 800eb5a:	4642      	mov	r2, r8
 800eb5c:	464b      	mov	r3, r9
 800eb5e:	4630      	mov	r0, r6
 800eb60:	4639      	mov	r1, r7
 800eb62:	f7f1 fe7b 	bl	800085c <__aeabi_ddiv>
 800eb66:	f7f1 ffff 	bl	8000b68 <__aeabi_d2iz>
 800eb6a:	4682      	mov	sl, r0
 800eb6c:	f7f1 fce2 	bl	8000534 <__aeabi_i2d>
 800eb70:	4642      	mov	r2, r8
 800eb72:	464b      	mov	r3, r9
 800eb74:	f7f1 fd48 	bl	8000608 <__aeabi_dmul>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	4639      	mov	r1, r7
 800eb80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eb84:	f7f1 fb88 	bl	8000298 <__aeabi_dsub>
 800eb88:	f805 6b01 	strb.w	r6, [r5], #1
 800eb8c:	9e01      	ldr	r6, [sp, #4]
 800eb8e:	9f03      	ldr	r7, [sp, #12]
 800eb90:	1bae      	subs	r6, r5, r6
 800eb92:	42b7      	cmp	r7, r6
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	d135      	bne.n	800ec06 <_dtoa_r+0x6e6>
 800eb9a:	f7f1 fb7f 	bl	800029c <__adddf3>
 800eb9e:	4642      	mov	r2, r8
 800eba0:	464b      	mov	r3, r9
 800eba2:	4606      	mov	r6, r0
 800eba4:	460f      	mov	r7, r1
 800eba6:	f7f1 ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 800ebaa:	b9d0      	cbnz	r0, 800ebe2 <_dtoa_r+0x6c2>
 800ebac:	4642      	mov	r2, r8
 800ebae:	464b      	mov	r3, r9
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	f7f1 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebb8:	b110      	cbz	r0, 800ebc0 <_dtoa_r+0x6a0>
 800ebba:	f01a 0f01 	tst.w	sl, #1
 800ebbe:	d110      	bne.n	800ebe2 <_dtoa_r+0x6c2>
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	ee18 1a10 	vmov	r1, s16
 800ebc6:	f000 fd13 	bl	800f5f0 <_Bfree>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9800      	ldr	r0, [sp, #0]
 800ebce:	702b      	strb	r3, [r5, #0]
 800ebd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	6018      	str	r0, [r3, #0]
 800ebd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f43f acf1 	beq.w	800e5c0 <_dtoa_r+0xa0>
 800ebde:	601d      	str	r5, [r3, #0]
 800ebe0:	e4ee      	b.n	800e5c0 <_dtoa_r+0xa0>
 800ebe2:	9f00      	ldr	r7, [sp, #0]
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	461d      	mov	r5, r3
 800ebe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebec:	2a39      	cmp	r2, #57	; 0x39
 800ebee:	d106      	bne.n	800ebfe <_dtoa_r+0x6de>
 800ebf0:	9a01      	ldr	r2, [sp, #4]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d1f7      	bne.n	800ebe6 <_dtoa_r+0x6c6>
 800ebf6:	9901      	ldr	r1, [sp, #4]
 800ebf8:	2230      	movs	r2, #48	; 0x30
 800ebfa:	3701      	adds	r7, #1
 800ebfc:	700a      	strb	r2, [r1, #0]
 800ebfe:	781a      	ldrb	r2, [r3, #0]
 800ec00:	3201      	adds	r2, #1
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	e790      	b.n	800eb28 <_dtoa_r+0x608>
 800ec06:	4ba6      	ldr	r3, [pc, #664]	; (800eea0 <_dtoa_r+0x980>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f7f1 fcfd 	bl	8000608 <__aeabi_dmul>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	2300      	movs	r3, #0
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	f7f1 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d09d      	beq.n	800eb5a <_dtoa_r+0x63a>
 800ec1e:	e7cf      	b.n	800ebc0 <_dtoa_r+0x6a0>
 800ec20:	9a08      	ldr	r2, [sp, #32]
 800ec22:	2a00      	cmp	r2, #0
 800ec24:	f000 80d7 	beq.w	800edd6 <_dtoa_r+0x8b6>
 800ec28:	9a06      	ldr	r2, [sp, #24]
 800ec2a:	2a01      	cmp	r2, #1
 800ec2c:	f300 80ba 	bgt.w	800eda4 <_dtoa_r+0x884>
 800ec30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	f000 80b2 	beq.w	800ed9c <_dtoa_r+0x87c>
 800ec38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec3c:	9e07      	ldr	r6, [sp, #28]
 800ec3e:	9d04      	ldr	r5, [sp, #16]
 800ec40:	9a04      	ldr	r2, [sp, #16]
 800ec42:	441a      	add	r2, r3
 800ec44:	9204      	str	r2, [sp, #16]
 800ec46:	9a05      	ldr	r2, [sp, #20]
 800ec48:	2101      	movs	r1, #1
 800ec4a:	441a      	add	r2, r3
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	9205      	str	r2, [sp, #20]
 800ec50:	f000 fd86 	bl	800f760 <__i2b>
 800ec54:	4607      	mov	r7, r0
 800ec56:	2d00      	cmp	r5, #0
 800ec58:	dd0c      	ble.n	800ec74 <_dtoa_r+0x754>
 800ec5a:	9b05      	ldr	r3, [sp, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dd09      	ble.n	800ec74 <_dtoa_r+0x754>
 800ec60:	42ab      	cmp	r3, r5
 800ec62:	9a04      	ldr	r2, [sp, #16]
 800ec64:	bfa8      	it	ge
 800ec66:	462b      	movge	r3, r5
 800ec68:	1ad2      	subs	r2, r2, r3
 800ec6a:	9204      	str	r2, [sp, #16]
 800ec6c:	9a05      	ldr	r2, [sp, #20]
 800ec6e:	1aed      	subs	r5, r5, r3
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	9305      	str	r3, [sp, #20]
 800ec74:	9b07      	ldr	r3, [sp, #28]
 800ec76:	b31b      	cbz	r3, 800ecc0 <_dtoa_r+0x7a0>
 800ec78:	9b08      	ldr	r3, [sp, #32]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 80af 	beq.w	800edde <_dtoa_r+0x8be>
 800ec80:	2e00      	cmp	r6, #0
 800ec82:	dd13      	ble.n	800ecac <_dtoa_r+0x78c>
 800ec84:	4639      	mov	r1, r7
 800ec86:	4632      	mov	r2, r6
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f000 fe29 	bl	800f8e0 <__pow5mult>
 800ec8e:	ee18 2a10 	vmov	r2, s16
 800ec92:	4601      	mov	r1, r0
 800ec94:	4607      	mov	r7, r0
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 fd78 	bl	800f78c <__multiply>
 800ec9c:	ee18 1a10 	vmov	r1, s16
 800eca0:	4680      	mov	r8, r0
 800eca2:	4620      	mov	r0, r4
 800eca4:	f000 fca4 	bl	800f5f0 <_Bfree>
 800eca8:	ee08 8a10 	vmov	s16, r8
 800ecac:	9b07      	ldr	r3, [sp, #28]
 800ecae:	1b9a      	subs	r2, r3, r6
 800ecb0:	d006      	beq.n	800ecc0 <_dtoa_r+0x7a0>
 800ecb2:	ee18 1a10 	vmov	r1, s16
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 fe12 	bl	800f8e0 <__pow5mult>
 800ecbc:	ee08 0a10 	vmov	s16, r0
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 fd4c 	bl	800f760 <__i2b>
 800ecc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	4606      	mov	r6, r0
 800ecce:	f340 8088 	ble.w	800ede2 <_dtoa_r+0x8c2>
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f000 fe02 	bl	800f8e0 <__pow5mult>
 800ecdc:	9b06      	ldr	r3, [sp, #24]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	4606      	mov	r6, r0
 800ece2:	f340 8081 	ble.w	800ede8 <_dtoa_r+0x8c8>
 800ece6:	f04f 0800 	mov.w	r8, #0
 800ecea:	6933      	ldr	r3, [r6, #16]
 800ecec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ecf0:	6918      	ldr	r0, [r3, #16]
 800ecf2:	f000 fce5 	bl	800f6c0 <__hi0bits>
 800ecf6:	f1c0 0020 	rsb	r0, r0, #32
 800ecfa:	9b05      	ldr	r3, [sp, #20]
 800ecfc:	4418      	add	r0, r3
 800ecfe:	f010 001f 	ands.w	r0, r0, #31
 800ed02:	f000 8092 	beq.w	800ee2a <_dtoa_r+0x90a>
 800ed06:	f1c0 0320 	rsb	r3, r0, #32
 800ed0a:	2b04      	cmp	r3, #4
 800ed0c:	f340 808a 	ble.w	800ee24 <_dtoa_r+0x904>
 800ed10:	f1c0 001c 	rsb	r0, r0, #28
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	4403      	add	r3, r0
 800ed18:	9304      	str	r3, [sp, #16]
 800ed1a:	9b05      	ldr	r3, [sp, #20]
 800ed1c:	4403      	add	r3, r0
 800ed1e:	4405      	add	r5, r0
 800ed20:	9305      	str	r3, [sp, #20]
 800ed22:	9b04      	ldr	r3, [sp, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dd07      	ble.n	800ed38 <_dtoa_r+0x818>
 800ed28:	ee18 1a10 	vmov	r1, s16
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 fe30 	bl	800f994 <__lshift>
 800ed34:	ee08 0a10 	vmov	s16, r0
 800ed38:	9b05      	ldr	r3, [sp, #20]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	dd05      	ble.n	800ed4a <_dtoa_r+0x82a>
 800ed3e:	4631      	mov	r1, r6
 800ed40:	461a      	mov	r2, r3
 800ed42:	4620      	mov	r0, r4
 800ed44:	f000 fe26 	bl	800f994 <__lshift>
 800ed48:	4606      	mov	r6, r0
 800ed4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d06e      	beq.n	800ee2e <_dtoa_r+0x90e>
 800ed50:	ee18 0a10 	vmov	r0, s16
 800ed54:	4631      	mov	r1, r6
 800ed56:	f000 fe8d 	bl	800fa74 <__mcmp>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	da67      	bge.n	800ee2e <_dtoa_r+0x90e>
 800ed5e:	9b00      	ldr	r3, [sp, #0]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	ee18 1a10 	vmov	r1, s16
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	220a      	movs	r2, #10
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f000 fc61 	bl	800f634 <__multadd>
 800ed72:	9b08      	ldr	r3, [sp, #32]
 800ed74:	ee08 0a10 	vmov	s16, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 81b1 	beq.w	800f0e0 <_dtoa_r+0xbc0>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	4639      	mov	r1, r7
 800ed82:	220a      	movs	r2, #10
 800ed84:	4620      	mov	r0, r4
 800ed86:	f000 fc55 	bl	800f634 <__multadd>
 800ed8a:	9b02      	ldr	r3, [sp, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	4607      	mov	r7, r0
 800ed90:	f300 808e 	bgt.w	800eeb0 <_dtoa_r+0x990>
 800ed94:	9b06      	ldr	r3, [sp, #24]
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	dc51      	bgt.n	800ee3e <_dtoa_r+0x91e>
 800ed9a:	e089      	b.n	800eeb0 <_dtoa_r+0x990>
 800ed9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eda2:	e74b      	b.n	800ec3c <_dtoa_r+0x71c>
 800eda4:	9b03      	ldr	r3, [sp, #12]
 800eda6:	1e5e      	subs	r6, r3, #1
 800eda8:	9b07      	ldr	r3, [sp, #28]
 800edaa:	42b3      	cmp	r3, r6
 800edac:	bfbf      	itttt	lt
 800edae:	9b07      	ldrlt	r3, [sp, #28]
 800edb0:	9607      	strlt	r6, [sp, #28]
 800edb2:	1af2      	sublt	r2, r6, r3
 800edb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800edb6:	bfb6      	itet	lt
 800edb8:	189b      	addlt	r3, r3, r2
 800edba:	1b9e      	subge	r6, r3, r6
 800edbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	bfb8      	it	lt
 800edc2:	2600      	movlt	r6, #0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	bfb7      	itett	lt
 800edc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800edcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800edd0:	1a9d      	sublt	r5, r3, r2
 800edd2:	2300      	movlt	r3, #0
 800edd4:	e734      	b.n	800ec40 <_dtoa_r+0x720>
 800edd6:	9e07      	ldr	r6, [sp, #28]
 800edd8:	9d04      	ldr	r5, [sp, #16]
 800edda:	9f08      	ldr	r7, [sp, #32]
 800eddc:	e73b      	b.n	800ec56 <_dtoa_r+0x736>
 800edde:	9a07      	ldr	r2, [sp, #28]
 800ede0:	e767      	b.n	800ecb2 <_dtoa_r+0x792>
 800ede2:	9b06      	ldr	r3, [sp, #24]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	dc18      	bgt.n	800ee1a <_dtoa_r+0x8fa>
 800ede8:	f1ba 0f00 	cmp.w	sl, #0
 800edec:	d115      	bne.n	800ee1a <_dtoa_r+0x8fa>
 800edee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edf2:	b993      	cbnz	r3, 800ee1a <_dtoa_r+0x8fa>
 800edf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800edf8:	0d1b      	lsrs	r3, r3, #20
 800edfa:	051b      	lsls	r3, r3, #20
 800edfc:	b183      	cbz	r3, 800ee20 <_dtoa_r+0x900>
 800edfe:	9b04      	ldr	r3, [sp, #16]
 800ee00:	3301      	adds	r3, #1
 800ee02:	9304      	str	r3, [sp, #16]
 800ee04:	9b05      	ldr	r3, [sp, #20]
 800ee06:	3301      	adds	r3, #1
 800ee08:	9305      	str	r3, [sp, #20]
 800ee0a:	f04f 0801 	mov.w	r8, #1
 800ee0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f47f af6a 	bne.w	800ecea <_dtoa_r+0x7ca>
 800ee16:	2001      	movs	r0, #1
 800ee18:	e76f      	b.n	800ecfa <_dtoa_r+0x7da>
 800ee1a:	f04f 0800 	mov.w	r8, #0
 800ee1e:	e7f6      	b.n	800ee0e <_dtoa_r+0x8ee>
 800ee20:	4698      	mov	r8, r3
 800ee22:	e7f4      	b.n	800ee0e <_dtoa_r+0x8ee>
 800ee24:	f43f af7d 	beq.w	800ed22 <_dtoa_r+0x802>
 800ee28:	4618      	mov	r0, r3
 800ee2a:	301c      	adds	r0, #28
 800ee2c:	e772      	b.n	800ed14 <_dtoa_r+0x7f4>
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	dc37      	bgt.n	800eea4 <_dtoa_r+0x984>
 800ee34:	9b06      	ldr	r3, [sp, #24]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	dd34      	ble.n	800eea4 <_dtoa_r+0x984>
 800ee3a:	9b03      	ldr	r3, [sp, #12]
 800ee3c:	9302      	str	r3, [sp, #8]
 800ee3e:	9b02      	ldr	r3, [sp, #8]
 800ee40:	b96b      	cbnz	r3, 800ee5e <_dtoa_r+0x93e>
 800ee42:	4631      	mov	r1, r6
 800ee44:	2205      	movs	r2, #5
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 fbf4 	bl	800f634 <__multadd>
 800ee4c:	4601      	mov	r1, r0
 800ee4e:	4606      	mov	r6, r0
 800ee50:	ee18 0a10 	vmov	r0, s16
 800ee54:	f000 fe0e 	bl	800fa74 <__mcmp>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	f73f adbb 	bgt.w	800e9d4 <_dtoa_r+0x4b4>
 800ee5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee60:	9d01      	ldr	r5, [sp, #4]
 800ee62:	43db      	mvns	r3, r3
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	f04f 0800 	mov.w	r8, #0
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f000 fbbf 	bl	800f5f0 <_Bfree>
 800ee72:	2f00      	cmp	r7, #0
 800ee74:	f43f aea4 	beq.w	800ebc0 <_dtoa_r+0x6a0>
 800ee78:	f1b8 0f00 	cmp.w	r8, #0
 800ee7c:	d005      	beq.n	800ee8a <_dtoa_r+0x96a>
 800ee7e:	45b8      	cmp	r8, r7
 800ee80:	d003      	beq.n	800ee8a <_dtoa_r+0x96a>
 800ee82:	4641      	mov	r1, r8
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 fbb3 	bl	800f5f0 <_Bfree>
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fbaf 	bl	800f5f0 <_Bfree>
 800ee92:	e695      	b.n	800ebc0 <_dtoa_r+0x6a0>
 800ee94:	2600      	movs	r6, #0
 800ee96:	4637      	mov	r7, r6
 800ee98:	e7e1      	b.n	800ee5e <_dtoa_r+0x93e>
 800ee9a:	9700      	str	r7, [sp, #0]
 800ee9c:	4637      	mov	r7, r6
 800ee9e:	e599      	b.n	800e9d4 <_dtoa_r+0x4b4>
 800eea0:	40240000 	.word	0x40240000
 800eea4:	9b08      	ldr	r3, [sp, #32]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 80ca 	beq.w	800f040 <_dtoa_r+0xb20>
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	9302      	str	r3, [sp, #8]
 800eeb0:	2d00      	cmp	r5, #0
 800eeb2:	dd05      	ble.n	800eec0 <_dtoa_r+0x9a0>
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fd6b 	bl	800f994 <__lshift>
 800eebe:	4607      	mov	r7, r0
 800eec0:	f1b8 0f00 	cmp.w	r8, #0
 800eec4:	d05b      	beq.n	800ef7e <_dtoa_r+0xa5e>
 800eec6:	6879      	ldr	r1, [r7, #4]
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 fb51 	bl	800f570 <_Balloc>
 800eece:	4605      	mov	r5, r0
 800eed0:	b928      	cbnz	r0, 800eede <_dtoa_r+0x9be>
 800eed2:	4b87      	ldr	r3, [pc, #540]	; (800f0f0 <_dtoa_r+0xbd0>)
 800eed4:	4602      	mov	r2, r0
 800eed6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eeda:	f7ff bb3b 	b.w	800e554 <_dtoa_r+0x34>
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	3202      	adds	r2, #2
 800eee2:	0092      	lsls	r2, r2, #2
 800eee4:	f107 010c 	add.w	r1, r7, #12
 800eee8:	300c      	adds	r0, #12
 800eeea:	f000 fb33 	bl	800f554 <memcpy>
 800eeee:	2201      	movs	r2, #1
 800eef0:	4629      	mov	r1, r5
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 fd4e 	bl	800f994 <__lshift>
 800eef8:	9b01      	ldr	r3, [sp, #4]
 800eefa:	f103 0901 	add.w	r9, r3, #1
 800eefe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ef02:	4413      	add	r3, r2
 800ef04:	9305      	str	r3, [sp, #20]
 800ef06:	f00a 0301 	and.w	r3, sl, #1
 800ef0a:	46b8      	mov	r8, r7
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	4607      	mov	r7, r0
 800ef10:	4631      	mov	r1, r6
 800ef12:	ee18 0a10 	vmov	r0, s16
 800ef16:	f7ff fa77 	bl	800e408 <quorem>
 800ef1a:	4641      	mov	r1, r8
 800ef1c:	9002      	str	r0, [sp, #8]
 800ef1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef22:	ee18 0a10 	vmov	r0, s16
 800ef26:	f000 fda5 	bl	800fa74 <__mcmp>
 800ef2a:	463a      	mov	r2, r7
 800ef2c:	9003      	str	r0, [sp, #12]
 800ef2e:	4631      	mov	r1, r6
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fdbb 	bl	800faac <__mdiff>
 800ef36:	68c2      	ldr	r2, [r0, #12]
 800ef38:	f109 3bff 	add.w	fp, r9, #4294967295
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	bb02      	cbnz	r2, 800ef82 <_dtoa_r+0xa62>
 800ef40:	4601      	mov	r1, r0
 800ef42:	ee18 0a10 	vmov	r0, s16
 800ef46:	f000 fd95 	bl	800fa74 <__mcmp>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	4620      	mov	r0, r4
 800ef50:	9207      	str	r2, [sp, #28]
 800ef52:	f000 fb4d 	bl	800f5f0 <_Bfree>
 800ef56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ef5a:	ea43 0102 	orr.w	r1, r3, r2
 800ef5e:	9b04      	ldr	r3, [sp, #16]
 800ef60:	430b      	orrs	r3, r1
 800ef62:	464d      	mov	r5, r9
 800ef64:	d10f      	bne.n	800ef86 <_dtoa_r+0xa66>
 800ef66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef6a:	d02a      	beq.n	800efc2 <_dtoa_r+0xaa2>
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	dd02      	ble.n	800ef78 <_dtoa_r+0xa58>
 800ef72:	9b02      	ldr	r3, [sp, #8]
 800ef74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ef78:	f88b a000 	strb.w	sl, [fp]
 800ef7c:	e775      	b.n	800ee6a <_dtoa_r+0x94a>
 800ef7e:	4638      	mov	r0, r7
 800ef80:	e7ba      	b.n	800eef8 <_dtoa_r+0x9d8>
 800ef82:	2201      	movs	r2, #1
 800ef84:	e7e2      	b.n	800ef4c <_dtoa_r+0xa2c>
 800ef86:	9b03      	ldr	r3, [sp, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	db04      	blt.n	800ef96 <_dtoa_r+0xa76>
 800ef8c:	9906      	ldr	r1, [sp, #24]
 800ef8e:	430b      	orrs	r3, r1
 800ef90:	9904      	ldr	r1, [sp, #16]
 800ef92:	430b      	orrs	r3, r1
 800ef94:	d122      	bne.n	800efdc <_dtoa_r+0xabc>
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	ddee      	ble.n	800ef78 <_dtoa_r+0xa58>
 800ef9a:	ee18 1a10 	vmov	r1, s16
 800ef9e:	2201      	movs	r2, #1
 800efa0:	4620      	mov	r0, r4
 800efa2:	f000 fcf7 	bl	800f994 <__lshift>
 800efa6:	4631      	mov	r1, r6
 800efa8:	ee08 0a10 	vmov	s16, r0
 800efac:	f000 fd62 	bl	800fa74 <__mcmp>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	dc03      	bgt.n	800efbc <_dtoa_r+0xa9c>
 800efb4:	d1e0      	bne.n	800ef78 <_dtoa_r+0xa58>
 800efb6:	f01a 0f01 	tst.w	sl, #1
 800efba:	d0dd      	beq.n	800ef78 <_dtoa_r+0xa58>
 800efbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800efc0:	d1d7      	bne.n	800ef72 <_dtoa_r+0xa52>
 800efc2:	2339      	movs	r3, #57	; 0x39
 800efc4:	f88b 3000 	strb.w	r3, [fp]
 800efc8:	462b      	mov	r3, r5
 800efca:	461d      	mov	r5, r3
 800efcc:	3b01      	subs	r3, #1
 800efce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800efd2:	2a39      	cmp	r2, #57	; 0x39
 800efd4:	d071      	beq.n	800f0ba <_dtoa_r+0xb9a>
 800efd6:	3201      	adds	r2, #1
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	e746      	b.n	800ee6a <_dtoa_r+0x94a>
 800efdc:	2a00      	cmp	r2, #0
 800efde:	dd07      	ble.n	800eff0 <_dtoa_r+0xad0>
 800efe0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800efe4:	d0ed      	beq.n	800efc2 <_dtoa_r+0xaa2>
 800efe6:	f10a 0301 	add.w	r3, sl, #1
 800efea:	f88b 3000 	strb.w	r3, [fp]
 800efee:	e73c      	b.n	800ee6a <_dtoa_r+0x94a>
 800eff0:	9b05      	ldr	r3, [sp, #20]
 800eff2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eff6:	4599      	cmp	r9, r3
 800eff8:	d047      	beq.n	800f08a <_dtoa_r+0xb6a>
 800effa:	ee18 1a10 	vmov	r1, s16
 800effe:	2300      	movs	r3, #0
 800f000:	220a      	movs	r2, #10
 800f002:	4620      	mov	r0, r4
 800f004:	f000 fb16 	bl	800f634 <__multadd>
 800f008:	45b8      	cmp	r8, r7
 800f00a:	ee08 0a10 	vmov	s16, r0
 800f00e:	f04f 0300 	mov.w	r3, #0
 800f012:	f04f 020a 	mov.w	r2, #10
 800f016:	4641      	mov	r1, r8
 800f018:	4620      	mov	r0, r4
 800f01a:	d106      	bne.n	800f02a <_dtoa_r+0xb0a>
 800f01c:	f000 fb0a 	bl	800f634 <__multadd>
 800f020:	4680      	mov	r8, r0
 800f022:	4607      	mov	r7, r0
 800f024:	f109 0901 	add.w	r9, r9, #1
 800f028:	e772      	b.n	800ef10 <_dtoa_r+0x9f0>
 800f02a:	f000 fb03 	bl	800f634 <__multadd>
 800f02e:	4639      	mov	r1, r7
 800f030:	4680      	mov	r8, r0
 800f032:	2300      	movs	r3, #0
 800f034:	220a      	movs	r2, #10
 800f036:	4620      	mov	r0, r4
 800f038:	f000 fafc 	bl	800f634 <__multadd>
 800f03c:	4607      	mov	r7, r0
 800f03e:	e7f1      	b.n	800f024 <_dtoa_r+0xb04>
 800f040:	9b03      	ldr	r3, [sp, #12]
 800f042:	9302      	str	r3, [sp, #8]
 800f044:	9d01      	ldr	r5, [sp, #4]
 800f046:	ee18 0a10 	vmov	r0, s16
 800f04a:	4631      	mov	r1, r6
 800f04c:	f7ff f9dc 	bl	800e408 <quorem>
 800f050:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	f805 ab01 	strb.w	sl, [r5], #1
 800f05a:	1aea      	subs	r2, r5, r3
 800f05c:	9b02      	ldr	r3, [sp, #8]
 800f05e:	4293      	cmp	r3, r2
 800f060:	dd09      	ble.n	800f076 <_dtoa_r+0xb56>
 800f062:	ee18 1a10 	vmov	r1, s16
 800f066:	2300      	movs	r3, #0
 800f068:	220a      	movs	r2, #10
 800f06a:	4620      	mov	r0, r4
 800f06c:	f000 fae2 	bl	800f634 <__multadd>
 800f070:	ee08 0a10 	vmov	s16, r0
 800f074:	e7e7      	b.n	800f046 <_dtoa_r+0xb26>
 800f076:	9b02      	ldr	r3, [sp, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bfc8      	it	gt
 800f07c:	461d      	movgt	r5, r3
 800f07e:	9b01      	ldr	r3, [sp, #4]
 800f080:	bfd8      	it	le
 800f082:	2501      	movle	r5, #1
 800f084:	441d      	add	r5, r3
 800f086:	f04f 0800 	mov.w	r8, #0
 800f08a:	ee18 1a10 	vmov	r1, s16
 800f08e:	2201      	movs	r2, #1
 800f090:	4620      	mov	r0, r4
 800f092:	f000 fc7f 	bl	800f994 <__lshift>
 800f096:	4631      	mov	r1, r6
 800f098:	ee08 0a10 	vmov	s16, r0
 800f09c:	f000 fcea 	bl	800fa74 <__mcmp>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	dc91      	bgt.n	800efc8 <_dtoa_r+0xaa8>
 800f0a4:	d102      	bne.n	800f0ac <_dtoa_r+0xb8c>
 800f0a6:	f01a 0f01 	tst.w	sl, #1
 800f0aa:	d18d      	bne.n	800efc8 <_dtoa_r+0xaa8>
 800f0ac:	462b      	mov	r3, r5
 800f0ae:	461d      	mov	r5, r3
 800f0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0b4:	2a30      	cmp	r2, #48	; 0x30
 800f0b6:	d0fa      	beq.n	800f0ae <_dtoa_r+0xb8e>
 800f0b8:	e6d7      	b.n	800ee6a <_dtoa_r+0x94a>
 800f0ba:	9a01      	ldr	r2, [sp, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d184      	bne.n	800efca <_dtoa_r+0xaaa>
 800f0c0:	9b00      	ldr	r3, [sp, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	2331      	movs	r3, #49	; 0x31
 800f0c8:	7013      	strb	r3, [r2, #0]
 800f0ca:	e6ce      	b.n	800ee6a <_dtoa_r+0x94a>
 800f0cc:	4b09      	ldr	r3, [pc, #36]	; (800f0f4 <_dtoa_r+0xbd4>)
 800f0ce:	f7ff ba95 	b.w	800e5fc <_dtoa_r+0xdc>
 800f0d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f47f aa6e 	bne.w	800e5b6 <_dtoa_r+0x96>
 800f0da:	4b07      	ldr	r3, [pc, #28]	; (800f0f8 <_dtoa_r+0xbd8>)
 800f0dc:	f7ff ba8e 	b.w	800e5fc <_dtoa_r+0xdc>
 800f0e0:	9b02      	ldr	r3, [sp, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	dcae      	bgt.n	800f044 <_dtoa_r+0xb24>
 800f0e6:	9b06      	ldr	r3, [sp, #24]
 800f0e8:	2b02      	cmp	r3, #2
 800f0ea:	f73f aea8 	bgt.w	800ee3e <_dtoa_r+0x91e>
 800f0ee:	e7a9      	b.n	800f044 <_dtoa_r+0xb24>
 800f0f0:	080113ff 	.word	0x080113ff
 800f0f4:	0801135c 	.word	0x0801135c
 800f0f8:	08011380 	.word	0x08011380

0800f0fc <__sflush_r>:
 800f0fc:	898a      	ldrh	r2, [r1, #12]
 800f0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f102:	4605      	mov	r5, r0
 800f104:	0710      	lsls	r0, r2, #28
 800f106:	460c      	mov	r4, r1
 800f108:	d458      	bmi.n	800f1bc <__sflush_r+0xc0>
 800f10a:	684b      	ldr	r3, [r1, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dc05      	bgt.n	800f11c <__sflush_r+0x20>
 800f110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	dc02      	bgt.n	800f11c <__sflush_r+0x20>
 800f116:	2000      	movs	r0, #0
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f11e:	2e00      	cmp	r6, #0
 800f120:	d0f9      	beq.n	800f116 <__sflush_r+0x1a>
 800f122:	2300      	movs	r3, #0
 800f124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f128:	682f      	ldr	r7, [r5, #0]
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	d032      	beq.n	800f194 <__sflush_r+0x98>
 800f12e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	075a      	lsls	r2, r3, #29
 800f134:	d505      	bpl.n	800f142 <__sflush_r+0x46>
 800f136:	6863      	ldr	r3, [r4, #4]
 800f138:	1ac0      	subs	r0, r0, r3
 800f13a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f13c:	b10b      	cbz	r3, 800f142 <__sflush_r+0x46>
 800f13e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f140:	1ac0      	subs	r0, r0, r3
 800f142:	2300      	movs	r3, #0
 800f144:	4602      	mov	r2, r0
 800f146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f148:	6a21      	ldr	r1, [r4, #32]
 800f14a:	4628      	mov	r0, r5
 800f14c:	47b0      	blx	r6
 800f14e:	1c43      	adds	r3, r0, #1
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	d106      	bne.n	800f162 <__sflush_r+0x66>
 800f154:	6829      	ldr	r1, [r5, #0]
 800f156:	291d      	cmp	r1, #29
 800f158:	d82c      	bhi.n	800f1b4 <__sflush_r+0xb8>
 800f15a:	4a2a      	ldr	r2, [pc, #168]	; (800f204 <__sflush_r+0x108>)
 800f15c:	40ca      	lsrs	r2, r1
 800f15e:	07d6      	lsls	r6, r2, #31
 800f160:	d528      	bpl.n	800f1b4 <__sflush_r+0xb8>
 800f162:	2200      	movs	r2, #0
 800f164:	6062      	str	r2, [r4, #4]
 800f166:	04d9      	lsls	r1, r3, #19
 800f168:	6922      	ldr	r2, [r4, #16]
 800f16a:	6022      	str	r2, [r4, #0]
 800f16c:	d504      	bpl.n	800f178 <__sflush_r+0x7c>
 800f16e:	1c42      	adds	r2, r0, #1
 800f170:	d101      	bne.n	800f176 <__sflush_r+0x7a>
 800f172:	682b      	ldr	r3, [r5, #0]
 800f174:	b903      	cbnz	r3, 800f178 <__sflush_r+0x7c>
 800f176:	6560      	str	r0, [r4, #84]	; 0x54
 800f178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f17a:	602f      	str	r7, [r5, #0]
 800f17c:	2900      	cmp	r1, #0
 800f17e:	d0ca      	beq.n	800f116 <__sflush_r+0x1a>
 800f180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f184:	4299      	cmp	r1, r3
 800f186:	d002      	beq.n	800f18e <__sflush_r+0x92>
 800f188:	4628      	mov	r0, r5
 800f18a:	f000 fd8b 	bl	800fca4 <_free_r>
 800f18e:	2000      	movs	r0, #0
 800f190:	6360      	str	r0, [r4, #52]	; 0x34
 800f192:	e7c1      	b.n	800f118 <__sflush_r+0x1c>
 800f194:	6a21      	ldr	r1, [r4, #32]
 800f196:	2301      	movs	r3, #1
 800f198:	4628      	mov	r0, r5
 800f19a:	47b0      	blx	r6
 800f19c:	1c41      	adds	r1, r0, #1
 800f19e:	d1c7      	bne.n	800f130 <__sflush_r+0x34>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d0c4      	beq.n	800f130 <__sflush_r+0x34>
 800f1a6:	2b1d      	cmp	r3, #29
 800f1a8:	d001      	beq.n	800f1ae <__sflush_r+0xb2>
 800f1aa:	2b16      	cmp	r3, #22
 800f1ac:	d101      	bne.n	800f1b2 <__sflush_r+0xb6>
 800f1ae:	602f      	str	r7, [r5, #0]
 800f1b0:	e7b1      	b.n	800f116 <__sflush_r+0x1a>
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	e7ad      	b.n	800f118 <__sflush_r+0x1c>
 800f1bc:	690f      	ldr	r7, [r1, #16]
 800f1be:	2f00      	cmp	r7, #0
 800f1c0:	d0a9      	beq.n	800f116 <__sflush_r+0x1a>
 800f1c2:	0793      	lsls	r3, r2, #30
 800f1c4:	680e      	ldr	r6, [r1, #0]
 800f1c6:	bf08      	it	eq
 800f1c8:	694b      	ldreq	r3, [r1, #20]
 800f1ca:	600f      	str	r7, [r1, #0]
 800f1cc:	bf18      	it	ne
 800f1ce:	2300      	movne	r3, #0
 800f1d0:	eba6 0807 	sub.w	r8, r6, r7
 800f1d4:	608b      	str	r3, [r1, #8]
 800f1d6:	f1b8 0f00 	cmp.w	r8, #0
 800f1da:	dd9c      	ble.n	800f116 <__sflush_r+0x1a>
 800f1dc:	6a21      	ldr	r1, [r4, #32]
 800f1de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f1e0:	4643      	mov	r3, r8
 800f1e2:	463a      	mov	r2, r7
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	47b0      	blx	r6
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	dc06      	bgt.n	800f1fa <__sflush_r+0xfe>
 800f1ec:	89a3      	ldrh	r3, [r4, #12]
 800f1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f2:	81a3      	strh	r3, [r4, #12]
 800f1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f8:	e78e      	b.n	800f118 <__sflush_r+0x1c>
 800f1fa:	4407      	add	r7, r0
 800f1fc:	eba8 0800 	sub.w	r8, r8, r0
 800f200:	e7e9      	b.n	800f1d6 <__sflush_r+0xda>
 800f202:	bf00      	nop
 800f204:	20400001 	.word	0x20400001

0800f208 <_fflush_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	690b      	ldr	r3, [r1, #16]
 800f20c:	4605      	mov	r5, r0
 800f20e:	460c      	mov	r4, r1
 800f210:	b913      	cbnz	r3, 800f218 <_fflush_r+0x10>
 800f212:	2500      	movs	r5, #0
 800f214:	4628      	mov	r0, r5
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	b118      	cbz	r0, 800f222 <_fflush_r+0x1a>
 800f21a:	6983      	ldr	r3, [r0, #24]
 800f21c:	b90b      	cbnz	r3, 800f222 <_fflush_r+0x1a>
 800f21e:	f000 f887 	bl	800f330 <__sinit>
 800f222:	4b14      	ldr	r3, [pc, #80]	; (800f274 <_fflush_r+0x6c>)
 800f224:	429c      	cmp	r4, r3
 800f226:	d11b      	bne.n	800f260 <_fflush_r+0x58>
 800f228:	686c      	ldr	r4, [r5, #4]
 800f22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d0ef      	beq.n	800f212 <_fflush_r+0xa>
 800f232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f234:	07d0      	lsls	r0, r2, #31
 800f236:	d404      	bmi.n	800f242 <_fflush_r+0x3a>
 800f238:	0599      	lsls	r1, r3, #22
 800f23a:	d402      	bmi.n	800f242 <_fflush_r+0x3a>
 800f23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f23e:	f000 f91a 	bl	800f476 <__retarget_lock_acquire_recursive>
 800f242:	4628      	mov	r0, r5
 800f244:	4621      	mov	r1, r4
 800f246:	f7ff ff59 	bl	800f0fc <__sflush_r>
 800f24a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f24c:	07da      	lsls	r2, r3, #31
 800f24e:	4605      	mov	r5, r0
 800f250:	d4e0      	bmi.n	800f214 <_fflush_r+0xc>
 800f252:	89a3      	ldrh	r3, [r4, #12]
 800f254:	059b      	lsls	r3, r3, #22
 800f256:	d4dd      	bmi.n	800f214 <_fflush_r+0xc>
 800f258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f25a:	f000 f90d 	bl	800f478 <__retarget_lock_release_recursive>
 800f25e:	e7d9      	b.n	800f214 <_fflush_r+0xc>
 800f260:	4b05      	ldr	r3, [pc, #20]	; (800f278 <_fflush_r+0x70>)
 800f262:	429c      	cmp	r4, r3
 800f264:	d101      	bne.n	800f26a <_fflush_r+0x62>
 800f266:	68ac      	ldr	r4, [r5, #8]
 800f268:	e7df      	b.n	800f22a <_fflush_r+0x22>
 800f26a:	4b04      	ldr	r3, [pc, #16]	; (800f27c <_fflush_r+0x74>)
 800f26c:	429c      	cmp	r4, r3
 800f26e:	bf08      	it	eq
 800f270:	68ec      	ldreq	r4, [r5, #12]
 800f272:	e7da      	b.n	800f22a <_fflush_r+0x22>
 800f274:	08011430 	.word	0x08011430
 800f278:	08011450 	.word	0x08011450
 800f27c:	08011410 	.word	0x08011410

0800f280 <std>:
 800f280:	2300      	movs	r3, #0
 800f282:	b510      	push	{r4, lr}
 800f284:	4604      	mov	r4, r0
 800f286:	e9c0 3300 	strd	r3, r3, [r0]
 800f28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f28e:	6083      	str	r3, [r0, #8]
 800f290:	8181      	strh	r1, [r0, #12]
 800f292:	6643      	str	r3, [r0, #100]	; 0x64
 800f294:	81c2      	strh	r2, [r0, #14]
 800f296:	6183      	str	r3, [r0, #24]
 800f298:	4619      	mov	r1, r3
 800f29a:	2208      	movs	r2, #8
 800f29c:	305c      	adds	r0, #92	; 0x5c
 800f29e:	f7fe fad3 	bl	800d848 <memset>
 800f2a2:	4b05      	ldr	r3, [pc, #20]	; (800f2b8 <std+0x38>)
 800f2a4:	6263      	str	r3, [r4, #36]	; 0x24
 800f2a6:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <std+0x3c>)
 800f2a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2aa:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <std+0x40>)
 800f2ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2ae:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <std+0x44>)
 800f2b0:	6224      	str	r4, [r4, #32]
 800f2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	bf00      	nop
 800f2b8:	080103f1 	.word	0x080103f1
 800f2bc:	08010413 	.word	0x08010413
 800f2c0:	0801044b 	.word	0x0801044b
 800f2c4:	0801046f 	.word	0x0801046f

0800f2c8 <_cleanup_r>:
 800f2c8:	4901      	ldr	r1, [pc, #4]	; (800f2d0 <_cleanup_r+0x8>)
 800f2ca:	f000 b8af 	b.w	800f42c <_fwalk_reent>
 800f2ce:	bf00      	nop
 800f2d0:	0800f209 	.word	0x0800f209

0800f2d4 <__sfmoreglue>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	2268      	movs	r2, #104	; 0x68
 800f2d8:	1e4d      	subs	r5, r1, #1
 800f2da:	4355      	muls	r5, r2
 800f2dc:	460e      	mov	r6, r1
 800f2de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f2e2:	f000 fd4b 	bl	800fd7c <_malloc_r>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	b140      	cbz	r0, 800f2fc <__sfmoreglue+0x28>
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	e9c0 1600 	strd	r1, r6, [r0]
 800f2f0:	300c      	adds	r0, #12
 800f2f2:	60a0      	str	r0, [r4, #8]
 800f2f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f2f8:	f7fe faa6 	bl	800d848 <memset>
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	bd70      	pop	{r4, r5, r6, pc}

0800f300 <__sfp_lock_acquire>:
 800f300:	4801      	ldr	r0, [pc, #4]	; (800f308 <__sfp_lock_acquire+0x8>)
 800f302:	f000 b8b8 	b.w	800f476 <__retarget_lock_acquire_recursive>
 800f306:	bf00      	nop
 800f308:	2000227d 	.word	0x2000227d

0800f30c <__sfp_lock_release>:
 800f30c:	4801      	ldr	r0, [pc, #4]	; (800f314 <__sfp_lock_release+0x8>)
 800f30e:	f000 b8b3 	b.w	800f478 <__retarget_lock_release_recursive>
 800f312:	bf00      	nop
 800f314:	2000227d 	.word	0x2000227d

0800f318 <__sinit_lock_acquire>:
 800f318:	4801      	ldr	r0, [pc, #4]	; (800f320 <__sinit_lock_acquire+0x8>)
 800f31a:	f000 b8ac 	b.w	800f476 <__retarget_lock_acquire_recursive>
 800f31e:	bf00      	nop
 800f320:	2000227e 	.word	0x2000227e

0800f324 <__sinit_lock_release>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__sinit_lock_release+0x8>)
 800f326:	f000 b8a7 	b.w	800f478 <__retarget_lock_release_recursive>
 800f32a:	bf00      	nop
 800f32c:	2000227e 	.word	0x2000227e

0800f330 <__sinit>:
 800f330:	b510      	push	{r4, lr}
 800f332:	4604      	mov	r4, r0
 800f334:	f7ff fff0 	bl	800f318 <__sinit_lock_acquire>
 800f338:	69a3      	ldr	r3, [r4, #24]
 800f33a:	b11b      	cbz	r3, 800f344 <__sinit+0x14>
 800f33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f340:	f7ff bff0 	b.w	800f324 <__sinit_lock_release>
 800f344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f348:	6523      	str	r3, [r4, #80]	; 0x50
 800f34a:	4b13      	ldr	r3, [pc, #76]	; (800f398 <__sinit+0x68>)
 800f34c:	4a13      	ldr	r2, [pc, #76]	; (800f39c <__sinit+0x6c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	62a2      	str	r2, [r4, #40]	; 0x28
 800f352:	42a3      	cmp	r3, r4
 800f354:	bf04      	itt	eq
 800f356:	2301      	moveq	r3, #1
 800f358:	61a3      	streq	r3, [r4, #24]
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 f820 	bl	800f3a0 <__sfp>
 800f360:	6060      	str	r0, [r4, #4]
 800f362:	4620      	mov	r0, r4
 800f364:	f000 f81c 	bl	800f3a0 <__sfp>
 800f368:	60a0      	str	r0, [r4, #8]
 800f36a:	4620      	mov	r0, r4
 800f36c:	f000 f818 	bl	800f3a0 <__sfp>
 800f370:	2200      	movs	r2, #0
 800f372:	60e0      	str	r0, [r4, #12]
 800f374:	2104      	movs	r1, #4
 800f376:	6860      	ldr	r0, [r4, #4]
 800f378:	f7ff ff82 	bl	800f280 <std>
 800f37c:	68a0      	ldr	r0, [r4, #8]
 800f37e:	2201      	movs	r2, #1
 800f380:	2109      	movs	r1, #9
 800f382:	f7ff ff7d 	bl	800f280 <std>
 800f386:	68e0      	ldr	r0, [r4, #12]
 800f388:	2202      	movs	r2, #2
 800f38a:	2112      	movs	r1, #18
 800f38c:	f7ff ff78 	bl	800f280 <std>
 800f390:	2301      	movs	r3, #1
 800f392:	61a3      	str	r3, [r4, #24]
 800f394:	e7d2      	b.n	800f33c <__sinit+0xc>
 800f396:	bf00      	nop
 800f398:	08011348 	.word	0x08011348
 800f39c:	0800f2c9 	.word	0x0800f2c9

0800f3a0 <__sfp>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	4607      	mov	r7, r0
 800f3a4:	f7ff ffac 	bl	800f300 <__sfp_lock_acquire>
 800f3a8:	4b1e      	ldr	r3, [pc, #120]	; (800f424 <__sfp+0x84>)
 800f3aa:	681e      	ldr	r6, [r3, #0]
 800f3ac:	69b3      	ldr	r3, [r6, #24]
 800f3ae:	b913      	cbnz	r3, 800f3b6 <__sfp+0x16>
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff ffbd 	bl	800f330 <__sinit>
 800f3b6:	3648      	adds	r6, #72	; 0x48
 800f3b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	d503      	bpl.n	800f3c8 <__sfp+0x28>
 800f3c0:	6833      	ldr	r3, [r6, #0]
 800f3c2:	b30b      	cbz	r3, 800f408 <__sfp+0x68>
 800f3c4:	6836      	ldr	r6, [r6, #0]
 800f3c6:	e7f7      	b.n	800f3b8 <__sfp+0x18>
 800f3c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3cc:	b9d5      	cbnz	r5, 800f404 <__sfp+0x64>
 800f3ce:	4b16      	ldr	r3, [pc, #88]	; (800f428 <__sfp+0x88>)
 800f3d0:	60e3      	str	r3, [r4, #12]
 800f3d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3d6:	6665      	str	r5, [r4, #100]	; 0x64
 800f3d8:	f000 f84c 	bl	800f474 <__retarget_lock_init_recursive>
 800f3dc:	f7ff ff96 	bl	800f30c <__sfp_lock_release>
 800f3e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f3e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f3e8:	6025      	str	r5, [r4, #0]
 800f3ea:	61a5      	str	r5, [r4, #24]
 800f3ec:	2208      	movs	r2, #8
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f3f4:	f7fe fa28 	bl	800d848 <memset>
 800f3f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f3fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f400:	4620      	mov	r0, r4
 800f402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f404:	3468      	adds	r4, #104	; 0x68
 800f406:	e7d9      	b.n	800f3bc <__sfp+0x1c>
 800f408:	2104      	movs	r1, #4
 800f40a:	4638      	mov	r0, r7
 800f40c:	f7ff ff62 	bl	800f2d4 <__sfmoreglue>
 800f410:	4604      	mov	r4, r0
 800f412:	6030      	str	r0, [r6, #0]
 800f414:	2800      	cmp	r0, #0
 800f416:	d1d5      	bne.n	800f3c4 <__sfp+0x24>
 800f418:	f7ff ff78 	bl	800f30c <__sfp_lock_release>
 800f41c:	230c      	movs	r3, #12
 800f41e:	603b      	str	r3, [r7, #0]
 800f420:	e7ee      	b.n	800f400 <__sfp+0x60>
 800f422:	bf00      	nop
 800f424:	08011348 	.word	0x08011348
 800f428:	ffff0001 	.word	0xffff0001

0800f42c <_fwalk_reent>:
 800f42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f430:	4606      	mov	r6, r0
 800f432:	4688      	mov	r8, r1
 800f434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f438:	2700      	movs	r7, #0
 800f43a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f43e:	f1b9 0901 	subs.w	r9, r9, #1
 800f442:	d505      	bpl.n	800f450 <_fwalk_reent+0x24>
 800f444:	6824      	ldr	r4, [r4, #0]
 800f446:	2c00      	cmp	r4, #0
 800f448:	d1f7      	bne.n	800f43a <_fwalk_reent+0xe>
 800f44a:	4638      	mov	r0, r7
 800f44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f450:	89ab      	ldrh	r3, [r5, #12]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d907      	bls.n	800f466 <_fwalk_reent+0x3a>
 800f456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f45a:	3301      	adds	r3, #1
 800f45c:	d003      	beq.n	800f466 <_fwalk_reent+0x3a>
 800f45e:	4629      	mov	r1, r5
 800f460:	4630      	mov	r0, r6
 800f462:	47c0      	blx	r8
 800f464:	4307      	orrs	r7, r0
 800f466:	3568      	adds	r5, #104	; 0x68
 800f468:	e7e9      	b.n	800f43e <_fwalk_reent+0x12>
	...

0800f46c <_localeconv_r>:
 800f46c:	4800      	ldr	r0, [pc, #0]	; (800f470 <_localeconv_r+0x4>)
 800f46e:	4770      	bx	lr
 800f470:	200002e8 	.word	0x200002e8

0800f474 <__retarget_lock_init_recursive>:
 800f474:	4770      	bx	lr

0800f476 <__retarget_lock_acquire_recursive>:
 800f476:	4770      	bx	lr

0800f478 <__retarget_lock_release_recursive>:
 800f478:	4770      	bx	lr

0800f47a <__swhatbuf_r>:
 800f47a:	b570      	push	{r4, r5, r6, lr}
 800f47c:	460e      	mov	r6, r1
 800f47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f482:	2900      	cmp	r1, #0
 800f484:	b096      	sub	sp, #88	; 0x58
 800f486:	4614      	mov	r4, r2
 800f488:	461d      	mov	r5, r3
 800f48a:	da08      	bge.n	800f49e <__swhatbuf_r+0x24>
 800f48c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	602a      	str	r2, [r5, #0]
 800f494:	061a      	lsls	r2, r3, #24
 800f496:	d410      	bmi.n	800f4ba <__swhatbuf_r+0x40>
 800f498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f49c:	e00e      	b.n	800f4bc <__swhatbuf_r+0x42>
 800f49e:	466a      	mov	r2, sp
 800f4a0:	f001 f83c 	bl	801051c <_fstat_r>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	dbf1      	blt.n	800f48c <__swhatbuf_r+0x12>
 800f4a8:	9a01      	ldr	r2, [sp, #4]
 800f4aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4b2:	425a      	negs	r2, r3
 800f4b4:	415a      	adcs	r2, r3
 800f4b6:	602a      	str	r2, [r5, #0]
 800f4b8:	e7ee      	b.n	800f498 <__swhatbuf_r+0x1e>
 800f4ba:	2340      	movs	r3, #64	; 0x40
 800f4bc:	2000      	movs	r0, #0
 800f4be:	6023      	str	r3, [r4, #0]
 800f4c0:	b016      	add	sp, #88	; 0x58
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}

0800f4c4 <__smakebuf_r>:
 800f4c4:	898b      	ldrh	r3, [r1, #12]
 800f4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4c8:	079d      	lsls	r5, r3, #30
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	d507      	bpl.n	800f4e0 <__smakebuf_r+0x1c>
 800f4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	2301      	movs	r3, #1
 800f4da:	6163      	str	r3, [r4, #20]
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	ab01      	add	r3, sp, #4
 800f4e2:	466a      	mov	r2, sp
 800f4e4:	f7ff ffc9 	bl	800f47a <__swhatbuf_r>
 800f4e8:	9900      	ldr	r1, [sp, #0]
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	f000 fc45 	bl	800fd7c <_malloc_r>
 800f4f2:	b948      	cbnz	r0, 800f508 <__smakebuf_r+0x44>
 800f4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f8:	059a      	lsls	r2, r3, #22
 800f4fa:	d4ef      	bmi.n	800f4dc <__smakebuf_r+0x18>
 800f4fc:	f023 0303 	bic.w	r3, r3, #3
 800f500:	f043 0302 	orr.w	r3, r3, #2
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	e7e3      	b.n	800f4d0 <__smakebuf_r+0xc>
 800f508:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <__smakebuf_r+0x7c>)
 800f50a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	6020      	str	r0, [r4, #0]
 800f510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f514:	81a3      	strh	r3, [r4, #12]
 800f516:	9b00      	ldr	r3, [sp, #0]
 800f518:	6163      	str	r3, [r4, #20]
 800f51a:	9b01      	ldr	r3, [sp, #4]
 800f51c:	6120      	str	r0, [r4, #16]
 800f51e:	b15b      	cbz	r3, 800f538 <__smakebuf_r+0x74>
 800f520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f524:	4630      	mov	r0, r6
 800f526:	f001 f80b 	bl	8010540 <_isatty_r>
 800f52a:	b128      	cbz	r0, 800f538 <__smakebuf_r+0x74>
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	f023 0303 	bic.w	r3, r3, #3
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	81a3      	strh	r3, [r4, #12]
 800f538:	89a0      	ldrh	r0, [r4, #12]
 800f53a:	4305      	orrs	r5, r0
 800f53c:	81a5      	strh	r5, [r4, #12]
 800f53e:	e7cd      	b.n	800f4dc <__smakebuf_r+0x18>
 800f540:	0800f2c9 	.word	0x0800f2c9

0800f544 <malloc>:
 800f544:	4b02      	ldr	r3, [pc, #8]	; (800f550 <malloc+0xc>)
 800f546:	4601      	mov	r1, r0
 800f548:	6818      	ldr	r0, [r3, #0]
 800f54a:	f000 bc17 	b.w	800fd7c <_malloc_r>
 800f54e:	bf00      	nop
 800f550:	20000194 	.word	0x20000194

0800f554 <memcpy>:
 800f554:	440a      	add	r2, r1
 800f556:	4291      	cmp	r1, r2
 800f558:	f100 33ff 	add.w	r3, r0, #4294967295
 800f55c:	d100      	bne.n	800f560 <memcpy+0xc>
 800f55e:	4770      	bx	lr
 800f560:	b510      	push	{r4, lr}
 800f562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f56a:	4291      	cmp	r1, r2
 800f56c:	d1f9      	bne.n	800f562 <memcpy+0xe>
 800f56e:	bd10      	pop	{r4, pc}

0800f570 <_Balloc>:
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	b976      	cbnz	r6, 800f598 <_Balloc+0x28>
 800f57a:	2010      	movs	r0, #16
 800f57c:	f7ff ffe2 	bl	800f544 <malloc>
 800f580:	4602      	mov	r2, r0
 800f582:	6260      	str	r0, [r4, #36]	; 0x24
 800f584:	b920      	cbnz	r0, 800f590 <_Balloc+0x20>
 800f586:	4b18      	ldr	r3, [pc, #96]	; (800f5e8 <_Balloc+0x78>)
 800f588:	4818      	ldr	r0, [pc, #96]	; (800f5ec <_Balloc+0x7c>)
 800f58a:	2166      	movs	r1, #102	; 0x66
 800f58c:	f000 ff86 	bl	801049c <__assert_func>
 800f590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f594:	6006      	str	r6, [r0, #0]
 800f596:	60c6      	str	r6, [r0, #12]
 800f598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f59a:	68f3      	ldr	r3, [r6, #12]
 800f59c:	b183      	cbz	r3, 800f5c0 <_Balloc+0x50>
 800f59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5a6:	b9b8      	cbnz	r0, 800f5d8 <_Balloc+0x68>
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	fa01 f605 	lsl.w	r6, r1, r5
 800f5ae:	1d72      	adds	r2, r6, #5
 800f5b0:	0092      	lsls	r2, r2, #2
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 fb60 	bl	800fc78 <_calloc_r>
 800f5b8:	b160      	cbz	r0, 800f5d4 <_Balloc+0x64>
 800f5ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5be:	e00e      	b.n	800f5de <_Balloc+0x6e>
 800f5c0:	2221      	movs	r2, #33	; 0x21
 800f5c2:	2104      	movs	r1, #4
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f000 fb57 	bl	800fc78 <_calloc_r>
 800f5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5cc:	60f0      	str	r0, [r6, #12]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1e4      	bne.n	800f59e <_Balloc+0x2e>
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	6802      	ldr	r2, [r0, #0]
 800f5da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5e4:	e7f7      	b.n	800f5d6 <_Balloc+0x66>
 800f5e6:	bf00      	nop
 800f5e8:	0801138d 	.word	0x0801138d
 800f5ec:	08011470 	.word	0x08011470

0800f5f0 <_Bfree>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b976      	cbnz	r6, 800f618 <_Bfree+0x28>
 800f5fa:	2010      	movs	r0, #16
 800f5fc:	f7ff ffa2 	bl	800f544 <malloc>
 800f600:	4602      	mov	r2, r0
 800f602:	6268      	str	r0, [r5, #36]	; 0x24
 800f604:	b920      	cbnz	r0, 800f610 <_Bfree+0x20>
 800f606:	4b09      	ldr	r3, [pc, #36]	; (800f62c <_Bfree+0x3c>)
 800f608:	4809      	ldr	r0, [pc, #36]	; (800f630 <_Bfree+0x40>)
 800f60a:	218a      	movs	r1, #138	; 0x8a
 800f60c:	f000 ff46 	bl	801049c <__assert_func>
 800f610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f614:	6006      	str	r6, [r0, #0]
 800f616:	60c6      	str	r6, [r0, #12]
 800f618:	b13c      	cbz	r4, 800f62a <_Bfree+0x3a>
 800f61a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f61c:	6862      	ldr	r2, [r4, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f624:	6021      	str	r1, [r4, #0]
 800f626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f62a:	bd70      	pop	{r4, r5, r6, pc}
 800f62c:	0801138d 	.word	0x0801138d
 800f630:	08011470 	.word	0x08011470

0800f634 <__multadd>:
 800f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f638:	690d      	ldr	r5, [r1, #16]
 800f63a:	4607      	mov	r7, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	461e      	mov	r6, r3
 800f640:	f101 0c14 	add.w	ip, r1, #20
 800f644:	2000      	movs	r0, #0
 800f646:	f8dc 3000 	ldr.w	r3, [ip]
 800f64a:	b299      	uxth	r1, r3
 800f64c:	fb02 6101 	mla	r1, r2, r1, r6
 800f650:	0c1e      	lsrs	r6, r3, #16
 800f652:	0c0b      	lsrs	r3, r1, #16
 800f654:	fb02 3306 	mla	r3, r2, r6, r3
 800f658:	b289      	uxth	r1, r1
 800f65a:	3001      	adds	r0, #1
 800f65c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f660:	4285      	cmp	r5, r0
 800f662:	f84c 1b04 	str.w	r1, [ip], #4
 800f666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f66a:	dcec      	bgt.n	800f646 <__multadd+0x12>
 800f66c:	b30e      	cbz	r6, 800f6b2 <__multadd+0x7e>
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	42ab      	cmp	r3, r5
 800f672:	dc19      	bgt.n	800f6a8 <__multadd+0x74>
 800f674:	6861      	ldr	r1, [r4, #4]
 800f676:	4638      	mov	r0, r7
 800f678:	3101      	adds	r1, #1
 800f67a:	f7ff ff79 	bl	800f570 <_Balloc>
 800f67e:	4680      	mov	r8, r0
 800f680:	b928      	cbnz	r0, 800f68e <__multadd+0x5a>
 800f682:	4602      	mov	r2, r0
 800f684:	4b0c      	ldr	r3, [pc, #48]	; (800f6b8 <__multadd+0x84>)
 800f686:	480d      	ldr	r0, [pc, #52]	; (800f6bc <__multadd+0x88>)
 800f688:	21b5      	movs	r1, #181	; 0xb5
 800f68a:	f000 ff07 	bl	801049c <__assert_func>
 800f68e:	6922      	ldr	r2, [r4, #16]
 800f690:	3202      	adds	r2, #2
 800f692:	f104 010c 	add.w	r1, r4, #12
 800f696:	0092      	lsls	r2, r2, #2
 800f698:	300c      	adds	r0, #12
 800f69a:	f7ff ff5b 	bl	800f554 <memcpy>
 800f69e:	4621      	mov	r1, r4
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	f7ff ffa5 	bl	800f5f0 <_Bfree>
 800f6a6:	4644      	mov	r4, r8
 800f6a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6ac:	3501      	adds	r5, #1
 800f6ae:	615e      	str	r6, [r3, #20]
 800f6b0:	6125      	str	r5, [r4, #16]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	080113ff 	.word	0x080113ff
 800f6bc:	08011470 	.word	0x08011470

0800f6c0 <__hi0bits>:
 800f6c0:	0c03      	lsrs	r3, r0, #16
 800f6c2:	041b      	lsls	r3, r3, #16
 800f6c4:	b9d3      	cbnz	r3, 800f6fc <__hi0bits+0x3c>
 800f6c6:	0400      	lsls	r0, r0, #16
 800f6c8:	2310      	movs	r3, #16
 800f6ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6ce:	bf04      	itt	eq
 800f6d0:	0200      	lsleq	r0, r0, #8
 800f6d2:	3308      	addeq	r3, #8
 800f6d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6d8:	bf04      	itt	eq
 800f6da:	0100      	lsleq	r0, r0, #4
 800f6dc:	3304      	addeq	r3, #4
 800f6de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6e2:	bf04      	itt	eq
 800f6e4:	0080      	lsleq	r0, r0, #2
 800f6e6:	3302      	addeq	r3, #2
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	db05      	blt.n	800f6f8 <__hi0bits+0x38>
 800f6ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6f0:	f103 0301 	add.w	r3, r3, #1
 800f6f4:	bf08      	it	eq
 800f6f6:	2320      	moveq	r3, #32
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	4770      	bx	lr
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e7e4      	b.n	800f6ca <__hi0bits+0xa>

0800f700 <__lo0bits>:
 800f700:	6803      	ldr	r3, [r0, #0]
 800f702:	f013 0207 	ands.w	r2, r3, #7
 800f706:	4601      	mov	r1, r0
 800f708:	d00b      	beq.n	800f722 <__lo0bits+0x22>
 800f70a:	07da      	lsls	r2, r3, #31
 800f70c:	d423      	bmi.n	800f756 <__lo0bits+0x56>
 800f70e:	0798      	lsls	r0, r3, #30
 800f710:	bf49      	itett	mi
 800f712:	085b      	lsrmi	r3, r3, #1
 800f714:	089b      	lsrpl	r3, r3, #2
 800f716:	2001      	movmi	r0, #1
 800f718:	600b      	strmi	r3, [r1, #0]
 800f71a:	bf5c      	itt	pl
 800f71c:	600b      	strpl	r3, [r1, #0]
 800f71e:	2002      	movpl	r0, #2
 800f720:	4770      	bx	lr
 800f722:	b298      	uxth	r0, r3
 800f724:	b9a8      	cbnz	r0, 800f752 <__lo0bits+0x52>
 800f726:	0c1b      	lsrs	r3, r3, #16
 800f728:	2010      	movs	r0, #16
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	b90a      	cbnz	r2, 800f732 <__lo0bits+0x32>
 800f72e:	3008      	adds	r0, #8
 800f730:	0a1b      	lsrs	r3, r3, #8
 800f732:	071a      	lsls	r2, r3, #28
 800f734:	bf04      	itt	eq
 800f736:	091b      	lsreq	r3, r3, #4
 800f738:	3004      	addeq	r0, #4
 800f73a:	079a      	lsls	r2, r3, #30
 800f73c:	bf04      	itt	eq
 800f73e:	089b      	lsreq	r3, r3, #2
 800f740:	3002      	addeq	r0, #2
 800f742:	07da      	lsls	r2, r3, #31
 800f744:	d403      	bmi.n	800f74e <__lo0bits+0x4e>
 800f746:	085b      	lsrs	r3, r3, #1
 800f748:	f100 0001 	add.w	r0, r0, #1
 800f74c:	d005      	beq.n	800f75a <__lo0bits+0x5a>
 800f74e:	600b      	str	r3, [r1, #0]
 800f750:	4770      	bx	lr
 800f752:	4610      	mov	r0, r2
 800f754:	e7e9      	b.n	800f72a <__lo0bits+0x2a>
 800f756:	2000      	movs	r0, #0
 800f758:	4770      	bx	lr
 800f75a:	2020      	movs	r0, #32
 800f75c:	4770      	bx	lr
	...

0800f760 <__i2b>:
 800f760:	b510      	push	{r4, lr}
 800f762:	460c      	mov	r4, r1
 800f764:	2101      	movs	r1, #1
 800f766:	f7ff ff03 	bl	800f570 <_Balloc>
 800f76a:	4602      	mov	r2, r0
 800f76c:	b928      	cbnz	r0, 800f77a <__i2b+0x1a>
 800f76e:	4b05      	ldr	r3, [pc, #20]	; (800f784 <__i2b+0x24>)
 800f770:	4805      	ldr	r0, [pc, #20]	; (800f788 <__i2b+0x28>)
 800f772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f776:	f000 fe91 	bl	801049c <__assert_func>
 800f77a:	2301      	movs	r3, #1
 800f77c:	6144      	str	r4, [r0, #20]
 800f77e:	6103      	str	r3, [r0, #16]
 800f780:	bd10      	pop	{r4, pc}
 800f782:	bf00      	nop
 800f784:	080113ff 	.word	0x080113ff
 800f788:	08011470 	.word	0x08011470

0800f78c <__multiply>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	4691      	mov	r9, r2
 800f792:	690a      	ldr	r2, [r1, #16]
 800f794:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f798:	429a      	cmp	r2, r3
 800f79a:	bfb8      	it	lt
 800f79c:	460b      	movlt	r3, r1
 800f79e:	460c      	mov	r4, r1
 800f7a0:	bfbc      	itt	lt
 800f7a2:	464c      	movlt	r4, r9
 800f7a4:	4699      	movlt	r9, r3
 800f7a6:	6927      	ldr	r7, [r4, #16]
 800f7a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7ac:	68a3      	ldr	r3, [r4, #8]
 800f7ae:	6861      	ldr	r1, [r4, #4]
 800f7b0:	eb07 060a 	add.w	r6, r7, sl
 800f7b4:	42b3      	cmp	r3, r6
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	bfb8      	it	lt
 800f7ba:	3101      	addlt	r1, #1
 800f7bc:	f7ff fed8 	bl	800f570 <_Balloc>
 800f7c0:	b930      	cbnz	r0, 800f7d0 <__multiply+0x44>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	4b44      	ldr	r3, [pc, #272]	; (800f8d8 <__multiply+0x14c>)
 800f7c6:	4845      	ldr	r0, [pc, #276]	; (800f8dc <__multiply+0x150>)
 800f7c8:	f240 115d 	movw	r1, #349	; 0x15d
 800f7cc:	f000 fe66 	bl	801049c <__assert_func>
 800f7d0:	f100 0514 	add.w	r5, r0, #20
 800f7d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7d8:	462b      	mov	r3, r5
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4543      	cmp	r3, r8
 800f7de:	d321      	bcc.n	800f824 <__multiply+0x98>
 800f7e0:	f104 0314 	add.w	r3, r4, #20
 800f7e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7e8:	f109 0314 	add.w	r3, r9, #20
 800f7ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7f0:	9202      	str	r2, [sp, #8]
 800f7f2:	1b3a      	subs	r2, r7, r4
 800f7f4:	3a15      	subs	r2, #21
 800f7f6:	f022 0203 	bic.w	r2, r2, #3
 800f7fa:	3204      	adds	r2, #4
 800f7fc:	f104 0115 	add.w	r1, r4, #21
 800f800:	428f      	cmp	r7, r1
 800f802:	bf38      	it	cc
 800f804:	2204      	movcc	r2, #4
 800f806:	9201      	str	r2, [sp, #4]
 800f808:	9a02      	ldr	r2, [sp, #8]
 800f80a:	9303      	str	r3, [sp, #12]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d80c      	bhi.n	800f82a <__multiply+0x9e>
 800f810:	2e00      	cmp	r6, #0
 800f812:	dd03      	ble.n	800f81c <__multiply+0x90>
 800f814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d05a      	beq.n	800f8d2 <__multiply+0x146>
 800f81c:	6106      	str	r6, [r0, #16]
 800f81e:	b005      	add	sp, #20
 800f820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f824:	f843 2b04 	str.w	r2, [r3], #4
 800f828:	e7d8      	b.n	800f7dc <__multiply+0x50>
 800f82a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f82e:	f1ba 0f00 	cmp.w	sl, #0
 800f832:	d024      	beq.n	800f87e <__multiply+0xf2>
 800f834:	f104 0e14 	add.w	lr, r4, #20
 800f838:	46a9      	mov	r9, r5
 800f83a:	f04f 0c00 	mov.w	ip, #0
 800f83e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f842:	f8d9 1000 	ldr.w	r1, [r9]
 800f846:	fa1f fb82 	uxth.w	fp, r2
 800f84a:	b289      	uxth	r1, r1
 800f84c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f850:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f854:	f8d9 2000 	ldr.w	r2, [r9]
 800f858:	4461      	add	r1, ip
 800f85a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f85e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f862:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f866:	b289      	uxth	r1, r1
 800f868:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f86c:	4577      	cmp	r7, lr
 800f86e:	f849 1b04 	str.w	r1, [r9], #4
 800f872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f876:	d8e2      	bhi.n	800f83e <__multiply+0xb2>
 800f878:	9a01      	ldr	r2, [sp, #4]
 800f87a:	f845 c002 	str.w	ip, [r5, r2]
 800f87e:	9a03      	ldr	r2, [sp, #12]
 800f880:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f884:	3304      	adds	r3, #4
 800f886:	f1b9 0f00 	cmp.w	r9, #0
 800f88a:	d020      	beq.n	800f8ce <__multiply+0x142>
 800f88c:	6829      	ldr	r1, [r5, #0]
 800f88e:	f104 0c14 	add.w	ip, r4, #20
 800f892:	46ae      	mov	lr, r5
 800f894:	f04f 0a00 	mov.w	sl, #0
 800f898:	f8bc b000 	ldrh.w	fp, [ip]
 800f89c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8a0:	fb09 220b 	mla	r2, r9, fp, r2
 800f8a4:	4492      	add	sl, r2
 800f8a6:	b289      	uxth	r1, r1
 800f8a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8ac:	f84e 1b04 	str.w	r1, [lr], #4
 800f8b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8b4:	f8be 1000 	ldrh.w	r1, [lr]
 800f8b8:	0c12      	lsrs	r2, r2, #16
 800f8ba:	fb09 1102 	mla	r1, r9, r2, r1
 800f8be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f8c2:	4567      	cmp	r7, ip
 800f8c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8c8:	d8e6      	bhi.n	800f898 <__multiply+0x10c>
 800f8ca:	9a01      	ldr	r2, [sp, #4]
 800f8cc:	50a9      	str	r1, [r5, r2]
 800f8ce:	3504      	adds	r5, #4
 800f8d0:	e79a      	b.n	800f808 <__multiply+0x7c>
 800f8d2:	3e01      	subs	r6, #1
 800f8d4:	e79c      	b.n	800f810 <__multiply+0x84>
 800f8d6:	bf00      	nop
 800f8d8:	080113ff 	.word	0x080113ff
 800f8dc:	08011470 	.word	0x08011470

0800f8e0 <__pow5mult>:
 800f8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	4615      	mov	r5, r2
 800f8e6:	f012 0203 	ands.w	r2, r2, #3
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	d007      	beq.n	800f900 <__pow5mult+0x20>
 800f8f0:	4c25      	ldr	r4, [pc, #148]	; (800f988 <__pow5mult+0xa8>)
 800f8f2:	3a01      	subs	r2, #1
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8fa:	f7ff fe9b 	bl	800f634 <__multadd>
 800f8fe:	4607      	mov	r7, r0
 800f900:	10ad      	asrs	r5, r5, #2
 800f902:	d03d      	beq.n	800f980 <__pow5mult+0xa0>
 800f904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f906:	b97c      	cbnz	r4, 800f928 <__pow5mult+0x48>
 800f908:	2010      	movs	r0, #16
 800f90a:	f7ff fe1b 	bl	800f544 <malloc>
 800f90e:	4602      	mov	r2, r0
 800f910:	6270      	str	r0, [r6, #36]	; 0x24
 800f912:	b928      	cbnz	r0, 800f920 <__pow5mult+0x40>
 800f914:	4b1d      	ldr	r3, [pc, #116]	; (800f98c <__pow5mult+0xac>)
 800f916:	481e      	ldr	r0, [pc, #120]	; (800f990 <__pow5mult+0xb0>)
 800f918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f91c:	f000 fdbe 	bl	801049c <__assert_func>
 800f920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f924:	6004      	str	r4, [r0, #0]
 800f926:	60c4      	str	r4, [r0, #12]
 800f928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f92c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f930:	b94c      	cbnz	r4, 800f946 <__pow5mult+0x66>
 800f932:	f240 2171 	movw	r1, #625	; 0x271
 800f936:	4630      	mov	r0, r6
 800f938:	f7ff ff12 	bl	800f760 <__i2b>
 800f93c:	2300      	movs	r3, #0
 800f93e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f942:	4604      	mov	r4, r0
 800f944:	6003      	str	r3, [r0, #0]
 800f946:	f04f 0900 	mov.w	r9, #0
 800f94a:	07eb      	lsls	r3, r5, #31
 800f94c:	d50a      	bpl.n	800f964 <__pow5mult+0x84>
 800f94e:	4639      	mov	r1, r7
 800f950:	4622      	mov	r2, r4
 800f952:	4630      	mov	r0, r6
 800f954:	f7ff ff1a 	bl	800f78c <__multiply>
 800f958:	4639      	mov	r1, r7
 800f95a:	4680      	mov	r8, r0
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff fe47 	bl	800f5f0 <_Bfree>
 800f962:	4647      	mov	r7, r8
 800f964:	106d      	asrs	r5, r5, #1
 800f966:	d00b      	beq.n	800f980 <__pow5mult+0xa0>
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	b938      	cbnz	r0, 800f97c <__pow5mult+0x9c>
 800f96c:	4622      	mov	r2, r4
 800f96e:	4621      	mov	r1, r4
 800f970:	4630      	mov	r0, r6
 800f972:	f7ff ff0b 	bl	800f78c <__multiply>
 800f976:	6020      	str	r0, [r4, #0]
 800f978:	f8c0 9000 	str.w	r9, [r0]
 800f97c:	4604      	mov	r4, r0
 800f97e:	e7e4      	b.n	800f94a <__pow5mult+0x6a>
 800f980:	4638      	mov	r0, r7
 800f982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f986:	bf00      	nop
 800f988:	080115c0 	.word	0x080115c0
 800f98c:	0801138d 	.word	0x0801138d
 800f990:	08011470 	.word	0x08011470

0800f994 <__lshift>:
 800f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	460c      	mov	r4, r1
 800f99a:	6849      	ldr	r1, [r1, #4]
 800f99c:	6923      	ldr	r3, [r4, #16]
 800f99e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9a2:	68a3      	ldr	r3, [r4, #8]
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	4691      	mov	r9, r2
 800f9a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9ac:	f108 0601 	add.w	r6, r8, #1
 800f9b0:	42b3      	cmp	r3, r6
 800f9b2:	db0b      	blt.n	800f9cc <__lshift+0x38>
 800f9b4:	4638      	mov	r0, r7
 800f9b6:	f7ff fddb 	bl	800f570 <_Balloc>
 800f9ba:	4605      	mov	r5, r0
 800f9bc:	b948      	cbnz	r0, 800f9d2 <__lshift+0x3e>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	4b2a      	ldr	r3, [pc, #168]	; (800fa6c <__lshift+0xd8>)
 800f9c2:	482b      	ldr	r0, [pc, #172]	; (800fa70 <__lshift+0xdc>)
 800f9c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9c8:	f000 fd68 	bl	801049c <__assert_func>
 800f9cc:	3101      	adds	r1, #1
 800f9ce:	005b      	lsls	r3, r3, #1
 800f9d0:	e7ee      	b.n	800f9b0 <__lshift+0x1c>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f100 0114 	add.w	r1, r0, #20
 800f9d8:	f100 0210 	add.w	r2, r0, #16
 800f9dc:	4618      	mov	r0, r3
 800f9de:	4553      	cmp	r3, sl
 800f9e0:	db37      	blt.n	800fa52 <__lshift+0xbe>
 800f9e2:	6920      	ldr	r0, [r4, #16]
 800f9e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9e8:	f104 0314 	add.w	r3, r4, #20
 800f9ec:	f019 091f 	ands.w	r9, r9, #31
 800f9f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f9f8:	d02f      	beq.n	800fa5a <__lshift+0xc6>
 800f9fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f9fe:	468a      	mov	sl, r1
 800fa00:	f04f 0c00 	mov.w	ip, #0
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	fa02 f209 	lsl.w	r2, r2, r9
 800fa0a:	ea42 020c 	orr.w	r2, r2, ip
 800fa0e:	f84a 2b04 	str.w	r2, [sl], #4
 800fa12:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa16:	4298      	cmp	r0, r3
 800fa18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa1c:	d8f2      	bhi.n	800fa04 <__lshift+0x70>
 800fa1e:	1b03      	subs	r3, r0, r4
 800fa20:	3b15      	subs	r3, #21
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	3304      	adds	r3, #4
 800fa28:	f104 0215 	add.w	r2, r4, #21
 800fa2c:	4290      	cmp	r0, r2
 800fa2e:	bf38      	it	cc
 800fa30:	2304      	movcc	r3, #4
 800fa32:	f841 c003 	str.w	ip, [r1, r3]
 800fa36:	f1bc 0f00 	cmp.w	ip, #0
 800fa3a:	d001      	beq.n	800fa40 <__lshift+0xac>
 800fa3c:	f108 0602 	add.w	r6, r8, #2
 800fa40:	3e01      	subs	r6, #1
 800fa42:	4638      	mov	r0, r7
 800fa44:	612e      	str	r6, [r5, #16]
 800fa46:	4621      	mov	r1, r4
 800fa48:	f7ff fdd2 	bl	800f5f0 <_Bfree>
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa52:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa56:	3301      	adds	r3, #1
 800fa58:	e7c1      	b.n	800f9de <__lshift+0x4a>
 800fa5a:	3904      	subs	r1, #4
 800fa5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa60:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa64:	4298      	cmp	r0, r3
 800fa66:	d8f9      	bhi.n	800fa5c <__lshift+0xc8>
 800fa68:	e7ea      	b.n	800fa40 <__lshift+0xac>
 800fa6a:	bf00      	nop
 800fa6c:	080113ff 	.word	0x080113ff
 800fa70:	08011470 	.word	0x08011470

0800fa74 <__mcmp>:
 800fa74:	b530      	push	{r4, r5, lr}
 800fa76:	6902      	ldr	r2, [r0, #16]
 800fa78:	690c      	ldr	r4, [r1, #16]
 800fa7a:	1b12      	subs	r2, r2, r4
 800fa7c:	d10e      	bne.n	800fa9c <__mcmp+0x28>
 800fa7e:	f100 0314 	add.w	r3, r0, #20
 800fa82:	3114      	adds	r1, #20
 800fa84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa94:	42a5      	cmp	r5, r4
 800fa96:	d003      	beq.n	800faa0 <__mcmp+0x2c>
 800fa98:	d305      	bcc.n	800faa6 <__mcmp+0x32>
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	bd30      	pop	{r4, r5, pc}
 800faa0:	4283      	cmp	r3, r0
 800faa2:	d3f3      	bcc.n	800fa8c <__mcmp+0x18>
 800faa4:	e7fa      	b.n	800fa9c <__mcmp+0x28>
 800faa6:	f04f 32ff 	mov.w	r2, #4294967295
 800faaa:	e7f7      	b.n	800fa9c <__mcmp+0x28>

0800faac <__mdiff>:
 800faac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab0:	460c      	mov	r4, r1
 800fab2:	4606      	mov	r6, r0
 800fab4:	4611      	mov	r1, r2
 800fab6:	4620      	mov	r0, r4
 800fab8:	4690      	mov	r8, r2
 800faba:	f7ff ffdb 	bl	800fa74 <__mcmp>
 800fabe:	1e05      	subs	r5, r0, #0
 800fac0:	d110      	bne.n	800fae4 <__mdiff+0x38>
 800fac2:	4629      	mov	r1, r5
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7ff fd53 	bl	800f570 <_Balloc>
 800faca:	b930      	cbnz	r0, 800fada <__mdiff+0x2e>
 800facc:	4b3a      	ldr	r3, [pc, #232]	; (800fbb8 <__mdiff+0x10c>)
 800face:	4602      	mov	r2, r0
 800fad0:	f240 2132 	movw	r1, #562	; 0x232
 800fad4:	4839      	ldr	r0, [pc, #228]	; (800fbbc <__mdiff+0x110>)
 800fad6:	f000 fce1 	bl	801049c <__assert_func>
 800fada:	2301      	movs	r3, #1
 800fadc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae4:	bfa4      	itt	ge
 800fae6:	4643      	movge	r3, r8
 800fae8:	46a0      	movge	r8, r4
 800faea:	4630      	mov	r0, r6
 800faec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faf0:	bfa6      	itte	ge
 800faf2:	461c      	movge	r4, r3
 800faf4:	2500      	movge	r5, #0
 800faf6:	2501      	movlt	r5, #1
 800faf8:	f7ff fd3a 	bl	800f570 <_Balloc>
 800fafc:	b920      	cbnz	r0, 800fb08 <__mdiff+0x5c>
 800fafe:	4b2e      	ldr	r3, [pc, #184]	; (800fbb8 <__mdiff+0x10c>)
 800fb00:	4602      	mov	r2, r0
 800fb02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb06:	e7e5      	b.n	800fad4 <__mdiff+0x28>
 800fb08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb0c:	6926      	ldr	r6, [r4, #16]
 800fb0e:	60c5      	str	r5, [r0, #12]
 800fb10:	f104 0914 	add.w	r9, r4, #20
 800fb14:	f108 0514 	add.w	r5, r8, #20
 800fb18:	f100 0e14 	add.w	lr, r0, #20
 800fb1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb24:	f108 0210 	add.w	r2, r8, #16
 800fb28:	46f2      	mov	sl, lr
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb34:	fa1f f883 	uxth.w	r8, r3
 800fb38:	fa11 f18b 	uxtah	r1, r1, fp
 800fb3c:	0c1b      	lsrs	r3, r3, #16
 800fb3e:	eba1 0808 	sub.w	r8, r1, r8
 800fb42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb4a:	fa1f f888 	uxth.w	r8, r8
 800fb4e:	1419      	asrs	r1, r3, #16
 800fb50:	454e      	cmp	r6, r9
 800fb52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb56:	f84a 3b04 	str.w	r3, [sl], #4
 800fb5a:	d8e7      	bhi.n	800fb2c <__mdiff+0x80>
 800fb5c:	1b33      	subs	r3, r6, r4
 800fb5e:	3b15      	subs	r3, #21
 800fb60:	f023 0303 	bic.w	r3, r3, #3
 800fb64:	3304      	adds	r3, #4
 800fb66:	3415      	adds	r4, #21
 800fb68:	42a6      	cmp	r6, r4
 800fb6a:	bf38      	it	cc
 800fb6c:	2304      	movcc	r3, #4
 800fb6e:	441d      	add	r5, r3
 800fb70:	4473      	add	r3, lr
 800fb72:	469e      	mov	lr, r3
 800fb74:	462e      	mov	r6, r5
 800fb76:	4566      	cmp	r6, ip
 800fb78:	d30e      	bcc.n	800fb98 <__mdiff+0xec>
 800fb7a:	f10c 0203 	add.w	r2, ip, #3
 800fb7e:	1b52      	subs	r2, r2, r5
 800fb80:	f022 0203 	bic.w	r2, r2, #3
 800fb84:	3d03      	subs	r5, #3
 800fb86:	45ac      	cmp	ip, r5
 800fb88:	bf38      	it	cc
 800fb8a:	2200      	movcc	r2, #0
 800fb8c:	441a      	add	r2, r3
 800fb8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb92:	b17b      	cbz	r3, 800fbb4 <__mdiff+0x108>
 800fb94:	6107      	str	r7, [r0, #16]
 800fb96:	e7a3      	b.n	800fae0 <__mdiff+0x34>
 800fb98:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb9c:	fa11 f288 	uxtah	r2, r1, r8
 800fba0:	1414      	asrs	r4, r2, #16
 800fba2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fba6:	b292      	uxth	r2, r2
 800fba8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbac:	f84e 2b04 	str.w	r2, [lr], #4
 800fbb0:	1421      	asrs	r1, r4, #16
 800fbb2:	e7e0      	b.n	800fb76 <__mdiff+0xca>
 800fbb4:	3f01      	subs	r7, #1
 800fbb6:	e7ea      	b.n	800fb8e <__mdiff+0xe2>
 800fbb8:	080113ff 	.word	0x080113ff
 800fbbc:	08011470 	.word	0x08011470

0800fbc0 <__d2b>:
 800fbc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbc4:	4689      	mov	r9, r1
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	ec57 6b10 	vmov	r6, r7, d0
 800fbcc:	4690      	mov	r8, r2
 800fbce:	f7ff fccf 	bl	800f570 <_Balloc>
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	b930      	cbnz	r0, 800fbe4 <__d2b+0x24>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	4b25      	ldr	r3, [pc, #148]	; (800fc70 <__d2b+0xb0>)
 800fbda:	4826      	ldr	r0, [pc, #152]	; (800fc74 <__d2b+0xb4>)
 800fbdc:	f240 310a 	movw	r1, #778	; 0x30a
 800fbe0:	f000 fc5c 	bl	801049c <__assert_func>
 800fbe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fbe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbec:	bb35      	cbnz	r5, 800fc3c <__d2b+0x7c>
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	d028      	beq.n	800fc46 <__d2b+0x86>
 800fbf4:	4668      	mov	r0, sp
 800fbf6:	9600      	str	r6, [sp, #0]
 800fbf8:	f7ff fd82 	bl	800f700 <__lo0bits>
 800fbfc:	9900      	ldr	r1, [sp, #0]
 800fbfe:	b300      	cbz	r0, 800fc42 <__d2b+0x82>
 800fc00:	9a01      	ldr	r2, [sp, #4]
 800fc02:	f1c0 0320 	rsb	r3, r0, #32
 800fc06:	fa02 f303 	lsl.w	r3, r2, r3
 800fc0a:	430b      	orrs	r3, r1
 800fc0c:	40c2      	lsrs	r2, r0
 800fc0e:	6163      	str	r3, [r4, #20]
 800fc10:	9201      	str	r2, [sp, #4]
 800fc12:	9b01      	ldr	r3, [sp, #4]
 800fc14:	61a3      	str	r3, [r4, #24]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	bf14      	ite	ne
 800fc1a:	2202      	movne	r2, #2
 800fc1c:	2201      	moveq	r2, #1
 800fc1e:	6122      	str	r2, [r4, #16]
 800fc20:	b1d5      	cbz	r5, 800fc58 <__d2b+0x98>
 800fc22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc26:	4405      	add	r5, r0
 800fc28:	f8c9 5000 	str.w	r5, [r9]
 800fc2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc30:	f8c8 0000 	str.w	r0, [r8]
 800fc34:	4620      	mov	r0, r4
 800fc36:	b003      	add	sp, #12
 800fc38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc40:	e7d5      	b.n	800fbee <__d2b+0x2e>
 800fc42:	6161      	str	r1, [r4, #20]
 800fc44:	e7e5      	b.n	800fc12 <__d2b+0x52>
 800fc46:	a801      	add	r0, sp, #4
 800fc48:	f7ff fd5a 	bl	800f700 <__lo0bits>
 800fc4c:	9b01      	ldr	r3, [sp, #4]
 800fc4e:	6163      	str	r3, [r4, #20]
 800fc50:	2201      	movs	r2, #1
 800fc52:	6122      	str	r2, [r4, #16]
 800fc54:	3020      	adds	r0, #32
 800fc56:	e7e3      	b.n	800fc20 <__d2b+0x60>
 800fc58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc60:	f8c9 0000 	str.w	r0, [r9]
 800fc64:	6918      	ldr	r0, [r3, #16]
 800fc66:	f7ff fd2b 	bl	800f6c0 <__hi0bits>
 800fc6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc6e:	e7df      	b.n	800fc30 <__d2b+0x70>
 800fc70:	080113ff 	.word	0x080113ff
 800fc74:	08011470 	.word	0x08011470

0800fc78 <_calloc_r>:
 800fc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc7a:	fba1 2402 	umull	r2, r4, r1, r2
 800fc7e:	b94c      	cbnz	r4, 800fc94 <_calloc_r+0x1c>
 800fc80:	4611      	mov	r1, r2
 800fc82:	9201      	str	r2, [sp, #4]
 800fc84:	f000 f87a 	bl	800fd7c <_malloc_r>
 800fc88:	9a01      	ldr	r2, [sp, #4]
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	b930      	cbnz	r0, 800fc9c <_calloc_r+0x24>
 800fc8e:	4628      	mov	r0, r5
 800fc90:	b003      	add	sp, #12
 800fc92:	bd30      	pop	{r4, r5, pc}
 800fc94:	220c      	movs	r2, #12
 800fc96:	6002      	str	r2, [r0, #0]
 800fc98:	2500      	movs	r5, #0
 800fc9a:	e7f8      	b.n	800fc8e <_calloc_r+0x16>
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	f7fd fdd3 	bl	800d848 <memset>
 800fca2:	e7f4      	b.n	800fc8e <_calloc_r+0x16>

0800fca4 <_free_r>:
 800fca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fca6:	2900      	cmp	r1, #0
 800fca8:	d044      	beq.n	800fd34 <_free_r+0x90>
 800fcaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcae:	9001      	str	r0, [sp, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f1a1 0404 	sub.w	r4, r1, #4
 800fcb6:	bfb8      	it	lt
 800fcb8:	18e4      	addlt	r4, r4, r3
 800fcba:	f000 fc8f 	bl	80105dc <__malloc_lock>
 800fcbe:	4a1e      	ldr	r2, [pc, #120]	; (800fd38 <_free_r+0x94>)
 800fcc0:	9801      	ldr	r0, [sp, #4]
 800fcc2:	6813      	ldr	r3, [r2, #0]
 800fcc4:	b933      	cbnz	r3, 800fcd4 <_free_r+0x30>
 800fcc6:	6063      	str	r3, [r4, #4]
 800fcc8:	6014      	str	r4, [r2, #0]
 800fcca:	b003      	add	sp, #12
 800fccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcd0:	f000 bc8a 	b.w	80105e8 <__malloc_unlock>
 800fcd4:	42a3      	cmp	r3, r4
 800fcd6:	d908      	bls.n	800fcea <_free_r+0x46>
 800fcd8:	6825      	ldr	r5, [r4, #0]
 800fcda:	1961      	adds	r1, r4, r5
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	bf01      	itttt	eq
 800fce0:	6819      	ldreq	r1, [r3, #0]
 800fce2:	685b      	ldreq	r3, [r3, #4]
 800fce4:	1949      	addeq	r1, r1, r5
 800fce6:	6021      	streq	r1, [r4, #0]
 800fce8:	e7ed      	b.n	800fcc6 <_free_r+0x22>
 800fcea:	461a      	mov	r2, r3
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	b10b      	cbz	r3, 800fcf4 <_free_r+0x50>
 800fcf0:	42a3      	cmp	r3, r4
 800fcf2:	d9fa      	bls.n	800fcea <_free_r+0x46>
 800fcf4:	6811      	ldr	r1, [r2, #0]
 800fcf6:	1855      	adds	r5, r2, r1
 800fcf8:	42a5      	cmp	r5, r4
 800fcfa:	d10b      	bne.n	800fd14 <_free_r+0x70>
 800fcfc:	6824      	ldr	r4, [r4, #0]
 800fcfe:	4421      	add	r1, r4
 800fd00:	1854      	adds	r4, r2, r1
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	6011      	str	r1, [r2, #0]
 800fd06:	d1e0      	bne.n	800fcca <_free_r+0x26>
 800fd08:	681c      	ldr	r4, [r3, #0]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	6053      	str	r3, [r2, #4]
 800fd0e:	4421      	add	r1, r4
 800fd10:	6011      	str	r1, [r2, #0]
 800fd12:	e7da      	b.n	800fcca <_free_r+0x26>
 800fd14:	d902      	bls.n	800fd1c <_free_r+0x78>
 800fd16:	230c      	movs	r3, #12
 800fd18:	6003      	str	r3, [r0, #0]
 800fd1a:	e7d6      	b.n	800fcca <_free_r+0x26>
 800fd1c:	6825      	ldr	r5, [r4, #0]
 800fd1e:	1961      	adds	r1, r4, r5
 800fd20:	428b      	cmp	r3, r1
 800fd22:	bf04      	itt	eq
 800fd24:	6819      	ldreq	r1, [r3, #0]
 800fd26:	685b      	ldreq	r3, [r3, #4]
 800fd28:	6063      	str	r3, [r4, #4]
 800fd2a:	bf04      	itt	eq
 800fd2c:	1949      	addeq	r1, r1, r5
 800fd2e:	6021      	streq	r1, [r4, #0]
 800fd30:	6054      	str	r4, [r2, #4]
 800fd32:	e7ca      	b.n	800fcca <_free_r+0x26>
 800fd34:	b003      	add	sp, #12
 800fd36:	bd30      	pop	{r4, r5, pc}
 800fd38:	20002280 	.word	0x20002280

0800fd3c <sbrk_aligned>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	4e0e      	ldr	r6, [pc, #56]	; (800fd78 <sbrk_aligned+0x3c>)
 800fd40:	460c      	mov	r4, r1
 800fd42:	6831      	ldr	r1, [r6, #0]
 800fd44:	4605      	mov	r5, r0
 800fd46:	b911      	cbnz	r1, 800fd4e <sbrk_aligned+0x12>
 800fd48:	f000 fb42 	bl	80103d0 <_sbrk_r>
 800fd4c:	6030      	str	r0, [r6, #0]
 800fd4e:	4621      	mov	r1, r4
 800fd50:	4628      	mov	r0, r5
 800fd52:	f000 fb3d 	bl	80103d0 <_sbrk_r>
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	d00a      	beq.n	800fd70 <sbrk_aligned+0x34>
 800fd5a:	1cc4      	adds	r4, r0, #3
 800fd5c:	f024 0403 	bic.w	r4, r4, #3
 800fd60:	42a0      	cmp	r0, r4
 800fd62:	d007      	beq.n	800fd74 <sbrk_aligned+0x38>
 800fd64:	1a21      	subs	r1, r4, r0
 800fd66:	4628      	mov	r0, r5
 800fd68:	f000 fb32 	bl	80103d0 <_sbrk_r>
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d101      	bne.n	800fd74 <sbrk_aligned+0x38>
 800fd70:	f04f 34ff 	mov.w	r4, #4294967295
 800fd74:	4620      	mov	r0, r4
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	20002284 	.word	0x20002284

0800fd7c <_malloc_r>:
 800fd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	1ccd      	adds	r5, r1, #3
 800fd82:	f025 0503 	bic.w	r5, r5, #3
 800fd86:	3508      	adds	r5, #8
 800fd88:	2d0c      	cmp	r5, #12
 800fd8a:	bf38      	it	cc
 800fd8c:	250c      	movcc	r5, #12
 800fd8e:	2d00      	cmp	r5, #0
 800fd90:	4607      	mov	r7, r0
 800fd92:	db01      	blt.n	800fd98 <_malloc_r+0x1c>
 800fd94:	42a9      	cmp	r1, r5
 800fd96:	d905      	bls.n	800fda4 <_malloc_r+0x28>
 800fd98:	230c      	movs	r3, #12
 800fd9a:	603b      	str	r3, [r7, #0]
 800fd9c:	2600      	movs	r6, #0
 800fd9e:	4630      	mov	r0, r6
 800fda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda4:	4e2e      	ldr	r6, [pc, #184]	; (800fe60 <_malloc_r+0xe4>)
 800fda6:	f000 fc19 	bl	80105dc <__malloc_lock>
 800fdaa:	6833      	ldr	r3, [r6, #0]
 800fdac:	461c      	mov	r4, r3
 800fdae:	bb34      	cbnz	r4, 800fdfe <_malloc_r+0x82>
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	f7ff ffc2 	bl	800fd3c <sbrk_aligned>
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	4604      	mov	r4, r0
 800fdbc:	d14d      	bne.n	800fe5a <_malloc_r+0xde>
 800fdbe:	6834      	ldr	r4, [r6, #0]
 800fdc0:	4626      	mov	r6, r4
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	d140      	bne.n	800fe48 <_malloc_r+0xcc>
 800fdc6:	6823      	ldr	r3, [r4, #0]
 800fdc8:	4631      	mov	r1, r6
 800fdca:	4638      	mov	r0, r7
 800fdcc:	eb04 0803 	add.w	r8, r4, r3
 800fdd0:	f000 fafe 	bl	80103d0 <_sbrk_r>
 800fdd4:	4580      	cmp	r8, r0
 800fdd6:	d13a      	bne.n	800fe4e <_malloc_r+0xd2>
 800fdd8:	6821      	ldr	r1, [r4, #0]
 800fdda:	3503      	adds	r5, #3
 800fddc:	1a6d      	subs	r5, r5, r1
 800fdde:	f025 0503 	bic.w	r5, r5, #3
 800fde2:	3508      	adds	r5, #8
 800fde4:	2d0c      	cmp	r5, #12
 800fde6:	bf38      	it	cc
 800fde8:	250c      	movcc	r5, #12
 800fdea:	4629      	mov	r1, r5
 800fdec:	4638      	mov	r0, r7
 800fdee:	f7ff ffa5 	bl	800fd3c <sbrk_aligned>
 800fdf2:	3001      	adds	r0, #1
 800fdf4:	d02b      	beq.n	800fe4e <_malloc_r+0xd2>
 800fdf6:	6823      	ldr	r3, [r4, #0]
 800fdf8:	442b      	add	r3, r5
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	e00e      	b.n	800fe1c <_malloc_r+0xa0>
 800fdfe:	6822      	ldr	r2, [r4, #0]
 800fe00:	1b52      	subs	r2, r2, r5
 800fe02:	d41e      	bmi.n	800fe42 <_malloc_r+0xc6>
 800fe04:	2a0b      	cmp	r2, #11
 800fe06:	d916      	bls.n	800fe36 <_malloc_r+0xba>
 800fe08:	1961      	adds	r1, r4, r5
 800fe0a:	42a3      	cmp	r3, r4
 800fe0c:	6025      	str	r5, [r4, #0]
 800fe0e:	bf18      	it	ne
 800fe10:	6059      	strne	r1, [r3, #4]
 800fe12:	6863      	ldr	r3, [r4, #4]
 800fe14:	bf08      	it	eq
 800fe16:	6031      	streq	r1, [r6, #0]
 800fe18:	5162      	str	r2, [r4, r5]
 800fe1a:	604b      	str	r3, [r1, #4]
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f104 060b 	add.w	r6, r4, #11
 800fe22:	f000 fbe1 	bl	80105e8 <__malloc_unlock>
 800fe26:	f026 0607 	bic.w	r6, r6, #7
 800fe2a:	1d23      	adds	r3, r4, #4
 800fe2c:	1af2      	subs	r2, r6, r3
 800fe2e:	d0b6      	beq.n	800fd9e <_malloc_r+0x22>
 800fe30:	1b9b      	subs	r3, r3, r6
 800fe32:	50a3      	str	r3, [r4, r2]
 800fe34:	e7b3      	b.n	800fd9e <_malloc_r+0x22>
 800fe36:	6862      	ldr	r2, [r4, #4]
 800fe38:	42a3      	cmp	r3, r4
 800fe3a:	bf0c      	ite	eq
 800fe3c:	6032      	streq	r2, [r6, #0]
 800fe3e:	605a      	strne	r2, [r3, #4]
 800fe40:	e7ec      	b.n	800fe1c <_malloc_r+0xa0>
 800fe42:	4623      	mov	r3, r4
 800fe44:	6864      	ldr	r4, [r4, #4]
 800fe46:	e7b2      	b.n	800fdae <_malloc_r+0x32>
 800fe48:	4634      	mov	r4, r6
 800fe4a:	6876      	ldr	r6, [r6, #4]
 800fe4c:	e7b9      	b.n	800fdc2 <_malloc_r+0x46>
 800fe4e:	230c      	movs	r3, #12
 800fe50:	603b      	str	r3, [r7, #0]
 800fe52:	4638      	mov	r0, r7
 800fe54:	f000 fbc8 	bl	80105e8 <__malloc_unlock>
 800fe58:	e7a1      	b.n	800fd9e <_malloc_r+0x22>
 800fe5a:	6025      	str	r5, [r4, #0]
 800fe5c:	e7de      	b.n	800fe1c <_malloc_r+0xa0>
 800fe5e:	bf00      	nop
 800fe60:	20002280 	.word	0x20002280

0800fe64 <__ssputs_r>:
 800fe64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe68:	688e      	ldr	r6, [r1, #8]
 800fe6a:	429e      	cmp	r6, r3
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	460c      	mov	r4, r1
 800fe70:	4690      	mov	r8, r2
 800fe72:	461f      	mov	r7, r3
 800fe74:	d838      	bhi.n	800fee8 <__ssputs_r+0x84>
 800fe76:	898a      	ldrh	r2, [r1, #12]
 800fe78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe7c:	d032      	beq.n	800fee4 <__ssputs_r+0x80>
 800fe7e:	6825      	ldr	r5, [r4, #0]
 800fe80:	6909      	ldr	r1, [r1, #16]
 800fe82:	eba5 0901 	sub.w	r9, r5, r1
 800fe86:	6965      	ldr	r5, [r4, #20]
 800fe88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe90:	3301      	adds	r3, #1
 800fe92:	444b      	add	r3, r9
 800fe94:	106d      	asrs	r5, r5, #1
 800fe96:	429d      	cmp	r5, r3
 800fe98:	bf38      	it	cc
 800fe9a:	461d      	movcc	r5, r3
 800fe9c:	0553      	lsls	r3, r2, #21
 800fe9e:	d531      	bpl.n	800ff04 <__ssputs_r+0xa0>
 800fea0:	4629      	mov	r1, r5
 800fea2:	f7ff ff6b 	bl	800fd7c <_malloc_r>
 800fea6:	4606      	mov	r6, r0
 800fea8:	b950      	cbnz	r0, 800fec0 <__ssputs_r+0x5c>
 800feaa:	230c      	movs	r3, #12
 800feac:	f8ca 3000 	str.w	r3, [sl]
 800feb0:	89a3      	ldrh	r3, [r4, #12]
 800feb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feb6:	81a3      	strh	r3, [r4, #12]
 800feb8:	f04f 30ff 	mov.w	r0, #4294967295
 800febc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec0:	6921      	ldr	r1, [r4, #16]
 800fec2:	464a      	mov	r2, r9
 800fec4:	f7ff fb46 	bl	800f554 <memcpy>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	6126      	str	r6, [r4, #16]
 800fed6:	6165      	str	r5, [r4, #20]
 800fed8:	444e      	add	r6, r9
 800feda:	eba5 0509 	sub.w	r5, r5, r9
 800fede:	6026      	str	r6, [r4, #0]
 800fee0:	60a5      	str	r5, [r4, #8]
 800fee2:	463e      	mov	r6, r7
 800fee4:	42be      	cmp	r6, r7
 800fee6:	d900      	bls.n	800feea <__ssputs_r+0x86>
 800fee8:	463e      	mov	r6, r7
 800feea:	6820      	ldr	r0, [r4, #0]
 800feec:	4632      	mov	r2, r6
 800feee:	4641      	mov	r1, r8
 800fef0:	f000 fb5a 	bl	80105a8 <memmove>
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	1b9b      	subs	r3, r3, r6
 800fef8:	60a3      	str	r3, [r4, #8]
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	4433      	add	r3, r6
 800fefe:	6023      	str	r3, [r4, #0]
 800ff00:	2000      	movs	r0, #0
 800ff02:	e7db      	b.n	800febc <__ssputs_r+0x58>
 800ff04:	462a      	mov	r2, r5
 800ff06:	f000 fb75 	bl	80105f4 <_realloc_r>
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d1e1      	bne.n	800fed4 <__ssputs_r+0x70>
 800ff10:	6921      	ldr	r1, [r4, #16]
 800ff12:	4650      	mov	r0, sl
 800ff14:	f7ff fec6 	bl	800fca4 <_free_r>
 800ff18:	e7c7      	b.n	800feaa <__ssputs_r+0x46>
	...

0800ff1c <_svfiprintf_r>:
 800ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff20:	4698      	mov	r8, r3
 800ff22:	898b      	ldrh	r3, [r1, #12]
 800ff24:	061b      	lsls	r3, r3, #24
 800ff26:	b09d      	sub	sp, #116	; 0x74
 800ff28:	4607      	mov	r7, r0
 800ff2a:	460d      	mov	r5, r1
 800ff2c:	4614      	mov	r4, r2
 800ff2e:	d50e      	bpl.n	800ff4e <_svfiprintf_r+0x32>
 800ff30:	690b      	ldr	r3, [r1, #16]
 800ff32:	b963      	cbnz	r3, 800ff4e <_svfiprintf_r+0x32>
 800ff34:	2140      	movs	r1, #64	; 0x40
 800ff36:	f7ff ff21 	bl	800fd7c <_malloc_r>
 800ff3a:	6028      	str	r0, [r5, #0]
 800ff3c:	6128      	str	r0, [r5, #16]
 800ff3e:	b920      	cbnz	r0, 800ff4a <_svfiprintf_r+0x2e>
 800ff40:	230c      	movs	r3, #12
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	f04f 30ff 	mov.w	r0, #4294967295
 800ff48:	e0d1      	b.n	80100ee <_svfiprintf_r+0x1d2>
 800ff4a:	2340      	movs	r3, #64	; 0x40
 800ff4c:	616b      	str	r3, [r5, #20]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	9309      	str	r3, [sp, #36]	; 0x24
 800ff52:	2320      	movs	r3, #32
 800ff54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff5c:	2330      	movs	r3, #48	; 0x30
 800ff5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010108 <_svfiprintf_r+0x1ec>
 800ff62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff66:	f04f 0901 	mov.w	r9, #1
 800ff6a:	4623      	mov	r3, r4
 800ff6c:	469a      	mov	sl, r3
 800ff6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff72:	b10a      	cbz	r2, 800ff78 <_svfiprintf_r+0x5c>
 800ff74:	2a25      	cmp	r2, #37	; 0x25
 800ff76:	d1f9      	bne.n	800ff6c <_svfiprintf_r+0x50>
 800ff78:	ebba 0b04 	subs.w	fp, sl, r4
 800ff7c:	d00b      	beq.n	800ff96 <_svfiprintf_r+0x7a>
 800ff7e:	465b      	mov	r3, fp
 800ff80:	4622      	mov	r2, r4
 800ff82:	4629      	mov	r1, r5
 800ff84:	4638      	mov	r0, r7
 800ff86:	f7ff ff6d 	bl	800fe64 <__ssputs_r>
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	f000 80aa 	beq.w	80100e4 <_svfiprintf_r+0x1c8>
 800ff90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff92:	445a      	add	r2, fp
 800ff94:	9209      	str	r2, [sp, #36]	; 0x24
 800ff96:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 80a2 	beq.w	80100e4 <_svfiprintf_r+0x1c8>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffaa:	f10a 0a01 	add.w	sl, sl, #1
 800ffae:	9304      	str	r3, [sp, #16]
 800ffb0:	9307      	str	r3, [sp, #28]
 800ffb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffb6:	931a      	str	r3, [sp, #104]	; 0x68
 800ffb8:	4654      	mov	r4, sl
 800ffba:	2205      	movs	r2, #5
 800ffbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc0:	4851      	ldr	r0, [pc, #324]	; (8010108 <_svfiprintf_r+0x1ec>)
 800ffc2:	f7f0 f915 	bl	80001f0 <memchr>
 800ffc6:	9a04      	ldr	r2, [sp, #16]
 800ffc8:	b9d8      	cbnz	r0, 8010002 <_svfiprintf_r+0xe6>
 800ffca:	06d0      	lsls	r0, r2, #27
 800ffcc:	bf44      	itt	mi
 800ffce:	2320      	movmi	r3, #32
 800ffd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffd4:	0711      	lsls	r1, r2, #28
 800ffd6:	bf44      	itt	mi
 800ffd8:	232b      	movmi	r3, #43	; 0x2b
 800ffda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffde:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe2:	2b2a      	cmp	r3, #42	; 0x2a
 800ffe4:	d015      	beq.n	8010012 <_svfiprintf_r+0xf6>
 800ffe6:	9a07      	ldr	r2, [sp, #28]
 800ffe8:	4654      	mov	r4, sl
 800ffea:	2000      	movs	r0, #0
 800ffec:	f04f 0c0a 	mov.w	ip, #10
 800fff0:	4621      	mov	r1, r4
 800fff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fff6:	3b30      	subs	r3, #48	; 0x30
 800fff8:	2b09      	cmp	r3, #9
 800fffa:	d94e      	bls.n	801009a <_svfiprintf_r+0x17e>
 800fffc:	b1b0      	cbz	r0, 801002c <_svfiprintf_r+0x110>
 800fffe:	9207      	str	r2, [sp, #28]
 8010000:	e014      	b.n	801002c <_svfiprintf_r+0x110>
 8010002:	eba0 0308 	sub.w	r3, r0, r8
 8010006:	fa09 f303 	lsl.w	r3, r9, r3
 801000a:	4313      	orrs	r3, r2
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	46a2      	mov	sl, r4
 8010010:	e7d2      	b.n	800ffb8 <_svfiprintf_r+0x9c>
 8010012:	9b03      	ldr	r3, [sp, #12]
 8010014:	1d19      	adds	r1, r3, #4
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	9103      	str	r1, [sp, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	bfbb      	ittet	lt
 801001e:	425b      	neglt	r3, r3
 8010020:	f042 0202 	orrlt.w	r2, r2, #2
 8010024:	9307      	strge	r3, [sp, #28]
 8010026:	9307      	strlt	r3, [sp, #28]
 8010028:	bfb8      	it	lt
 801002a:	9204      	strlt	r2, [sp, #16]
 801002c:	7823      	ldrb	r3, [r4, #0]
 801002e:	2b2e      	cmp	r3, #46	; 0x2e
 8010030:	d10c      	bne.n	801004c <_svfiprintf_r+0x130>
 8010032:	7863      	ldrb	r3, [r4, #1]
 8010034:	2b2a      	cmp	r3, #42	; 0x2a
 8010036:	d135      	bne.n	80100a4 <_svfiprintf_r+0x188>
 8010038:	9b03      	ldr	r3, [sp, #12]
 801003a:	1d1a      	adds	r2, r3, #4
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	9203      	str	r2, [sp, #12]
 8010040:	2b00      	cmp	r3, #0
 8010042:	bfb8      	it	lt
 8010044:	f04f 33ff 	movlt.w	r3, #4294967295
 8010048:	3402      	adds	r4, #2
 801004a:	9305      	str	r3, [sp, #20]
 801004c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010118 <_svfiprintf_r+0x1fc>
 8010050:	7821      	ldrb	r1, [r4, #0]
 8010052:	2203      	movs	r2, #3
 8010054:	4650      	mov	r0, sl
 8010056:	f7f0 f8cb 	bl	80001f0 <memchr>
 801005a:	b140      	cbz	r0, 801006e <_svfiprintf_r+0x152>
 801005c:	2340      	movs	r3, #64	; 0x40
 801005e:	eba0 000a 	sub.w	r0, r0, sl
 8010062:	fa03 f000 	lsl.w	r0, r3, r0
 8010066:	9b04      	ldr	r3, [sp, #16]
 8010068:	4303      	orrs	r3, r0
 801006a:	3401      	adds	r4, #1
 801006c:	9304      	str	r3, [sp, #16]
 801006e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010072:	4826      	ldr	r0, [pc, #152]	; (801010c <_svfiprintf_r+0x1f0>)
 8010074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010078:	2206      	movs	r2, #6
 801007a:	f7f0 f8b9 	bl	80001f0 <memchr>
 801007e:	2800      	cmp	r0, #0
 8010080:	d038      	beq.n	80100f4 <_svfiprintf_r+0x1d8>
 8010082:	4b23      	ldr	r3, [pc, #140]	; (8010110 <_svfiprintf_r+0x1f4>)
 8010084:	bb1b      	cbnz	r3, 80100ce <_svfiprintf_r+0x1b2>
 8010086:	9b03      	ldr	r3, [sp, #12]
 8010088:	3307      	adds	r3, #7
 801008a:	f023 0307 	bic.w	r3, r3, #7
 801008e:	3308      	adds	r3, #8
 8010090:	9303      	str	r3, [sp, #12]
 8010092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010094:	4433      	add	r3, r6
 8010096:	9309      	str	r3, [sp, #36]	; 0x24
 8010098:	e767      	b.n	800ff6a <_svfiprintf_r+0x4e>
 801009a:	fb0c 3202 	mla	r2, ip, r2, r3
 801009e:	460c      	mov	r4, r1
 80100a0:	2001      	movs	r0, #1
 80100a2:	e7a5      	b.n	800fff0 <_svfiprintf_r+0xd4>
 80100a4:	2300      	movs	r3, #0
 80100a6:	3401      	adds	r4, #1
 80100a8:	9305      	str	r3, [sp, #20]
 80100aa:	4619      	mov	r1, r3
 80100ac:	f04f 0c0a 	mov.w	ip, #10
 80100b0:	4620      	mov	r0, r4
 80100b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100b6:	3a30      	subs	r2, #48	; 0x30
 80100b8:	2a09      	cmp	r2, #9
 80100ba:	d903      	bls.n	80100c4 <_svfiprintf_r+0x1a8>
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0c5      	beq.n	801004c <_svfiprintf_r+0x130>
 80100c0:	9105      	str	r1, [sp, #20]
 80100c2:	e7c3      	b.n	801004c <_svfiprintf_r+0x130>
 80100c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80100c8:	4604      	mov	r4, r0
 80100ca:	2301      	movs	r3, #1
 80100cc:	e7f0      	b.n	80100b0 <_svfiprintf_r+0x194>
 80100ce:	ab03      	add	r3, sp, #12
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	462a      	mov	r2, r5
 80100d4:	4b0f      	ldr	r3, [pc, #60]	; (8010114 <_svfiprintf_r+0x1f8>)
 80100d6:	a904      	add	r1, sp, #16
 80100d8:	4638      	mov	r0, r7
 80100da:	f7fd fc5d 	bl	800d998 <_printf_float>
 80100de:	1c42      	adds	r2, r0, #1
 80100e0:	4606      	mov	r6, r0
 80100e2:	d1d6      	bne.n	8010092 <_svfiprintf_r+0x176>
 80100e4:	89ab      	ldrh	r3, [r5, #12]
 80100e6:	065b      	lsls	r3, r3, #25
 80100e8:	f53f af2c 	bmi.w	800ff44 <_svfiprintf_r+0x28>
 80100ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100ee:	b01d      	add	sp, #116	; 0x74
 80100f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f4:	ab03      	add	r3, sp, #12
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	462a      	mov	r2, r5
 80100fa:	4b06      	ldr	r3, [pc, #24]	; (8010114 <_svfiprintf_r+0x1f8>)
 80100fc:	a904      	add	r1, sp, #16
 80100fe:	4638      	mov	r0, r7
 8010100:	f7fd feee 	bl	800dee0 <_printf_i>
 8010104:	e7eb      	b.n	80100de <_svfiprintf_r+0x1c2>
 8010106:	bf00      	nop
 8010108:	080115cc 	.word	0x080115cc
 801010c:	080115d6 	.word	0x080115d6
 8010110:	0800d999 	.word	0x0800d999
 8010114:	0800fe65 	.word	0x0800fe65
 8010118:	080115d2 	.word	0x080115d2

0801011c <__sfputc_r>:
 801011c:	6893      	ldr	r3, [r2, #8]
 801011e:	3b01      	subs	r3, #1
 8010120:	2b00      	cmp	r3, #0
 8010122:	b410      	push	{r4}
 8010124:	6093      	str	r3, [r2, #8]
 8010126:	da08      	bge.n	801013a <__sfputc_r+0x1e>
 8010128:	6994      	ldr	r4, [r2, #24]
 801012a:	42a3      	cmp	r3, r4
 801012c:	db01      	blt.n	8010132 <__sfputc_r+0x16>
 801012e:	290a      	cmp	r1, #10
 8010130:	d103      	bne.n	801013a <__sfputc_r+0x1e>
 8010132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010136:	f7fe b8a7 	b.w	800e288 <__swbuf_r>
 801013a:	6813      	ldr	r3, [r2, #0]
 801013c:	1c58      	adds	r0, r3, #1
 801013e:	6010      	str	r0, [r2, #0]
 8010140:	7019      	strb	r1, [r3, #0]
 8010142:	4608      	mov	r0, r1
 8010144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010148:	4770      	bx	lr

0801014a <__sfputs_r>:
 801014a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014c:	4606      	mov	r6, r0
 801014e:	460f      	mov	r7, r1
 8010150:	4614      	mov	r4, r2
 8010152:	18d5      	adds	r5, r2, r3
 8010154:	42ac      	cmp	r4, r5
 8010156:	d101      	bne.n	801015c <__sfputs_r+0x12>
 8010158:	2000      	movs	r0, #0
 801015a:	e007      	b.n	801016c <__sfputs_r+0x22>
 801015c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010160:	463a      	mov	r2, r7
 8010162:	4630      	mov	r0, r6
 8010164:	f7ff ffda 	bl	801011c <__sfputc_r>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d1f3      	bne.n	8010154 <__sfputs_r+0xa>
 801016c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010170 <_vfiprintf_r>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	460d      	mov	r5, r1
 8010176:	b09d      	sub	sp, #116	; 0x74
 8010178:	4614      	mov	r4, r2
 801017a:	4698      	mov	r8, r3
 801017c:	4606      	mov	r6, r0
 801017e:	b118      	cbz	r0, 8010188 <_vfiprintf_r+0x18>
 8010180:	6983      	ldr	r3, [r0, #24]
 8010182:	b90b      	cbnz	r3, 8010188 <_vfiprintf_r+0x18>
 8010184:	f7ff f8d4 	bl	800f330 <__sinit>
 8010188:	4b89      	ldr	r3, [pc, #548]	; (80103b0 <_vfiprintf_r+0x240>)
 801018a:	429d      	cmp	r5, r3
 801018c:	d11b      	bne.n	80101c6 <_vfiprintf_r+0x56>
 801018e:	6875      	ldr	r5, [r6, #4]
 8010190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010192:	07d9      	lsls	r1, r3, #31
 8010194:	d405      	bmi.n	80101a2 <_vfiprintf_r+0x32>
 8010196:	89ab      	ldrh	r3, [r5, #12]
 8010198:	059a      	lsls	r2, r3, #22
 801019a:	d402      	bmi.n	80101a2 <_vfiprintf_r+0x32>
 801019c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801019e:	f7ff f96a 	bl	800f476 <__retarget_lock_acquire_recursive>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	071b      	lsls	r3, r3, #28
 80101a6:	d501      	bpl.n	80101ac <_vfiprintf_r+0x3c>
 80101a8:	692b      	ldr	r3, [r5, #16]
 80101aa:	b9eb      	cbnz	r3, 80101e8 <_vfiprintf_r+0x78>
 80101ac:	4629      	mov	r1, r5
 80101ae:	4630      	mov	r0, r6
 80101b0:	f7fe f8bc 	bl	800e32c <__swsetup_r>
 80101b4:	b1c0      	cbz	r0, 80101e8 <_vfiprintf_r+0x78>
 80101b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101b8:	07dc      	lsls	r4, r3, #31
 80101ba:	d50e      	bpl.n	80101da <_vfiprintf_r+0x6a>
 80101bc:	f04f 30ff 	mov.w	r0, #4294967295
 80101c0:	b01d      	add	sp, #116	; 0x74
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	4b7b      	ldr	r3, [pc, #492]	; (80103b4 <_vfiprintf_r+0x244>)
 80101c8:	429d      	cmp	r5, r3
 80101ca:	d101      	bne.n	80101d0 <_vfiprintf_r+0x60>
 80101cc:	68b5      	ldr	r5, [r6, #8]
 80101ce:	e7df      	b.n	8010190 <_vfiprintf_r+0x20>
 80101d0:	4b79      	ldr	r3, [pc, #484]	; (80103b8 <_vfiprintf_r+0x248>)
 80101d2:	429d      	cmp	r5, r3
 80101d4:	bf08      	it	eq
 80101d6:	68f5      	ldreq	r5, [r6, #12]
 80101d8:	e7da      	b.n	8010190 <_vfiprintf_r+0x20>
 80101da:	89ab      	ldrh	r3, [r5, #12]
 80101dc:	0598      	lsls	r0, r3, #22
 80101de:	d4ed      	bmi.n	80101bc <_vfiprintf_r+0x4c>
 80101e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101e2:	f7ff f949 	bl	800f478 <__retarget_lock_release_recursive>
 80101e6:	e7e9      	b.n	80101bc <_vfiprintf_r+0x4c>
 80101e8:	2300      	movs	r3, #0
 80101ea:	9309      	str	r3, [sp, #36]	; 0x24
 80101ec:	2320      	movs	r3, #32
 80101ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80101f6:	2330      	movs	r3, #48	; 0x30
 80101f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80103bc <_vfiprintf_r+0x24c>
 80101fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010200:	f04f 0901 	mov.w	r9, #1
 8010204:	4623      	mov	r3, r4
 8010206:	469a      	mov	sl, r3
 8010208:	f813 2b01 	ldrb.w	r2, [r3], #1
 801020c:	b10a      	cbz	r2, 8010212 <_vfiprintf_r+0xa2>
 801020e:	2a25      	cmp	r2, #37	; 0x25
 8010210:	d1f9      	bne.n	8010206 <_vfiprintf_r+0x96>
 8010212:	ebba 0b04 	subs.w	fp, sl, r4
 8010216:	d00b      	beq.n	8010230 <_vfiprintf_r+0xc0>
 8010218:	465b      	mov	r3, fp
 801021a:	4622      	mov	r2, r4
 801021c:	4629      	mov	r1, r5
 801021e:	4630      	mov	r0, r6
 8010220:	f7ff ff93 	bl	801014a <__sfputs_r>
 8010224:	3001      	adds	r0, #1
 8010226:	f000 80aa 	beq.w	801037e <_vfiprintf_r+0x20e>
 801022a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801022c:	445a      	add	r2, fp
 801022e:	9209      	str	r2, [sp, #36]	; 0x24
 8010230:	f89a 3000 	ldrb.w	r3, [sl]
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 80a2 	beq.w	801037e <_vfiprintf_r+0x20e>
 801023a:	2300      	movs	r3, #0
 801023c:	f04f 32ff 	mov.w	r2, #4294967295
 8010240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010244:	f10a 0a01 	add.w	sl, sl, #1
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	9307      	str	r3, [sp, #28]
 801024c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010250:	931a      	str	r3, [sp, #104]	; 0x68
 8010252:	4654      	mov	r4, sl
 8010254:	2205      	movs	r2, #5
 8010256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801025a:	4858      	ldr	r0, [pc, #352]	; (80103bc <_vfiprintf_r+0x24c>)
 801025c:	f7ef ffc8 	bl	80001f0 <memchr>
 8010260:	9a04      	ldr	r2, [sp, #16]
 8010262:	b9d8      	cbnz	r0, 801029c <_vfiprintf_r+0x12c>
 8010264:	06d1      	lsls	r1, r2, #27
 8010266:	bf44      	itt	mi
 8010268:	2320      	movmi	r3, #32
 801026a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801026e:	0713      	lsls	r3, r2, #28
 8010270:	bf44      	itt	mi
 8010272:	232b      	movmi	r3, #43	; 0x2b
 8010274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010278:	f89a 3000 	ldrb.w	r3, [sl]
 801027c:	2b2a      	cmp	r3, #42	; 0x2a
 801027e:	d015      	beq.n	80102ac <_vfiprintf_r+0x13c>
 8010280:	9a07      	ldr	r2, [sp, #28]
 8010282:	4654      	mov	r4, sl
 8010284:	2000      	movs	r0, #0
 8010286:	f04f 0c0a 	mov.w	ip, #10
 801028a:	4621      	mov	r1, r4
 801028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010290:	3b30      	subs	r3, #48	; 0x30
 8010292:	2b09      	cmp	r3, #9
 8010294:	d94e      	bls.n	8010334 <_vfiprintf_r+0x1c4>
 8010296:	b1b0      	cbz	r0, 80102c6 <_vfiprintf_r+0x156>
 8010298:	9207      	str	r2, [sp, #28]
 801029a:	e014      	b.n	80102c6 <_vfiprintf_r+0x156>
 801029c:	eba0 0308 	sub.w	r3, r0, r8
 80102a0:	fa09 f303 	lsl.w	r3, r9, r3
 80102a4:	4313      	orrs	r3, r2
 80102a6:	9304      	str	r3, [sp, #16]
 80102a8:	46a2      	mov	sl, r4
 80102aa:	e7d2      	b.n	8010252 <_vfiprintf_r+0xe2>
 80102ac:	9b03      	ldr	r3, [sp, #12]
 80102ae:	1d19      	adds	r1, r3, #4
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	9103      	str	r1, [sp, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bfbb      	ittet	lt
 80102b8:	425b      	neglt	r3, r3
 80102ba:	f042 0202 	orrlt.w	r2, r2, #2
 80102be:	9307      	strge	r3, [sp, #28]
 80102c0:	9307      	strlt	r3, [sp, #28]
 80102c2:	bfb8      	it	lt
 80102c4:	9204      	strlt	r2, [sp, #16]
 80102c6:	7823      	ldrb	r3, [r4, #0]
 80102c8:	2b2e      	cmp	r3, #46	; 0x2e
 80102ca:	d10c      	bne.n	80102e6 <_vfiprintf_r+0x176>
 80102cc:	7863      	ldrb	r3, [r4, #1]
 80102ce:	2b2a      	cmp	r3, #42	; 0x2a
 80102d0:	d135      	bne.n	801033e <_vfiprintf_r+0x1ce>
 80102d2:	9b03      	ldr	r3, [sp, #12]
 80102d4:	1d1a      	adds	r2, r3, #4
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	9203      	str	r2, [sp, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	bfb8      	it	lt
 80102de:	f04f 33ff 	movlt.w	r3, #4294967295
 80102e2:	3402      	adds	r4, #2
 80102e4:	9305      	str	r3, [sp, #20]
 80102e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80103cc <_vfiprintf_r+0x25c>
 80102ea:	7821      	ldrb	r1, [r4, #0]
 80102ec:	2203      	movs	r2, #3
 80102ee:	4650      	mov	r0, sl
 80102f0:	f7ef ff7e 	bl	80001f0 <memchr>
 80102f4:	b140      	cbz	r0, 8010308 <_vfiprintf_r+0x198>
 80102f6:	2340      	movs	r3, #64	; 0x40
 80102f8:	eba0 000a 	sub.w	r0, r0, sl
 80102fc:	fa03 f000 	lsl.w	r0, r3, r0
 8010300:	9b04      	ldr	r3, [sp, #16]
 8010302:	4303      	orrs	r3, r0
 8010304:	3401      	adds	r4, #1
 8010306:	9304      	str	r3, [sp, #16]
 8010308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801030c:	482c      	ldr	r0, [pc, #176]	; (80103c0 <_vfiprintf_r+0x250>)
 801030e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010312:	2206      	movs	r2, #6
 8010314:	f7ef ff6c 	bl	80001f0 <memchr>
 8010318:	2800      	cmp	r0, #0
 801031a:	d03f      	beq.n	801039c <_vfiprintf_r+0x22c>
 801031c:	4b29      	ldr	r3, [pc, #164]	; (80103c4 <_vfiprintf_r+0x254>)
 801031e:	bb1b      	cbnz	r3, 8010368 <_vfiprintf_r+0x1f8>
 8010320:	9b03      	ldr	r3, [sp, #12]
 8010322:	3307      	adds	r3, #7
 8010324:	f023 0307 	bic.w	r3, r3, #7
 8010328:	3308      	adds	r3, #8
 801032a:	9303      	str	r3, [sp, #12]
 801032c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801032e:	443b      	add	r3, r7
 8010330:	9309      	str	r3, [sp, #36]	; 0x24
 8010332:	e767      	b.n	8010204 <_vfiprintf_r+0x94>
 8010334:	fb0c 3202 	mla	r2, ip, r2, r3
 8010338:	460c      	mov	r4, r1
 801033a:	2001      	movs	r0, #1
 801033c:	e7a5      	b.n	801028a <_vfiprintf_r+0x11a>
 801033e:	2300      	movs	r3, #0
 8010340:	3401      	adds	r4, #1
 8010342:	9305      	str	r3, [sp, #20]
 8010344:	4619      	mov	r1, r3
 8010346:	f04f 0c0a 	mov.w	ip, #10
 801034a:	4620      	mov	r0, r4
 801034c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010350:	3a30      	subs	r2, #48	; 0x30
 8010352:	2a09      	cmp	r2, #9
 8010354:	d903      	bls.n	801035e <_vfiprintf_r+0x1ee>
 8010356:	2b00      	cmp	r3, #0
 8010358:	d0c5      	beq.n	80102e6 <_vfiprintf_r+0x176>
 801035a:	9105      	str	r1, [sp, #20]
 801035c:	e7c3      	b.n	80102e6 <_vfiprintf_r+0x176>
 801035e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010362:	4604      	mov	r4, r0
 8010364:	2301      	movs	r3, #1
 8010366:	e7f0      	b.n	801034a <_vfiprintf_r+0x1da>
 8010368:	ab03      	add	r3, sp, #12
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	462a      	mov	r2, r5
 801036e:	4b16      	ldr	r3, [pc, #88]	; (80103c8 <_vfiprintf_r+0x258>)
 8010370:	a904      	add	r1, sp, #16
 8010372:	4630      	mov	r0, r6
 8010374:	f7fd fb10 	bl	800d998 <_printf_float>
 8010378:	4607      	mov	r7, r0
 801037a:	1c78      	adds	r0, r7, #1
 801037c:	d1d6      	bne.n	801032c <_vfiprintf_r+0x1bc>
 801037e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010380:	07d9      	lsls	r1, r3, #31
 8010382:	d405      	bmi.n	8010390 <_vfiprintf_r+0x220>
 8010384:	89ab      	ldrh	r3, [r5, #12]
 8010386:	059a      	lsls	r2, r3, #22
 8010388:	d402      	bmi.n	8010390 <_vfiprintf_r+0x220>
 801038a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801038c:	f7ff f874 	bl	800f478 <__retarget_lock_release_recursive>
 8010390:	89ab      	ldrh	r3, [r5, #12]
 8010392:	065b      	lsls	r3, r3, #25
 8010394:	f53f af12 	bmi.w	80101bc <_vfiprintf_r+0x4c>
 8010398:	9809      	ldr	r0, [sp, #36]	; 0x24
 801039a:	e711      	b.n	80101c0 <_vfiprintf_r+0x50>
 801039c:	ab03      	add	r3, sp, #12
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	462a      	mov	r2, r5
 80103a2:	4b09      	ldr	r3, [pc, #36]	; (80103c8 <_vfiprintf_r+0x258>)
 80103a4:	a904      	add	r1, sp, #16
 80103a6:	4630      	mov	r0, r6
 80103a8:	f7fd fd9a 	bl	800dee0 <_printf_i>
 80103ac:	e7e4      	b.n	8010378 <_vfiprintf_r+0x208>
 80103ae:	bf00      	nop
 80103b0:	08011430 	.word	0x08011430
 80103b4:	08011450 	.word	0x08011450
 80103b8:	08011410 	.word	0x08011410
 80103bc:	080115cc 	.word	0x080115cc
 80103c0:	080115d6 	.word	0x080115d6
 80103c4:	0800d999 	.word	0x0800d999
 80103c8:	0801014b 	.word	0x0801014b
 80103cc:	080115d2 	.word	0x080115d2

080103d0 <_sbrk_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d06      	ldr	r5, [pc, #24]	; (80103ec <_sbrk_r+0x1c>)
 80103d4:	2300      	movs	r3, #0
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	f7f3 fb32 	bl	8003a44 <_sbrk>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_sbrk_r+0x1a>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_sbrk_r+0x1a>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	20002288 	.word	0x20002288

080103f0 <__sread>:
 80103f0:	b510      	push	{r4, lr}
 80103f2:	460c      	mov	r4, r1
 80103f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f8:	f000 f92c 	bl	8010654 <_read_r>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	bfab      	itete	ge
 8010400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010402:	89a3      	ldrhlt	r3, [r4, #12]
 8010404:	181b      	addge	r3, r3, r0
 8010406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801040a:	bfac      	ite	ge
 801040c:	6563      	strge	r3, [r4, #84]	; 0x54
 801040e:	81a3      	strhlt	r3, [r4, #12]
 8010410:	bd10      	pop	{r4, pc}

08010412 <__swrite>:
 8010412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010416:	461f      	mov	r7, r3
 8010418:	898b      	ldrh	r3, [r1, #12]
 801041a:	05db      	lsls	r3, r3, #23
 801041c:	4605      	mov	r5, r0
 801041e:	460c      	mov	r4, r1
 8010420:	4616      	mov	r6, r2
 8010422:	d505      	bpl.n	8010430 <__swrite+0x1e>
 8010424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010428:	2302      	movs	r3, #2
 801042a:	2200      	movs	r2, #0
 801042c:	f000 f898 	bl	8010560 <_lseek_r>
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801043a:	81a3      	strh	r3, [r4, #12]
 801043c:	4632      	mov	r2, r6
 801043e:	463b      	mov	r3, r7
 8010440:	4628      	mov	r0, r5
 8010442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010446:	f000 b817 	b.w	8010478 <_write_r>

0801044a <__sseek>:
 801044a:	b510      	push	{r4, lr}
 801044c:	460c      	mov	r4, r1
 801044e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010452:	f000 f885 	bl	8010560 <_lseek_r>
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	bf15      	itete	ne
 801045c:	6560      	strne	r0, [r4, #84]	; 0x54
 801045e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010466:	81a3      	strheq	r3, [r4, #12]
 8010468:	bf18      	it	ne
 801046a:	81a3      	strhne	r3, [r4, #12]
 801046c:	bd10      	pop	{r4, pc}

0801046e <__sclose>:
 801046e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010472:	f000 b831 	b.w	80104d8 <_close_r>
	...

08010478 <_write_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4d07      	ldr	r5, [pc, #28]	; (8010498 <_write_r+0x20>)
 801047c:	4604      	mov	r4, r0
 801047e:	4608      	mov	r0, r1
 8010480:	4611      	mov	r1, r2
 8010482:	2200      	movs	r2, #0
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	f7f3 fa8b 	bl	80039a2 <_write>
 801048c:	1c43      	adds	r3, r0, #1
 801048e:	d102      	bne.n	8010496 <_write_r+0x1e>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	b103      	cbz	r3, 8010496 <_write_r+0x1e>
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	bd38      	pop	{r3, r4, r5, pc}
 8010498:	20002288 	.word	0x20002288

0801049c <__assert_func>:
 801049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801049e:	4614      	mov	r4, r2
 80104a0:	461a      	mov	r2, r3
 80104a2:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <__assert_func+0x2c>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4605      	mov	r5, r0
 80104a8:	68d8      	ldr	r0, [r3, #12]
 80104aa:	b14c      	cbz	r4, 80104c0 <__assert_func+0x24>
 80104ac:	4b07      	ldr	r3, [pc, #28]	; (80104cc <__assert_func+0x30>)
 80104ae:	9100      	str	r1, [sp, #0]
 80104b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104b4:	4906      	ldr	r1, [pc, #24]	; (80104d0 <__assert_func+0x34>)
 80104b6:	462b      	mov	r3, r5
 80104b8:	f000 f81e 	bl	80104f8 <fiprintf>
 80104bc:	f000 f8e9 	bl	8010692 <abort>
 80104c0:	4b04      	ldr	r3, [pc, #16]	; (80104d4 <__assert_func+0x38>)
 80104c2:	461c      	mov	r4, r3
 80104c4:	e7f3      	b.n	80104ae <__assert_func+0x12>
 80104c6:	bf00      	nop
 80104c8:	20000194 	.word	0x20000194
 80104cc:	080115dd 	.word	0x080115dd
 80104d0:	080115ea 	.word	0x080115ea
 80104d4:	08011618 	.word	0x08011618

080104d8 <_close_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d06      	ldr	r5, [pc, #24]	; (80104f4 <_close_r+0x1c>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	602b      	str	r3, [r5, #0]
 80104e4:	f7f3 fa79 	bl	80039da <_close>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d102      	bne.n	80104f2 <_close_r+0x1a>
 80104ec:	682b      	ldr	r3, [r5, #0]
 80104ee:	b103      	cbz	r3, 80104f2 <_close_r+0x1a>
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	bd38      	pop	{r3, r4, r5, pc}
 80104f4:	20002288 	.word	0x20002288

080104f8 <fiprintf>:
 80104f8:	b40e      	push	{r1, r2, r3}
 80104fa:	b503      	push	{r0, r1, lr}
 80104fc:	4601      	mov	r1, r0
 80104fe:	ab03      	add	r3, sp, #12
 8010500:	4805      	ldr	r0, [pc, #20]	; (8010518 <fiprintf+0x20>)
 8010502:	f853 2b04 	ldr.w	r2, [r3], #4
 8010506:	6800      	ldr	r0, [r0, #0]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	f7ff fe31 	bl	8010170 <_vfiprintf_r>
 801050e:	b002      	add	sp, #8
 8010510:	f85d eb04 	ldr.w	lr, [sp], #4
 8010514:	b003      	add	sp, #12
 8010516:	4770      	bx	lr
 8010518:	20000194 	.word	0x20000194

0801051c <_fstat_r>:
 801051c:	b538      	push	{r3, r4, r5, lr}
 801051e:	4d07      	ldr	r5, [pc, #28]	; (801053c <_fstat_r+0x20>)
 8010520:	2300      	movs	r3, #0
 8010522:	4604      	mov	r4, r0
 8010524:	4608      	mov	r0, r1
 8010526:	4611      	mov	r1, r2
 8010528:	602b      	str	r3, [r5, #0]
 801052a:	f7f3 fa62 	bl	80039f2 <_fstat>
 801052e:	1c43      	adds	r3, r0, #1
 8010530:	d102      	bne.n	8010538 <_fstat_r+0x1c>
 8010532:	682b      	ldr	r3, [r5, #0]
 8010534:	b103      	cbz	r3, 8010538 <_fstat_r+0x1c>
 8010536:	6023      	str	r3, [r4, #0]
 8010538:	bd38      	pop	{r3, r4, r5, pc}
 801053a:	bf00      	nop
 801053c:	20002288 	.word	0x20002288

08010540 <_isatty_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4d06      	ldr	r5, [pc, #24]	; (801055c <_isatty_r+0x1c>)
 8010544:	2300      	movs	r3, #0
 8010546:	4604      	mov	r4, r0
 8010548:	4608      	mov	r0, r1
 801054a:	602b      	str	r3, [r5, #0]
 801054c:	f7f3 fa61 	bl	8003a12 <_isatty>
 8010550:	1c43      	adds	r3, r0, #1
 8010552:	d102      	bne.n	801055a <_isatty_r+0x1a>
 8010554:	682b      	ldr	r3, [r5, #0]
 8010556:	b103      	cbz	r3, 801055a <_isatty_r+0x1a>
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	20002288 	.word	0x20002288

08010560 <_lseek_r>:
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4d07      	ldr	r5, [pc, #28]	; (8010580 <_lseek_r+0x20>)
 8010564:	4604      	mov	r4, r0
 8010566:	4608      	mov	r0, r1
 8010568:	4611      	mov	r1, r2
 801056a:	2200      	movs	r2, #0
 801056c:	602a      	str	r2, [r5, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	f7f3 fa5a 	bl	8003a28 <_lseek>
 8010574:	1c43      	adds	r3, r0, #1
 8010576:	d102      	bne.n	801057e <_lseek_r+0x1e>
 8010578:	682b      	ldr	r3, [r5, #0]
 801057a:	b103      	cbz	r3, 801057e <_lseek_r+0x1e>
 801057c:	6023      	str	r3, [r4, #0]
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	20002288 	.word	0x20002288

08010584 <__ascii_mbtowc>:
 8010584:	b082      	sub	sp, #8
 8010586:	b901      	cbnz	r1, 801058a <__ascii_mbtowc+0x6>
 8010588:	a901      	add	r1, sp, #4
 801058a:	b142      	cbz	r2, 801059e <__ascii_mbtowc+0x1a>
 801058c:	b14b      	cbz	r3, 80105a2 <__ascii_mbtowc+0x1e>
 801058e:	7813      	ldrb	r3, [r2, #0]
 8010590:	600b      	str	r3, [r1, #0]
 8010592:	7812      	ldrb	r2, [r2, #0]
 8010594:	1e10      	subs	r0, r2, #0
 8010596:	bf18      	it	ne
 8010598:	2001      	movne	r0, #1
 801059a:	b002      	add	sp, #8
 801059c:	4770      	bx	lr
 801059e:	4610      	mov	r0, r2
 80105a0:	e7fb      	b.n	801059a <__ascii_mbtowc+0x16>
 80105a2:	f06f 0001 	mvn.w	r0, #1
 80105a6:	e7f8      	b.n	801059a <__ascii_mbtowc+0x16>

080105a8 <memmove>:
 80105a8:	4288      	cmp	r0, r1
 80105aa:	b510      	push	{r4, lr}
 80105ac:	eb01 0402 	add.w	r4, r1, r2
 80105b0:	d902      	bls.n	80105b8 <memmove+0x10>
 80105b2:	4284      	cmp	r4, r0
 80105b4:	4623      	mov	r3, r4
 80105b6:	d807      	bhi.n	80105c8 <memmove+0x20>
 80105b8:	1e43      	subs	r3, r0, #1
 80105ba:	42a1      	cmp	r1, r4
 80105bc:	d008      	beq.n	80105d0 <memmove+0x28>
 80105be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105c6:	e7f8      	b.n	80105ba <memmove+0x12>
 80105c8:	4402      	add	r2, r0
 80105ca:	4601      	mov	r1, r0
 80105cc:	428a      	cmp	r2, r1
 80105ce:	d100      	bne.n	80105d2 <memmove+0x2a>
 80105d0:	bd10      	pop	{r4, pc}
 80105d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105da:	e7f7      	b.n	80105cc <memmove+0x24>

080105dc <__malloc_lock>:
 80105dc:	4801      	ldr	r0, [pc, #4]	; (80105e4 <__malloc_lock+0x8>)
 80105de:	f7fe bf4a 	b.w	800f476 <__retarget_lock_acquire_recursive>
 80105e2:	bf00      	nop
 80105e4:	2000227c 	.word	0x2000227c

080105e8 <__malloc_unlock>:
 80105e8:	4801      	ldr	r0, [pc, #4]	; (80105f0 <__malloc_unlock+0x8>)
 80105ea:	f7fe bf45 	b.w	800f478 <__retarget_lock_release_recursive>
 80105ee:	bf00      	nop
 80105f0:	2000227c 	.word	0x2000227c

080105f4 <_realloc_r>:
 80105f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f8:	4680      	mov	r8, r0
 80105fa:	4614      	mov	r4, r2
 80105fc:	460e      	mov	r6, r1
 80105fe:	b921      	cbnz	r1, 801060a <_realloc_r+0x16>
 8010600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010604:	4611      	mov	r1, r2
 8010606:	f7ff bbb9 	b.w	800fd7c <_malloc_r>
 801060a:	b92a      	cbnz	r2, 8010618 <_realloc_r+0x24>
 801060c:	f7ff fb4a 	bl	800fca4 <_free_r>
 8010610:	4625      	mov	r5, r4
 8010612:	4628      	mov	r0, r5
 8010614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010618:	f000 f842 	bl	80106a0 <_malloc_usable_size_r>
 801061c:	4284      	cmp	r4, r0
 801061e:	4607      	mov	r7, r0
 8010620:	d802      	bhi.n	8010628 <_realloc_r+0x34>
 8010622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010626:	d812      	bhi.n	801064e <_realloc_r+0x5a>
 8010628:	4621      	mov	r1, r4
 801062a:	4640      	mov	r0, r8
 801062c:	f7ff fba6 	bl	800fd7c <_malloc_r>
 8010630:	4605      	mov	r5, r0
 8010632:	2800      	cmp	r0, #0
 8010634:	d0ed      	beq.n	8010612 <_realloc_r+0x1e>
 8010636:	42bc      	cmp	r4, r7
 8010638:	4622      	mov	r2, r4
 801063a:	4631      	mov	r1, r6
 801063c:	bf28      	it	cs
 801063e:	463a      	movcs	r2, r7
 8010640:	f7fe ff88 	bl	800f554 <memcpy>
 8010644:	4631      	mov	r1, r6
 8010646:	4640      	mov	r0, r8
 8010648:	f7ff fb2c 	bl	800fca4 <_free_r>
 801064c:	e7e1      	b.n	8010612 <_realloc_r+0x1e>
 801064e:	4635      	mov	r5, r6
 8010650:	e7df      	b.n	8010612 <_realloc_r+0x1e>
	...

08010654 <_read_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4d07      	ldr	r5, [pc, #28]	; (8010674 <_read_r+0x20>)
 8010658:	4604      	mov	r4, r0
 801065a:	4608      	mov	r0, r1
 801065c:	4611      	mov	r1, r2
 801065e:	2200      	movs	r2, #0
 8010660:	602a      	str	r2, [r5, #0]
 8010662:	461a      	mov	r2, r3
 8010664:	f7f3 f980 	bl	8003968 <_read>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d102      	bne.n	8010672 <_read_r+0x1e>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	b103      	cbz	r3, 8010672 <_read_r+0x1e>
 8010670:	6023      	str	r3, [r4, #0]
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	20002288 	.word	0x20002288

08010678 <__ascii_wctomb>:
 8010678:	b149      	cbz	r1, 801068e <__ascii_wctomb+0x16>
 801067a:	2aff      	cmp	r2, #255	; 0xff
 801067c:	bf85      	ittet	hi
 801067e:	238a      	movhi	r3, #138	; 0x8a
 8010680:	6003      	strhi	r3, [r0, #0]
 8010682:	700a      	strbls	r2, [r1, #0]
 8010684:	f04f 30ff 	movhi.w	r0, #4294967295
 8010688:	bf98      	it	ls
 801068a:	2001      	movls	r0, #1
 801068c:	4770      	bx	lr
 801068e:	4608      	mov	r0, r1
 8010690:	4770      	bx	lr

08010692 <abort>:
 8010692:	b508      	push	{r3, lr}
 8010694:	2006      	movs	r0, #6
 8010696:	f000 f833 	bl	8010700 <raise>
 801069a:	2001      	movs	r0, #1
 801069c:	f7f3 f95a 	bl	8003954 <_exit>

080106a0 <_malloc_usable_size_r>:
 80106a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106a4:	1f18      	subs	r0, r3, #4
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	bfbc      	itt	lt
 80106aa:	580b      	ldrlt	r3, [r1, r0]
 80106ac:	18c0      	addlt	r0, r0, r3
 80106ae:	4770      	bx	lr

080106b0 <_raise_r>:
 80106b0:	291f      	cmp	r1, #31
 80106b2:	b538      	push	{r3, r4, r5, lr}
 80106b4:	4604      	mov	r4, r0
 80106b6:	460d      	mov	r5, r1
 80106b8:	d904      	bls.n	80106c4 <_raise_r+0x14>
 80106ba:	2316      	movs	r3, #22
 80106bc:	6003      	str	r3, [r0, #0]
 80106be:	f04f 30ff 	mov.w	r0, #4294967295
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106c6:	b112      	cbz	r2, 80106ce <_raise_r+0x1e>
 80106c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106cc:	b94b      	cbnz	r3, 80106e2 <_raise_r+0x32>
 80106ce:	4620      	mov	r0, r4
 80106d0:	f000 f830 	bl	8010734 <_getpid_r>
 80106d4:	462a      	mov	r2, r5
 80106d6:	4601      	mov	r1, r0
 80106d8:	4620      	mov	r0, r4
 80106da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106de:	f000 b817 	b.w	8010710 <_kill_r>
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d00a      	beq.n	80106fc <_raise_r+0x4c>
 80106e6:	1c59      	adds	r1, r3, #1
 80106e8:	d103      	bne.n	80106f2 <_raise_r+0x42>
 80106ea:	2316      	movs	r3, #22
 80106ec:	6003      	str	r3, [r0, #0]
 80106ee:	2001      	movs	r0, #1
 80106f0:	e7e7      	b.n	80106c2 <_raise_r+0x12>
 80106f2:	2400      	movs	r4, #0
 80106f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106f8:	4628      	mov	r0, r5
 80106fa:	4798      	blx	r3
 80106fc:	2000      	movs	r0, #0
 80106fe:	e7e0      	b.n	80106c2 <_raise_r+0x12>

08010700 <raise>:
 8010700:	4b02      	ldr	r3, [pc, #8]	; (801070c <raise+0xc>)
 8010702:	4601      	mov	r1, r0
 8010704:	6818      	ldr	r0, [r3, #0]
 8010706:	f7ff bfd3 	b.w	80106b0 <_raise_r>
 801070a:	bf00      	nop
 801070c:	20000194 	.word	0x20000194

08010710 <_kill_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d07      	ldr	r5, [pc, #28]	; (8010730 <_kill_r+0x20>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	4611      	mov	r1, r2
 801071c:	602b      	str	r3, [r5, #0]
 801071e:	f7f3 f909 	bl	8003934 <_kill>
 8010722:	1c43      	adds	r3, r0, #1
 8010724:	d102      	bne.n	801072c <_kill_r+0x1c>
 8010726:	682b      	ldr	r3, [r5, #0]
 8010728:	b103      	cbz	r3, 801072c <_kill_r+0x1c>
 801072a:	6023      	str	r3, [r4, #0]
 801072c:	bd38      	pop	{r3, r4, r5, pc}
 801072e:	bf00      	nop
 8010730:	20002288 	.word	0x20002288

08010734 <_getpid_r>:
 8010734:	f7f3 b8f6 	b.w	8003924 <_getpid>

08010738 <atan>:
 8010738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	ec55 4b10 	vmov	r4, r5, d0
 8010740:	4bc3      	ldr	r3, [pc, #780]	; (8010a50 <atan+0x318>)
 8010742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010746:	429e      	cmp	r6, r3
 8010748:	46ab      	mov	fp, r5
 801074a:	dd18      	ble.n	801077e <atan+0x46>
 801074c:	4bc1      	ldr	r3, [pc, #772]	; (8010a54 <atan+0x31c>)
 801074e:	429e      	cmp	r6, r3
 8010750:	dc01      	bgt.n	8010756 <atan+0x1e>
 8010752:	d109      	bne.n	8010768 <atan+0x30>
 8010754:	b144      	cbz	r4, 8010768 <atan+0x30>
 8010756:	4622      	mov	r2, r4
 8010758:	462b      	mov	r3, r5
 801075a:	4620      	mov	r0, r4
 801075c:	4629      	mov	r1, r5
 801075e:	f7ef fd9d 	bl	800029c <__adddf3>
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	e006      	b.n	8010776 <atan+0x3e>
 8010768:	f1bb 0f00 	cmp.w	fp, #0
 801076c:	f300 8131 	bgt.w	80109d2 <atan+0x29a>
 8010770:	a59b      	add	r5, pc, #620	; (adr r5, 80109e0 <atan+0x2a8>)
 8010772:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010776:	ec45 4b10 	vmov	d0, r4, r5
 801077a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077e:	4bb6      	ldr	r3, [pc, #728]	; (8010a58 <atan+0x320>)
 8010780:	429e      	cmp	r6, r3
 8010782:	dc14      	bgt.n	80107ae <atan+0x76>
 8010784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010788:	429e      	cmp	r6, r3
 801078a:	dc0d      	bgt.n	80107a8 <atan+0x70>
 801078c:	a396      	add	r3, pc, #600	; (adr r3, 80109e8 <atan+0x2b0>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	ee10 0a10 	vmov	r0, s0
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef fd80 	bl	800029c <__adddf3>
 801079c:	4baf      	ldr	r3, [pc, #700]	; (8010a5c <atan+0x324>)
 801079e:	2200      	movs	r2, #0
 80107a0:	f7f0 f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d1e6      	bne.n	8010776 <atan+0x3e>
 80107a8:	f04f 3aff 	mov.w	sl, #4294967295
 80107ac:	e02b      	b.n	8010806 <atan+0xce>
 80107ae:	f000 f963 	bl	8010a78 <fabs>
 80107b2:	4bab      	ldr	r3, [pc, #684]	; (8010a60 <atan+0x328>)
 80107b4:	429e      	cmp	r6, r3
 80107b6:	ec55 4b10 	vmov	r4, r5, d0
 80107ba:	f300 80bf 	bgt.w	801093c <atan+0x204>
 80107be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80107c2:	429e      	cmp	r6, r3
 80107c4:	f300 80a0 	bgt.w	8010908 <atan+0x1d0>
 80107c8:	ee10 2a10 	vmov	r2, s0
 80107cc:	ee10 0a10 	vmov	r0, s0
 80107d0:	462b      	mov	r3, r5
 80107d2:	4629      	mov	r1, r5
 80107d4:	f7ef fd62 	bl	800029c <__adddf3>
 80107d8:	4ba0      	ldr	r3, [pc, #640]	; (8010a5c <atan+0x324>)
 80107da:	2200      	movs	r2, #0
 80107dc:	f7ef fd5c 	bl	8000298 <__aeabi_dsub>
 80107e0:	2200      	movs	r2, #0
 80107e2:	4606      	mov	r6, r0
 80107e4:	460f      	mov	r7, r1
 80107e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107ea:	4620      	mov	r0, r4
 80107ec:	4629      	mov	r1, r5
 80107ee:	f7ef fd55 	bl	800029c <__adddf3>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	f7f0 f82f 	bl	800085c <__aeabi_ddiv>
 80107fe:	f04f 0a00 	mov.w	sl, #0
 8010802:	4604      	mov	r4, r0
 8010804:	460d      	mov	r5, r1
 8010806:	4622      	mov	r2, r4
 8010808:	462b      	mov	r3, r5
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef fefb 	bl	8000608 <__aeabi_dmul>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4680      	mov	r8, r0
 8010818:	4689      	mov	r9, r1
 801081a:	f7ef fef5 	bl	8000608 <__aeabi_dmul>
 801081e:	a374      	add	r3, pc, #464	; (adr r3, 80109f0 <atan+0x2b8>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	4606      	mov	r6, r0
 8010826:	460f      	mov	r7, r1
 8010828:	f7ef feee 	bl	8000608 <__aeabi_dmul>
 801082c:	a372      	add	r3, pc, #456	; (adr r3, 80109f8 <atan+0x2c0>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fd33 	bl	800029c <__adddf3>
 8010836:	4632      	mov	r2, r6
 8010838:	463b      	mov	r3, r7
 801083a:	f7ef fee5 	bl	8000608 <__aeabi_dmul>
 801083e:	a370      	add	r3, pc, #448	; (adr r3, 8010a00 <atan+0x2c8>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f7ef fd2a 	bl	800029c <__adddf3>
 8010848:	4632      	mov	r2, r6
 801084a:	463b      	mov	r3, r7
 801084c:	f7ef fedc 	bl	8000608 <__aeabi_dmul>
 8010850:	a36d      	add	r3, pc, #436	; (adr r3, 8010a08 <atan+0x2d0>)
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	f7ef fd21 	bl	800029c <__adddf3>
 801085a:	4632      	mov	r2, r6
 801085c:	463b      	mov	r3, r7
 801085e:	f7ef fed3 	bl	8000608 <__aeabi_dmul>
 8010862:	a36b      	add	r3, pc, #428	; (adr r3, 8010a10 <atan+0x2d8>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	f7ef fd18 	bl	800029c <__adddf3>
 801086c:	4632      	mov	r2, r6
 801086e:	463b      	mov	r3, r7
 8010870:	f7ef feca 	bl	8000608 <__aeabi_dmul>
 8010874:	a368      	add	r3, pc, #416	; (adr r3, 8010a18 <atan+0x2e0>)
 8010876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087a:	f7ef fd0f 	bl	800029c <__adddf3>
 801087e:	4642      	mov	r2, r8
 8010880:	464b      	mov	r3, r9
 8010882:	f7ef fec1 	bl	8000608 <__aeabi_dmul>
 8010886:	a366      	add	r3, pc, #408	; (adr r3, 8010a20 <atan+0x2e8>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	4680      	mov	r8, r0
 801088e:	4689      	mov	r9, r1
 8010890:	4630      	mov	r0, r6
 8010892:	4639      	mov	r1, r7
 8010894:	f7ef feb8 	bl	8000608 <__aeabi_dmul>
 8010898:	a363      	add	r3, pc, #396	; (adr r3, 8010a28 <atan+0x2f0>)
 801089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089e:	f7ef fcfb 	bl	8000298 <__aeabi_dsub>
 80108a2:	4632      	mov	r2, r6
 80108a4:	463b      	mov	r3, r7
 80108a6:	f7ef feaf 	bl	8000608 <__aeabi_dmul>
 80108aa:	a361      	add	r3, pc, #388	; (adr r3, 8010a30 <atan+0x2f8>)
 80108ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b0:	f7ef fcf2 	bl	8000298 <__aeabi_dsub>
 80108b4:	4632      	mov	r2, r6
 80108b6:	463b      	mov	r3, r7
 80108b8:	f7ef fea6 	bl	8000608 <__aeabi_dmul>
 80108bc:	a35e      	add	r3, pc, #376	; (adr r3, 8010a38 <atan+0x300>)
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f7ef fce9 	bl	8000298 <__aeabi_dsub>
 80108c6:	4632      	mov	r2, r6
 80108c8:	463b      	mov	r3, r7
 80108ca:	f7ef fe9d 	bl	8000608 <__aeabi_dmul>
 80108ce:	a35c      	add	r3, pc, #368	; (adr r3, 8010a40 <atan+0x308>)
 80108d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d4:	f7ef fce0 	bl	8000298 <__aeabi_dsub>
 80108d8:	4632      	mov	r2, r6
 80108da:	463b      	mov	r3, r7
 80108dc:	f7ef fe94 	bl	8000608 <__aeabi_dmul>
 80108e0:	4602      	mov	r2, r0
 80108e2:	460b      	mov	r3, r1
 80108e4:	4640      	mov	r0, r8
 80108e6:	4649      	mov	r1, r9
 80108e8:	f7ef fcd8 	bl	800029c <__adddf3>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef fe8a 	bl	8000608 <__aeabi_dmul>
 80108f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	d14b      	bne.n	8010996 <atan+0x25e>
 80108fe:	4620      	mov	r0, r4
 8010900:	4629      	mov	r1, r5
 8010902:	f7ef fcc9 	bl	8000298 <__aeabi_dsub>
 8010906:	e72c      	b.n	8010762 <atan+0x2a>
 8010908:	ee10 0a10 	vmov	r0, s0
 801090c:	4b53      	ldr	r3, [pc, #332]	; (8010a5c <atan+0x324>)
 801090e:	2200      	movs	r2, #0
 8010910:	4629      	mov	r1, r5
 8010912:	f7ef fcc1 	bl	8000298 <__aeabi_dsub>
 8010916:	4b51      	ldr	r3, [pc, #324]	; (8010a5c <atan+0x324>)
 8010918:	4606      	mov	r6, r0
 801091a:	460f      	mov	r7, r1
 801091c:	2200      	movs	r2, #0
 801091e:	4620      	mov	r0, r4
 8010920:	4629      	mov	r1, r5
 8010922:	f7ef fcbb 	bl	800029c <__adddf3>
 8010926:	4602      	mov	r2, r0
 8010928:	460b      	mov	r3, r1
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	f7ef ff95 	bl	800085c <__aeabi_ddiv>
 8010932:	f04f 0a01 	mov.w	sl, #1
 8010936:	4604      	mov	r4, r0
 8010938:	460d      	mov	r5, r1
 801093a:	e764      	b.n	8010806 <atan+0xce>
 801093c:	4b49      	ldr	r3, [pc, #292]	; (8010a64 <atan+0x32c>)
 801093e:	429e      	cmp	r6, r3
 8010940:	da1d      	bge.n	801097e <atan+0x246>
 8010942:	ee10 0a10 	vmov	r0, s0
 8010946:	4b48      	ldr	r3, [pc, #288]	; (8010a68 <atan+0x330>)
 8010948:	2200      	movs	r2, #0
 801094a:	4629      	mov	r1, r5
 801094c:	f7ef fca4 	bl	8000298 <__aeabi_dsub>
 8010950:	4b45      	ldr	r3, [pc, #276]	; (8010a68 <atan+0x330>)
 8010952:	4606      	mov	r6, r0
 8010954:	460f      	mov	r7, r1
 8010956:	2200      	movs	r2, #0
 8010958:	4620      	mov	r0, r4
 801095a:	4629      	mov	r1, r5
 801095c:	f7ef fe54 	bl	8000608 <__aeabi_dmul>
 8010960:	4b3e      	ldr	r3, [pc, #248]	; (8010a5c <atan+0x324>)
 8010962:	2200      	movs	r2, #0
 8010964:	f7ef fc9a 	bl	800029c <__adddf3>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef ff74 	bl	800085c <__aeabi_ddiv>
 8010974:	f04f 0a02 	mov.w	sl, #2
 8010978:	4604      	mov	r4, r0
 801097a:	460d      	mov	r5, r1
 801097c:	e743      	b.n	8010806 <atan+0xce>
 801097e:	462b      	mov	r3, r5
 8010980:	ee10 2a10 	vmov	r2, s0
 8010984:	4939      	ldr	r1, [pc, #228]	; (8010a6c <atan+0x334>)
 8010986:	2000      	movs	r0, #0
 8010988:	f7ef ff68 	bl	800085c <__aeabi_ddiv>
 801098c:	f04f 0a03 	mov.w	sl, #3
 8010990:	4604      	mov	r4, r0
 8010992:	460d      	mov	r5, r1
 8010994:	e737      	b.n	8010806 <atan+0xce>
 8010996:	4b36      	ldr	r3, [pc, #216]	; (8010a70 <atan+0x338>)
 8010998:	4e36      	ldr	r6, [pc, #216]	; (8010a74 <atan+0x33c>)
 801099a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801099e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80109a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80109a6:	f7ef fc77 	bl	8000298 <__aeabi_dsub>
 80109aa:	4622      	mov	r2, r4
 80109ac:	462b      	mov	r3, r5
 80109ae:	f7ef fc73 	bl	8000298 <__aeabi_dsub>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80109ba:	f7ef fc6d 	bl	8000298 <__aeabi_dsub>
 80109be:	f1bb 0f00 	cmp.w	fp, #0
 80109c2:	4604      	mov	r4, r0
 80109c4:	460d      	mov	r5, r1
 80109c6:	f6bf aed6 	bge.w	8010776 <atan+0x3e>
 80109ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109ce:	461d      	mov	r5, r3
 80109d0:	e6d1      	b.n	8010776 <atan+0x3e>
 80109d2:	a51d      	add	r5, pc, #116	; (adr r5, 8010a48 <atan+0x310>)
 80109d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80109d8:	e6cd      	b.n	8010776 <atan+0x3e>
 80109da:	bf00      	nop
 80109dc:	f3af 8000 	nop.w
 80109e0:	54442d18 	.word	0x54442d18
 80109e4:	bff921fb 	.word	0xbff921fb
 80109e8:	8800759c 	.word	0x8800759c
 80109ec:	7e37e43c 	.word	0x7e37e43c
 80109f0:	e322da11 	.word	0xe322da11
 80109f4:	3f90ad3a 	.word	0x3f90ad3a
 80109f8:	24760deb 	.word	0x24760deb
 80109fc:	3fa97b4b 	.word	0x3fa97b4b
 8010a00:	a0d03d51 	.word	0xa0d03d51
 8010a04:	3fb10d66 	.word	0x3fb10d66
 8010a08:	c54c206e 	.word	0xc54c206e
 8010a0c:	3fb745cd 	.word	0x3fb745cd
 8010a10:	920083ff 	.word	0x920083ff
 8010a14:	3fc24924 	.word	0x3fc24924
 8010a18:	5555550d 	.word	0x5555550d
 8010a1c:	3fd55555 	.word	0x3fd55555
 8010a20:	2c6a6c2f 	.word	0x2c6a6c2f
 8010a24:	bfa2b444 	.word	0xbfa2b444
 8010a28:	52defd9a 	.word	0x52defd9a
 8010a2c:	3fadde2d 	.word	0x3fadde2d
 8010a30:	af749a6d 	.word	0xaf749a6d
 8010a34:	3fb3b0f2 	.word	0x3fb3b0f2
 8010a38:	fe231671 	.word	0xfe231671
 8010a3c:	3fbc71c6 	.word	0x3fbc71c6
 8010a40:	9998ebc4 	.word	0x9998ebc4
 8010a44:	3fc99999 	.word	0x3fc99999
 8010a48:	54442d18 	.word	0x54442d18
 8010a4c:	3ff921fb 	.word	0x3ff921fb
 8010a50:	440fffff 	.word	0x440fffff
 8010a54:	7ff00000 	.word	0x7ff00000
 8010a58:	3fdbffff 	.word	0x3fdbffff
 8010a5c:	3ff00000 	.word	0x3ff00000
 8010a60:	3ff2ffff 	.word	0x3ff2ffff
 8010a64:	40038000 	.word	0x40038000
 8010a68:	3ff80000 	.word	0x3ff80000
 8010a6c:	bff00000 	.word	0xbff00000
 8010a70:	08011748 	.word	0x08011748
 8010a74:	08011728 	.word	0x08011728

08010a78 <fabs>:
 8010a78:	ec51 0b10 	vmov	r0, r1, d0
 8010a7c:	ee10 2a10 	vmov	r2, s0
 8010a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a84:	ec43 2b10 	vmov	d0, r2, r3
 8010a88:	4770      	bx	lr

08010a8a <atan2>:
 8010a8a:	f000 b86d 	b.w	8010b68 <__ieee754_atan2>
	...

08010a90 <log>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	ed2d 8b02 	vpush	{d8}
 8010a96:	ec55 4b10 	vmov	r4, r5, d0
 8010a9a:	f000 f931 	bl	8010d00 <__ieee754_log>
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	462b      	mov	r3, r5
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	eeb0 8a40 	vmov.f32	s16, s0
 8010aaa:	eef0 8a60 	vmov.f32	s17, s1
 8010aae:	f7f0 f845 	bl	8000b3c <__aeabi_dcmpun>
 8010ab2:	b998      	cbnz	r0, 8010adc <log+0x4c>
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	4620      	mov	r0, r4
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7f0 f834 	bl	8000b28 <__aeabi_dcmpgt>
 8010ac0:	b960      	cbnz	r0, 8010adc <log+0x4c>
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	f7f0 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ace:	b160      	cbz	r0, 8010aea <log+0x5a>
 8010ad0:	f7fc fe90 	bl	800d7f4 <__errno>
 8010ad4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8010b00 <log+0x70>
 8010ad8:	2322      	movs	r3, #34	; 0x22
 8010ada:	6003      	str	r3, [r0, #0]
 8010adc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ae0:	eef0 0a68 	vmov.f32	s1, s17
 8010ae4:	ecbd 8b02 	vpop	{d8}
 8010ae8:	bd38      	pop	{r3, r4, r5, pc}
 8010aea:	f7fc fe83 	bl	800d7f4 <__errno>
 8010aee:	ecbd 8b02 	vpop	{d8}
 8010af2:	2321      	movs	r3, #33	; 0x21
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010afa:	4803      	ldr	r0, [pc, #12]	; (8010b08 <log+0x78>)
 8010afc:	f000 bb6c 	b.w	80111d8 <nan>
 8010b00:	00000000 	.word	0x00000000
 8010b04:	fff00000 	.word	0xfff00000
 8010b08:	08011618 	.word	0x08011618

08010b0c <sqrt>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	ed2d 8b02 	vpush	{d8}
 8010b12:	ec55 4b10 	vmov	r4, r5, d0
 8010b16:	f000 faad 	bl	8011074 <__ieee754_sqrt>
 8010b1a:	4622      	mov	r2, r4
 8010b1c:	462b      	mov	r3, r5
 8010b1e:	4620      	mov	r0, r4
 8010b20:	4629      	mov	r1, r5
 8010b22:	eeb0 8a40 	vmov.f32	s16, s0
 8010b26:	eef0 8a60 	vmov.f32	s17, s1
 8010b2a:	f7f0 f807 	bl	8000b3c <__aeabi_dcmpun>
 8010b2e:	b990      	cbnz	r0, 8010b56 <sqrt+0x4a>
 8010b30:	2200      	movs	r2, #0
 8010b32:	2300      	movs	r3, #0
 8010b34:	4620      	mov	r0, r4
 8010b36:	4629      	mov	r1, r5
 8010b38:	f7ef ffd8 	bl	8000aec <__aeabi_dcmplt>
 8010b3c:	b158      	cbz	r0, 8010b56 <sqrt+0x4a>
 8010b3e:	f7fc fe59 	bl	800d7f4 <__errno>
 8010b42:	2321      	movs	r3, #33	; 0x21
 8010b44:	6003      	str	r3, [r0, #0]
 8010b46:	2200      	movs	r2, #0
 8010b48:	2300      	movs	r3, #0
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	f7ef fe85 	bl	800085c <__aeabi_ddiv>
 8010b52:	ec41 0b18 	vmov	d8, r0, r1
 8010b56:	eeb0 0a48 	vmov.f32	s0, s16
 8010b5a:	eef0 0a68 	vmov.f32	s1, s17
 8010b5e:	ecbd 8b02 	vpop	{d8}
 8010b62:	bd38      	pop	{r3, r4, r5, pc}
 8010b64:	0000      	movs	r0, r0
	...

08010b68 <__ieee754_atan2>:
 8010b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b6c:	ec57 6b11 	vmov	r6, r7, d1
 8010b70:	4273      	negs	r3, r6
 8010b72:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010cf8 <__ieee754_atan2+0x190>
 8010b76:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010b7a:	4333      	orrs	r3, r6
 8010b7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010b80:	4573      	cmp	r3, lr
 8010b82:	ec51 0b10 	vmov	r0, r1, d0
 8010b86:	ee11 8a10 	vmov	r8, s2
 8010b8a:	d80a      	bhi.n	8010ba2 <__ieee754_atan2+0x3a>
 8010b8c:	4244      	negs	r4, r0
 8010b8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b92:	4304      	orrs	r4, r0
 8010b94:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010b98:	4574      	cmp	r4, lr
 8010b9a:	ee10 9a10 	vmov	r9, s0
 8010b9e:	468c      	mov	ip, r1
 8010ba0:	d907      	bls.n	8010bb2 <__ieee754_atan2+0x4a>
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	463b      	mov	r3, r7
 8010ba6:	f7ef fb79 	bl	800029c <__adddf3>
 8010baa:	ec41 0b10 	vmov	d0, r0, r1
 8010bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bb2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010bb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010bba:	4334      	orrs	r4, r6
 8010bbc:	d103      	bne.n	8010bc6 <__ieee754_atan2+0x5e>
 8010bbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc2:	f7ff bdb9 	b.w	8010738 <atan>
 8010bc6:	17bc      	asrs	r4, r7, #30
 8010bc8:	f004 0402 	and.w	r4, r4, #2
 8010bcc:	ea53 0909 	orrs.w	r9, r3, r9
 8010bd0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010bd4:	d107      	bne.n	8010be6 <__ieee754_atan2+0x7e>
 8010bd6:	2c02      	cmp	r4, #2
 8010bd8:	d060      	beq.n	8010c9c <__ieee754_atan2+0x134>
 8010bda:	2c03      	cmp	r4, #3
 8010bdc:	d1e5      	bne.n	8010baa <__ieee754_atan2+0x42>
 8010bde:	a142      	add	r1, pc, #264	; (adr r1, 8010ce8 <__ieee754_atan2+0x180>)
 8010be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010be4:	e7e1      	b.n	8010baa <__ieee754_atan2+0x42>
 8010be6:	ea52 0808 	orrs.w	r8, r2, r8
 8010bea:	d106      	bne.n	8010bfa <__ieee754_atan2+0x92>
 8010bec:	f1bc 0f00 	cmp.w	ip, #0
 8010bf0:	da5f      	bge.n	8010cb2 <__ieee754_atan2+0x14a>
 8010bf2:	a13f      	add	r1, pc, #252	; (adr r1, 8010cf0 <__ieee754_atan2+0x188>)
 8010bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bf8:	e7d7      	b.n	8010baa <__ieee754_atan2+0x42>
 8010bfa:	4572      	cmp	r2, lr
 8010bfc:	d10f      	bne.n	8010c1e <__ieee754_atan2+0xb6>
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	f104 34ff 	add.w	r4, r4, #4294967295
 8010c04:	d107      	bne.n	8010c16 <__ieee754_atan2+0xae>
 8010c06:	2c02      	cmp	r4, #2
 8010c08:	d84c      	bhi.n	8010ca4 <__ieee754_atan2+0x13c>
 8010c0a:	4b35      	ldr	r3, [pc, #212]	; (8010ce0 <__ieee754_atan2+0x178>)
 8010c0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010c10:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010c14:	e7c9      	b.n	8010baa <__ieee754_atan2+0x42>
 8010c16:	2c02      	cmp	r4, #2
 8010c18:	d848      	bhi.n	8010cac <__ieee754_atan2+0x144>
 8010c1a:	4b32      	ldr	r3, [pc, #200]	; (8010ce4 <__ieee754_atan2+0x17c>)
 8010c1c:	e7f6      	b.n	8010c0c <__ieee754_atan2+0xa4>
 8010c1e:	4573      	cmp	r3, lr
 8010c20:	d0e4      	beq.n	8010bec <__ieee754_atan2+0x84>
 8010c22:	1a9b      	subs	r3, r3, r2
 8010c24:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010c28:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c2c:	da1e      	bge.n	8010c6c <__ieee754_atan2+0x104>
 8010c2e:	2f00      	cmp	r7, #0
 8010c30:	da01      	bge.n	8010c36 <__ieee754_atan2+0xce>
 8010c32:	323c      	adds	r2, #60	; 0x3c
 8010c34:	db1e      	blt.n	8010c74 <__ieee754_atan2+0x10c>
 8010c36:	4632      	mov	r2, r6
 8010c38:	463b      	mov	r3, r7
 8010c3a:	f7ef fe0f 	bl	800085c <__aeabi_ddiv>
 8010c3e:	ec41 0b10 	vmov	d0, r0, r1
 8010c42:	f7ff ff19 	bl	8010a78 <fabs>
 8010c46:	f7ff fd77 	bl	8010738 <atan>
 8010c4a:	ec51 0b10 	vmov	r0, r1, d0
 8010c4e:	2c01      	cmp	r4, #1
 8010c50:	d013      	beq.n	8010c7a <__ieee754_atan2+0x112>
 8010c52:	2c02      	cmp	r4, #2
 8010c54:	d015      	beq.n	8010c82 <__ieee754_atan2+0x11a>
 8010c56:	2c00      	cmp	r4, #0
 8010c58:	d0a7      	beq.n	8010baa <__ieee754_atan2+0x42>
 8010c5a:	a319      	add	r3, pc, #100	; (adr r3, 8010cc0 <__ieee754_atan2+0x158>)
 8010c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c60:	f7ef fb1a 	bl	8000298 <__aeabi_dsub>
 8010c64:	a318      	add	r3, pc, #96	; (adr r3, 8010cc8 <__ieee754_atan2+0x160>)
 8010c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6a:	e014      	b.n	8010c96 <__ieee754_atan2+0x12e>
 8010c6c:	a118      	add	r1, pc, #96	; (adr r1, 8010cd0 <__ieee754_atan2+0x168>)
 8010c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c72:	e7ec      	b.n	8010c4e <__ieee754_atan2+0xe6>
 8010c74:	2000      	movs	r0, #0
 8010c76:	2100      	movs	r1, #0
 8010c78:	e7e9      	b.n	8010c4e <__ieee754_atan2+0xe6>
 8010c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c7e:	4619      	mov	r1, r3
 8010c80:	e793      	b.n	8010baa <__ieee754_atan2+0x42>
 8010c82:	a30f      	add	r3, pc, #60	; (adr r3, 8010cc0 <__ieee754_atan2+0x158>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fb06 	bl	8000298 <__aeabi_dsub>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	a10d      	add	r1, pc, #52	; (adr r1, 8010cc8 <__ieee754_atan2+0x160>)
 8010c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c96:	f7ef faff 	bl	8000298 <__aeabi_dsub>
 8010c9a:	e786      	b.n	8010baa <__ieee754_atan2+0x42>
 8010c9c:	a10a      	add	r1, pc, #40	; (adr r1, 8010cc8 <__ieee754_atan2+0x160>)
 8010c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ca2:	e782      	b.n	8010baa <__ieee754_atan2+0x42>
 8010ca4:	a10c      	add	r1, pc, #48	; (adr r1, 8010cd8 <__ieee754_atan2+0x170>)
 8010ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010caa:	e77e      	b.n	8010baa <__ieee754_atan2+0x42>
 8010cac:	2000      	movs	r0, #0
 8010cae:	2100      	movs	r1, #0
 8010cb0:	e77b      	b.n	8010baa <__ieee754_atan2+0x42>
 8010cb2:	a107      	add	r1, pc, #28	; (adr r1, 8010cd0 <__ieee754_atan2+0x168>)
 8010cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cb8:	e777      	b.n	8010baa <__ieee754_atan2+0x42>
 8010cba:	bf00      	nop
 8010cbc:	f3af 8000 	nop.w
 8010cc0:	33145c07 	.word	0x33145c07
 8010cc4:	3ca1a626 	.word	0x3ca1a626
 8010cc8:	54442d18 	.word	0x54442d18
 8010ccc:	400921fb 	.word	0x400921fb
 8010cd0:	54442d18 	.word	0x54442d18
 8010cd4:	3ff921fb 	.word	0x3ff921fb
 8010cd8:	54442d18 	.word	0x54442d18
 8010cdc:	3fe921fb 	.word	0x3fe921fb
 8010ce0:	08011768 	.word	0x08011768
 8010ce4:	08011780 	.word	0x08011780
 8010ce8:	54442d18 	.word	0x54442d18
 8010cec:	c00921fb 	.word	0xc00921fb
 8010cf0:	54442d18 	.word	0x54442d18
 8010cf4:	bff921fb 	.word	0xbff921fb
 8010cf8:	7ff00000 	.word	0x7ff00000
 8010cfc:	00000000 	.word	0x00000000

08010d00 <__ieee754_log>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	ec51 0b10 	vmov	r0, r1, d0
 8010d08:	ed2d 8b04 	vpush	{d8-d9}
 8010d0c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010d10:	b083      	sub	sp, #12
 8010d12:	460d      	mov	r5, r1
 8010d14:	da29      	bge.n	8010d6a <__ieee754_log+0x6a>
 8010d16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d1a:	4303      	orrs	r3, r0
 8010d1c:	ee10 2a10 	vmov	r2, s0
 8010d20:	d10c      	bne.n	8010d3c <__ieee754_log+0x3c>
 8010d22:	49cf      	ldr	r1, [pc, #828]	; (8011060 <__ieee754_log+0x360>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	2300      	movs	r3, #0
 8010d28:	2000      	movs	r0, #0
 8010d2a:	f7ef fd97 	bl	800085c <__aeabi_ddiv>
 8010d2e:	ec41 0b10 	vmov	d0, r0, r1
 8010d32:	b003      	add	sp, #12
 8010d34:	ecbd 8b04 	vpop	{d8-d9}
 8010d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	2900      	cmp	r1, #0
 8010d3e:	da05      	bge.n	8010d4c <__ieee754_log+0x4c>
 8010d40:	460b      	mov	r3, r1
 8010d42:	f7ef faa9 	bl	8000298 <__aeabi_dsub>
 8010d46:	2200      	movs	r2, #0
 8010d48:	2300      	movs	r3, #0
 8010d4a:	e7ee      	b.n	8010d2a <__ieee754_log+0x2a>
 8010d4c:	4bc5      	ldr	r3, [pc, #788]	; (8011064 <__ieee754_log+0x364>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f7ef fc5a 	bl	8000608 <__aeabi_dmul>
 8010d54:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010d58:	460d      	mov	r5, r1
 8010d5a:	4ac3      	ldr	r2, [pc, #780]	; (8011068 <__ieee754_log+0x368>)
 8010d5c:	4295      	cmp	r5, r2
 8010d5e:	dd06      	ble.n	8010d6e <__ieee754_log+0x6e>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	f7ef fa9a 	bl	800029c <__adddf3>
 8010d68:	e7e1      	b.n	8010d2e <__ieee754_log+0x2e>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e7f5      	b.n	8010d5a <__ieee754_log+0x5a>
 8010d6e:	152c      	asrs	r4, r5, #20
 8010d70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010d74:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010d78:	441c      	add	r4, r3
 8010d7a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010d7e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d86:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010d8a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010d8e:	ea42 0105 	orr.w	r1, r2, r5
 8010d92:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010d96:	2200      	movs	r2, #0
 8010d98:	4bb4      	ldr	r3, [pc, #720]	; (801106c <__ieee754_log+0x36c>)
 8010d9a:	f7ef fa7d 	bl	8000298 <__aeabi_dsub>
 8010d9e:	1cab      	adds	r3, r5, #2
 8010da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010da4:	2b02      	cmp	r3, #2
 8010da6:	4682      	mov	sl, r0
 8010da8:	468b      	mov	fp, r1
 8010daa:	f04f 0200 	mov.w	r2, #0
 8010dae:	dc53      	bgt.n	8010e58 <__ieee754_log+0x158>
 8010db0:	2300      	movs	r3, #0
 8010db2:	f7ef fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8010db6:	b1d0      	cbz	r0, 8010dee <__ieee754_log+0xee>
 8010db8:	2c00      	cmp	r4, #0
 8010dba:	f000 8122 	beq.w	8011002 <__ieee754_log+0x302>
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f7ef fbb8 	bl	8000534 <__aeabi_i2d>
 8010dc4:	a390      	add	r3, pc, #576	; (adr r3, 8011008 <__ieee754_log+0x308>)
 8010dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dca:	4606      	mov	r6, r0
 8010dcc:	460f      	mov	r7, r1
 8010dce:	f7ef fc1b 	bl	8000608 <__aeabi_dmul>
 8010dd2:	a38f      	add	r3, pc, #572	; (adr r3, 8011010 <__ieee754_log+0x310>)
 8010dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd8:	4604      	mov	r4, r0
 8010dda:	460d      	mov	r5, r1
 8010ddc:	4630      	mov	r0, r6
 8010dde:	4639      	mov	r1, r7
 8010de0:	f7ef fc12 	bl	8000608 <__aeabi_dmul>
 8010de4:	4602      	mov	r2, r0
 8010de6:	460b      	mov	r3, r1
 8010de8:	4620      	mov	r0, r4
 8010dea:	4629      	mov	r1, r5
 8010dec:	e7ba      	b.n	8010d64 <__ieee754_log+0x64>
 8010dee:	a38a      	add	r3, pc, #552	; (adr r3, 8011018 <__ieee754_log+0x318>)
 8010df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df4:	4650      	mov	r0, sl
 8010df6:	4659      	mov	r1, fp
 8010df8:	f7ef fc06 	bl	8000608 <__aeabi_dmul>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	2000      	movs	r0, #0
 8010e02:	499b      	ldr	r1, [pc, #620]	; (8011070 <__ieee754_log+0x370>)
 8010e04:	f7ef fa48 	bl	8000298 <__aeabi_dsub>
 8010e08:	4652      	mov	r2, sl
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	460f      	mov	r7, r1
 8010e0e:	465b      	mov	r3, fp
 8010e10:	4650      	mov	r0, sl
 8010e12:	4659      	mov	r1, fp
 8010e14:	f7ef fbf8 	bl	8000608 <__aeabi_dmul>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	4639      	mov	r1, r7
 8010e20:	f7ef fbf2 	bl	8000608 <__aeabi_dmul>
 8010e24:	4606      	mov	r6, r0
 8010e26:	460f      	mov	r7, r1
 8010e28:	b914      	cbnz	r4, 8010e30 <__ieee754_log+0x130>
 8010e2a:	4632      	mov	r2, r6
 8010e2c:	463b      	mov	r3, r7
 8010e2e:	e0a2      	b.n	8010f76 <__ieee754_log+0x276>
 8010e30:	4620      	mov	r0, r4
 8010e32:	f7ef fb7f 	bl	8000534 <__aeabi_i2d>
 8010e36:	a374      	add	r3, pc, #464	; (adr r3, 8011008 <__ieee754_log+0x308>)
 8010e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3c:	4680      	mov	r8, r0
 8010e3e:	4689      	mov	r9, r1
 8010e40:	f7ef fbe2 	bl	8000608 <__aeabi_dmul>
 8010e44:	a372      	add	r3, pc, #456	; (adr r3, 8011010 <__ieee754_log+0x310>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	460d      	mov	r5, r1
 8010e4e:	4640      	mov	r0, r8
 8010e50:	4649      	mov	r1, r9
 8010e52:	f7ef fbd9 	bl	8000608 <__aeabi_dmul>
 8010e56:	e0a7      	b.n	8010fa8 <__ieee754_log+0x2a8>
 8010e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e5c:	f7ef fa1e 	bl	800029c <__adddf3>
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4650      	mov	r0, sl
 8010e66:	4659      	mov	r1, fp
 8010e68:	f7ef fcf8 	bl	800085c <__aeabi_ddiv>
 8010e6c:	ec41 0b18 	vmov	d8, r0, r1
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ef fb5f 	bl	8000534 <__aeabi_i2d>
 8010e76:	ec53 2b18 	vmov	r2, r3, d8
 8010e7a:	ec41 0b19 	vmov	d9, r0, r1
 8010e7e:	ec51 0b18 	vmov	r0, r1, d8
 8010e82:	f7ef fbc1 	bl	8000608 <__aeabi_dmul>
 8010e86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010e8a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010e8e:	9301      	str	r3, [sp, #4]
 8010e90:	4602      	mov	r2, r0
 8010e92:	460b      	mov	r3, r1
 8010e94:	4680      	mov	r8, r0
 8010e96:	4689      	mov	r9, r1
 8010e98:	f7ef fbb6 	bl	8000608 <__aeabi_dmul>
 8010e9c:	a360      	add	r3, pc, #384	; (adr r3, 8011020 <__ieee754_log+0x320>)
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	f7ef fbaf 	bl	8000608 <__aeabi_dmul>
 8010eaa:	a35f      	add	r3, pc, #380	; (adr r3, 8011028 <__ieee754_log+0x328>)
 8010eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb0:	f7ef f9f4 	bl	800029c <__adddf3>
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	463b      	mov	r3, r7
 8010eb8:	f7ef fba6 	bl	8000608 <__aeabi_dmul>
 8010ebc:	a35c      	add	r3, pc, #368	; (adr r3, 8011030 <__ieee754_log+0x330>)
 8010ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec2:	f7ef f9eb 	bl	800029c <__adddf3>
 8010ec6:	4632      	mov	r2, r6
 8010ec8:	463b      	mov	r3, r7
 8010eca:	f7ef fb9d 	bl	8000608 <__aeabi_dmul>
 8010ece:	a35a      	add	r3, pc, #360	; (adr r3, 8011038 <__ieee754_log+0x338>)
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	f7ef f9e2 	bl	800029c <__adddf3>
 8010ed8:	4642      	mov	r2, r8
 8010eda:	464b      	mov	r3, r9
 8010edc:	f7ef fb94 	bl	8000608 <__aeabi_dmul>
 8010ee0:	a357      	add	r3, pc, #348	; (adr r3, 8011040 <__ieee754_log+0x340>)
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	4680      	mov	r8, r0
 8010ee8:	4689      	mov	r9, r1
 8010eea:	4630      	mov	r0, r6
 8010eec:	4639      	mov	r1, r7
 8010eee:	f7ef fb8b 	bl	8000608 <__aeabi_dmul>
 8010ef2:	a355      	add	r3, pc, #340	; (adr r3, 8011048 <__ieee754_log+0x348>)
 8010ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef8:	f7ef f9d0 	bl	800029c <__adddf3>
 8010efc:	4632      	mov	r2, r6
 8010efe:	463b      	mov	r3, r7
 8010f00:	f7ef fb82 	bl	8000608 <__aeabi_dmul>
 8010f04:	a352      	add	r3, pc, #328	; (adr r3, 8011050 <__ieee754_log+0x350>)
 8010f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0a:	f7ef f9c7 	bl	800029c <__adddf3>
 8010f0e:	4632      	mov	r2, r6
 8010f10:	463b      	mov	r3, r7
 8010f12:	f7ef fb79 	bl	8000608 <__aeabi_dmul>
 8010f16:	460b      	mov	r3, r1
 8010f18:	4602      	mov	r2, r0
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	f7ef f9bd 	bl	800029c <__adddf3>
 8010f22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	3551      	adds	r5, #81	; 0x51
 8010f2a:	431d      	orrs	r5, r3
 8010f2c:	2d00      	cmp	r5, #0
 8010f2e:	4680      	mov	r8, r0
 8010f30:	4689      	mov	r9, r1
 8010f32:	dd48      	ble.n	8010fc6 <__ieee754_log+0x2c6>
 8010f34:	4b4e      	ldr	r3, [pc, #312]	; (8011070 <__ieee754_log+0x370>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	4650      	mov	r0, sl
 8010f3a:	4659      	mov	r1, fp
 8010f3c:	f7ef fb64 	bl	8000608 <__aeabi_dmul>
 8010f40:	4652      	mov	r2, sl
 8010f42:	465b      	mov	r3, fp
 8010f44:	f7ef fb60 	bl	8000608 <__aeabi_dmul>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	460f      	mov	r7, r1
 8010f50:	4640      	mov	r0, r8
 8010f52:	4649      	mov	r1, r9
 8010f54:	f7ef f9a2 	bl	800029c <__adddf3>
 8010f58:	ec53 2b18 	vmov	r2, r3, d8
 8010f5c:	f7ef fb54 	bl	8000608 <__aeabi_dmul>
 8010f60:	4680      	mov	r8, r0
 8010f62:	4689      	mov	r9, r1
 8010f64:	b964      	cbnz	r4, 8010f80 <__ieee754_log+0x280>
 8010f66:	4602      	mov	r2, r0
 8010f68:	460b      	mov	r3, r1
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	4639      	mov	r1, r7
 8010f6e:	f7ef f993 	bl	8000298 <__aeabi_dsub>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	4650      	mov	r0, sl
 8010f78:	4659      	mov	r1, fp
 8010f7a:	f7ef f98d 	bl	8000298 <__aeabi_dsub>
 8010f7e:	e6d6      	b.n	8010d2e <__ieee754_log+0x2e>
 8010f80:	a321      	add	r3, pc, #132	; (adr r3, 8011008 <__ieee754_log+0x308>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	ec51 0b19 	vmov	r0, r1, d9
 8010f8a:	f7ef fb3d 	bl	8000608 <__aeabi_dmul>
 8010f8e:	a320      	add	r3, pc, #128	; (adr r3, 8011010 <__ieee754_log+0x310>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	4604      	mov	r4, r0
 8010f96:	460d      	mov	r5, r1
 8010f98:	ec51 0b19 	vmov	r0, r1, d9
 8010f9c:	f7ef fb34 	bl	8000608 <__aeabi_dmul>
 8010fa0:	4642      	mov	r2, r8
 8010fa2:	464b      	mov	r3, r9
 8010fa4:	f7ef f97a 	bl	800029c <__adddf3>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4630      	mov	r0, r6
 8010fae:	4639      	mov	r1, r7
 8010fb0:	f7ef f972 	bl	8000298 <__aeabi_dsub>
 8010fb4:	4652      	mov	r2, sl
 8010fb6:	465b      	mov	r3, fp
 8010fb8:	f7ef f96e 	bl	8000298 <__aeabi_dsub>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	e7d9      	b.n	8010f7a <__ieee754_log+0x27a>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	4650      	mov	r0, sl
 8010fcc:	4659      	mov	r1, fp
 8010fce:	f7ef f963 	bl	8000298 <__aeabi_dsub>
 8010fd2:	ec53 2b18 	vmov	r2, r3, d8
 8010fd6:	f7ef fb17 	bl	8000608 <__aeabi_dmul>
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	2c00      	cmp	r4, #0
 8010fe0:	f43f af23 	beq.w	8010e2a <__ieee754_log+0x12a>
 8010fe4:	a308      	add	r3, pc, #32	; (adr r3, 8011008 <__ieee754_log+0x308>)
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	ec51 0b19 	vmov	r0, r1, d9
 8010fee:	f7ef fb0b 	bl	8000608 <__aeabi_dmul>
 8010ff2:	a307      	add	r3, pc, #28	; (adr r3, 8011010 <__ieee754_log+0x310>)
 8010ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	460d      	mov	r5, r1
 8010ffc:	ec51 0b19 	vmov	r0, r1, d9
 8011000:	e727      	b.n	8010e52 <__ieee754_log+0x152>
 8011002:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8011058 <__ieee754_log+0x358>
 8011006:	e694      	b.n	8010d32 <__ieee754_log+0x32>
 8011008:	fee00000 	.word	0xfee00000
 801100c:	3fe62e42 	.word	0x3fe62e42
 8011010:	35793c76 	.word	0x35793c76
 8011014:	3dea39ef 	.word	0x3dea39ef
 8011018:	55555555 	.word	0x55555555
 801101c:	3fd55555 	.word	0x3fd55555
 8011020:	df3e5244 	.word	0xdf3e5244
 8011024:	3fc2f112 	.word	0x3fc2f112
 8011028:	96cb03de 	.word	0x96cb03de
 801102c:	3fc74664 	.word	0x3fc74664
 8011030:	94229359 	.word	0x94229359
 8011034:	3fd24924 	.word	0x3fd24924
 8011038:	55555593 	.word	0x55555593
 801103c:	3fe55555 	.word	0x3fe55555
 8011040:	d078c69f 	.word	0xd078c69f
 8011044:	3fc39a09 	.word	0x3fc39a09
 8011048:	1d8e78af 	.word	0x1d8e78af
 801104c:	3fcc71c5 	.word	0x3fcc71c5
 8011050:	9997fa04 	.word	0x9997fa04
 8011054:	3fd99999 	.word	0x3fd99999
	...
 8011060:	c3500000 	.word	0xc3500000
 8011064:	43500000 	.word	0x43500000
 8011068:	7fefffff 	.word	0x7fefffff
 801106c:	3ff00000 	.word	0x3ff00000
 8011070:	3fe00000 	.word	0x3fe00000

08011074 <__ieee754_sqrt>:
 8011074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011078:	ec55 4b10 	vmov	r4, r5, d0
 801107c:	4e55      	ldr	r6, [pc, #340]	; (80111d4 <__ieee754_sqrt+0x160>)
 801107e:	43ae      	bics	r6, r5
 8011080:	ee10 0a10 	vmov	r0, s0
 8011084:	ee10 3a10 	vmov	r3, s0
 8011088:	462a      	mov	r2, r5
 801108a:	4629      	mov	r1, r5
 801108c:	d110      	bne.n	80110b0 <__ieee754_sqrt+0x3c>
 801108e:	ee10 2a10 	vmov	r2, s0
 8011092:	462b      	mov	r3, r5
 8011094:	f7ef fab8 	bl	8000608 <__aeabi_dmul>
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	4620      	mov	r0, r4
 801109e:	4629      	mov	r1, r5
 80110a0:	f7ef f8fc 	bl	800029c <__adddf3>
 80110a4:	4604      	mov	r4, r0
 80110a6:	460d      	mov	r5, r1
 80110a8:	ec45 4b10 	vmov	d0, r4, r5
 80110ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b0:	2d00      	cmp	r5, #0
 80110b2:	dc10      	bgt.n	80110d6 <__ieee754_sqrt+0x62>
 80110b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110b8:	4330      	orrs	r0, r6
 80110ba:	d0f5      	beq.n	80110a8 <__ieee754_sqrt+0x34>
 80110bc:	b15d      	cbz	r5, 80110d6 <__ieee754_sqrt+0x62>
 80110be:	ee10 2a10 	vmov	r2, s0
 80110c2:	462b      	mov	r3, r5
 80110c4:	ee10 0a10 	vmov	r0, s0
 80110c8:	f7ef f8e6 	bl	8000298 <__aeabi_dsub>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	f7ef fbc4 	bl	800085c <__aeabi_ddiv>
 80110d4:	e7e6      	b.n	80110a4 <__ieee754_sqrt+0x30>
 80110d6:	1512      	asrs	r2, r2, #20
 80110d8:	d074      	beq.n	80111c4 <__ieee754_sqrt+0x150>
 80110da:	07d4      	lsls	r4, r2, #31
 80110dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80110e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80110e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80110e8:	bf5e      	ittt	pl
 80110ea:	0fda      	lsrpl	r2, r3, #31
 80110ec:	005b      	lslpl	r3, r3, #1
 80110ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80110f2:	2400      	movs	r4, #0
 80110f4:	0fda      	lsrs	r2, r3, #31
 80110f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80110fa:	107f      	asrs	r7, r7, #1
 80110fc:	005b      	lsls	r3, r3, #1
 80110fe:	2516      	movs	r5, #22
 8011100:	4620      	mov	r0, r4
 8011102:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011106:	1886      	adds	r6, r0, r2
 8011108:	428e      	cmp	r6, r1
 801110a:	bfde      	ittt	le
 801110c:	1b89      	suble	r1, r1, r6
 801110e:	18b0      	addle	r0, r6, r2
 8011110:	18a4      	addle	r4, r4, r2
 8011112:	0049      	lsls	r1, r1, #1
 8011114:	3d01      	subs	r5, #1
 8011116:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801111a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801111e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011122:	d1f0      	bne.n	8011106 <__ieee754_sqrt+0x92>
 8011124:	462a      	mov	r2, r5
 8011126:	f04f 0e20 	mov.w	lr, #32
 801112a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801112e:	4281      	cmp	r1, r0
 8011130:	eb06 0c05 	add.w	ip, r6, r5
 8011134:	dc02      	bgt.n	801113c <__ieee754_sqrt+0xc8>
 8011136:	d113      	bne.n	8011160 <__ieee754_sqrt+0xec>
 8011138:	459c      	cmp	ip, r3
 801113a:	d811      	bhi.n	8011160 <__ieee754_sqrt+0xec>
 801113c:	f1bc 0f00 	cmp.w	ip, #0
 8011140:	eb0c 0506 	add.w	r5, ip, r6
 8011144:	da43      	bge.n	80111ce <__ieee754_sqrt+0x15a>
 8011146:	2d00      	cmp	r5, #0
 8011148:	db41      	blt.n	80111ce <__ieee754_sqrt+0x15a>
 801114a:	f100 0801 	add.w	r8, r0, #1
 801114e:	1a09      	subs	r1, r1, r0
 8011150:	459c      	cmp	ip, r3
 8011152:	bf88      	it	hi
 8011154:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011158:	eba3 030c 	sub.w	r3, r3, ip
 801115c:	4432      	add	r2, r6
 801115e:	4640      	mov	r0, r8
 8011160:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011164:	f1be 0e01 	subs.w	lr, lr, #1
 8011168:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801116c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011170:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011174:	d1db      	bne.n	801112e <__ieee754_sqrt+0xba>
 8011176:	430b      	orrs	r3, r1
 8011178:	d006      	beq.n	8011188 <__ieee754_sqrt+0x114>
 801117a:	1c50      	adds	r0, r2, #1
 801117c:	bf13      	iteet	ne
 801117e:	3201      	addne	r2, #1
 8011180:	3401      	addeq	r4, #1
 8011182:	4672      	moveq	r2, lr
 8011184:	f022 0201 	bicne.w	r2, r2, #1
 8011188:	1063      	asrs	r3, r4, #1
 801118a:	0852      	lsrs	r2, r2, #1
 801118c:	07e1      	lsls	r1, r4, #31
 801118e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011192:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011196:	bf48      	it	mi
 8011198:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801119c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80111a0:	4614      	mov	r4, r2
 80111a2:	e781      	b.n	80110a8 <__ieee754_sqrt+0x34>
 80111a4:	0ad9      	lsrs	r1, r3, #11
 80111a6:	3815      	subs	r0, #21
 80111a8:	055b      	lsls	r3, r3, #21
 80111aa:	2900      	cmp	r1, #0
 80111ac:	d0fa      	beq.n	80111a4 <__ieee754_sqrt+0x130>
 80111ae:	02cd      	lsls	r5, r1, #11
 80111b0:	d50a      	bpl.n	80111c8 <__ieee754_sqrt+0x154>
 80111b2:	f1c2 0420 	rsb	r4, r2, #32
 80111b6:	fa23 f404 	lsr.w	r4, r3, r4
 80111ba:	1e55      	subs	r5, r2, #1
 80111bc:	4093      	lsls	r3, r2
 80111be:	4321      	orrs	r1, r4
 80111c0:	1b42      	subs	r2, r0, r5
 80111c2:	e78a      	b.n	80110da <__ieee754_sqrt+0x66>
 80111c4:	4610      	mov	r0, r2
 80111c6:	e7f0      	b.n	80111aa <__ieee754_sqrt+0x136>
 80111c8:	0049      	lsls	r1, r1, #1
 80111ca:	3201      	adds	r2, #1
 80111cc:	e7ef      	b.n	80111ae <__ieee754_sqrt+0x13a>
 80111ce:	4680      	mov	r8, r0
 80111d0:	e7bd      	b.n	801114e <__ieee754_sqrt+0xda>
 80111d2:	bf00      	nop
 80111d4:	7ff00000 	.word	0x7ff00000

080111d8 <nan>:
 80111d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111e0 <nan+0x8>
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	00000000 	.word	0x00000000
 80111e4:	7ff80000 	.word	0x7ff80000

080111e8 <_init>:
 80111e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ea:	bf00      	nop
 80111ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ee:	bc08      	pop	{r3}
 80111f0:	469e      	mov	lr, r3
 80111f2:	4770      	bx	lr

080111f4 <_fini>:
 80111f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f6:	bf00      	nop
 80111f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111fa:	bc08      	pop	{r3}
 80111fc:	469e      	mov	lr, r3
 80111fe:	4770      	bx	lr
